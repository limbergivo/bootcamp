{"ast":null,"code":"import React__default, { useContext, useMemo, useRef, useState, useEffect } from 'react';\nimport { M as Modal, T as Type, a as TextButton, B as Button, d as ButtonTypes, e as ButtonSizes, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, s as selectors, h as UserProfileProvider } from './index-f66438bd.js';\nimport { c as LocalizationContext, d as __spreadArray, w as withSendbirdContext } from './LocalizationContext-963dc1a0.js';\nimport { n as copyToClipboard } from './index-a1512a62.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, P as PlaceHolder, f as PlaceHolderTypes } from './index-6ff1fa1b.js';\nimport { g as getOpenChannelAvatar } from './utils-fa79caf2.js';\nimport { I as InputLabel, a as Input, n as noop, U as UserListItem$1 } from './index-ec4c0e85.js';\nimport { a as Accordion, A as AccordionGroup } from './index-7e077832.js';\nimport 'prop-types';\nimport 'react-dom';\n\nfunction ChannelAvatar(_a) {\n  var channel = _a.channel,\n      theme = _a.theme,\n      _b = _a.height,\n      height = _b === void 0 ? 56 : _b,\n      _c = _a.width,\n      width = _c === void 0 ? 56 : _c;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var memoizedAvatar = useMemo(function () {\n    return /*#__PURE__*/React__default.createElement(Avatar, {\n      className: \"sendbird-chat-header__avatar--open-channel\",\n      src: getOpenChannelAvatar(channel),\n      width: width + \"px\",\n      height: height + \"px\",\n      alt: channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE\n    });\n  }, [channel.coverUrl, theme]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, memoizedAvatar);\n}\n\nvar EditDetails = function EditDetails(props) {\n  var _onSubmit = props.onSubmit,\n      onCancel = props.onCancel,\n      channel = props.channel,\n      theme = props.theme;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n\n  var _a = useState(null),\n      currentImg = _a[0],\n      setCurrentImg = _a[1];\n\n  var _b = useState(null),\n      newFile = _b[0],\n      setNewFile = _b[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var title = channel.name;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (title !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(newFile, inputRef.current.value);\n\n      onCancel();\n    },\n    type: Type.PRIMARY\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), /*#__PURE__*/React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\n\nfunction ChannelProfile(props) {\n  var disabled = props.disabled,\n      channel = props.channel,\n      theme = props.theme,\n      onChannelInfoChange = props.onChannelInfoChange;\n  var title = channel.name;\n\n  var _a = useState(false),\n      showModal = _a[0],\n      setShowModal = _a[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile--inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    theme: theme,\n    height: 80,\n    width: 80\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1,\n    className: \"sendbird-openchannel-profile__title\"\n  }, title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE), /*#__PURE__*/React__default.createElement(TextButton, {\n    disabled: disabled,\n    className: \"sendbird-openchannel-profile__edit\",\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n\n      setShowModal(true);\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY\n  }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)), showModal && /*#__PURE__*/React__default.createElement(EditDetails, {\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    },\n    onSubmit: onChannelInfoChange,\n    channel: channel,\n    theme: theme\n  })));\n}\n\nfunction ParticipantsModal(_a) {\n  var hideModal = _a.hideModal,\n      channel = _a.channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(null),\n      participantListQuery = _c[0],\n      setParticipantListQuery = _c[1];\n\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$1, {\n      user: p,\n      key: p.userId\n    });\n  }))));\n}\n\nvar SHOWN_MEMBER_MAX = 10;\n\nvar UserListItem = function UserListItem(_a) {\n  var member = _a.member,\n      _b = _a.currentUser,\n      currentUser = _b === void 0 ? '' : _b;\n  var avatarRef = useRef(null);\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member-avatar\"\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        src: member.profileUrl,\n        width: 24,\n        height: 24\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: member,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        disableMessaging: true,\n        user: member,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, member.nickname || stringSet.NO_NAME, currentUser === member.userId && stringSet.CHANNEL_SETTING__MEMBERS__YOU));\n};\n\nfunction ParticipantsAccordion(_a) {\n  var channel = _a.channel,\n      currentUser = _a.currentUser;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(false),\n      showMoreModal = _c[0],\n      setShowMoreModal = _c[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-participants-accordion\",\n    id: \"participants\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MEMBERS,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-openchannel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__list\"\n      }, participants.slice(0, SHOWN_MEMBER_MAX).map(function (p) {\n        return /*#__PURE__*/React__default.createElement(UserListItem, {\n          member: p,\n          currentUser: currentUser,\n          key: p.userId\n        });\n      }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n        className: \"sendbird-channel-settings__empty-list\",\n        type: LabelTypography.SUBTITLE_2,\n        color: LabelColors.ONBACKGROUND_3\n      }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null), participants.length >= SHOWN_MEMBER_MAX && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__footer\"\n      }, /*#__PURE__*/React__default.createElement(Button, {\n        className: \"sendbird-participants-accordion__footer__all-participants\",\n        type: ButtonTypes.SECONDARY,\n        size: ButtonSizes.SMALL,\n        onClick: function onClick() {\n          return setShowMoreModal(true);\n        }\n      }, stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL), showMoreModal && /*#__PURE__*/React__default.createElement(ParticipantsModal, {\n        currentUser: currentUser,\n        hideModal: function hideModal() {\n          setShowMoreModal(false);\n        },\n        channel: channel\n      })));\n    }\n  });\n}\n\nfunction DeleteChannel(_a) {\n  var isOnline = _a.isOnline,\n      onDeleteChannel = _a.onDeleteChannel;\n\n  var _b = useState(false),\n      showDeleteChannelModal = _b[0],\n      setShowDeleteChannelModal = _b[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__panel-item\\n          sendbird-openchannel-settings__delete-channel\\n            \" + (!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''),\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowDeleteChannelModal(true);\n    },\n    onClick: function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      setShowDeleteChannelModal(true);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    className: ['sendbird-openchannel-settings__panel-icon-left', 'sendbird-openchannel-settings__panel-icon__delete'].join(' '),\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)), showDeleteChannelModal && /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: function onCancel() {\n      setShowDeleteChannelModal(false);\n    },\n    onSubmit: function onSubmit() {\n      onDeleteChannel();\n    },\n    submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE\n  }));\n}\n\nfunction ParticipantsList(_a) {\n  var channel = _a.channel,\n      onCloseClick = _a.onCloseClick,\n      currentUser = _a.currentUser;\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _b = useState([]),\n      participants = _b[0],\n      setParticipants = _b[1];\n\n  var _c = useState(null),\n      participantListQuery = _c[0],\n      setParticipantListQuery = _c[1];\n\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participant\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participants-list\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      member: p,\n      currentUser: currentUser,\n      key: p.userId\n    });\n  }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null)));\n}\n\nfunction InvalidChannel(_a) {\n  var onCloseClick = _a.onCloseClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__placeholder\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.WRONG\n  })));\n}\n\nvar emptyLogger = function emptyLogger() {\n  return {\n    info: noop,\n    error: noop,\n    warning: noop\n  };\n};\n\nfunction OpenChannelSettings(props) {\n  var channelUrl = props.channelUrl,\n      _a = props.onCloseClick,\n      _onCloseClick = _a === void 0 ? noop : _a,\n      onBeforeUpdateChannel = props.onBeforeUpdateChannel,\n      _b = props.onChannelModified,\n      onChannelModified = _b === void 0 ? noop : _b,\n      renderChannelProfile = props.renderChannelProfile,\n      renderUserProfile = props.renderUserProfile,\n      _onDeleteChannel = props.onDeleteChannel,\n      _c = props.disableUserProfile,\n      disableUserProfile = _c === void 0 ? false : _c,\n      _d = props.logger,\n      logger = _d === void 0 ? emptyLogger() : _d,\n      sdk = props.sdk,\n      theme = props.theme,\n      user = props.user,\n      isOnline = props.isOnline;\n\n  var currentUser = user.userId;\n\n  var _e = useState(null),\n      channel = _e[0],\n      setChannel = _e[1];\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk]);\n\n  if (!channel) {\n    return /*#__PURE__*/React__default.createElement(InvalidChannel, {\n      onCloseClick: function onCloseClick() {\n        logger.info('OpenChannelSettings: Click close');\n\n        if (_onCloseClick) {\n          _onCloseClick();\n        }\n      }\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-openchannel-settings\",\n    disableUserProfile: disableUserProfile,\n    renderUserProfile: renderUserProfile\n  }, channel.isOperator(user) ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      _onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__profile\"\n  }, renderChannelProfile ? renderChannelProfile({\n    channel: channel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(ChannelProfile, {\n    disabled: !isOnline,\n    channel: channel,\n    theme: theme,\n    onChannelInfoChange: function onChannelInfoChange(currentImg, currentTitle) {\n      logger.info('ChannelSettings: Channel information being updated');\n\n      if (onBeforeUpdateChannel) {\n        var params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n        logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n        channel.updateChannel(params, function (openChannel) {\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      } else {\n        channel.updateChannel(currentTitle, currentImg, channel.data, function (openChannel) {\n          logger.info('ChannelSettings: Channel information updated', openChannel);\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      }\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__url\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__copy-icon\",\n    type: IconTypes.COPY,\n    height: \"22px\",\n    width: \"22px\",\n    onClick: function onClick() {\n      copyToClipboard(channel.url);\n    }\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-label\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-value\",\n    type: LabelTypography.SUBTITLE_2\n  }, channel.url)), /*#__PURE__*/React__default.createElement(AccordionGroup, null, /*#__PURE__*/React__default.createElement(ParticipantsAccordion, {\n    channel: channel,\n    currentUser: currentUser\n  })), /*#__PURE__*/React__default.createElement(DeleteChannel, {\n    isOnline: isOnline,\n    onDeleteChannel: function onDeleteChannel() {\n      channel.delete(function (response, error) {\n        if (error) {\n          logger.warning('OpenChannelSettings: Delete channel failed', error);\n          return;\n        }\n\n        logger.info('OpenChannelSettings: Delete channel success', response);\n\n        if (_onDeleteChannel) {\n          _onDeleteChannel(channel);\n        }\n      });\n    }\n  })) : /*#__PURE__*/React__default.createElement(ParticipantsList, {\n    currentUser: currentUser,\n    channel: channel,\n    onCloseClick: function onCloseClick() {\n      _onCloseClick();\n    }\n  }));\n}\n\nvar ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, function (store) {\n  var logger = store && store.config && store.config.logger;\n  var theme = store && store.config && store.config.theme || 'light';\n  var isOnline = store && store.config && store.config.isOnline;\n  var user = store && store.stores && store.stores.userStore && store.stores.userStore.user;\n  return {\n    sdk: selectors.getSdk(store),\n    logger: logger,\n    theme: theme,\n    isOnline: isOnline,\n    user: user\n  };\n});\nexport { ChannelSettingsWithSendbird as default };","map":{"version":3,"mappings":"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","names":["ChannelAvatar","_a","channel","theme","_b","height","_c","width","useContext","LocalizationContext","memoizedAvatar","useMemo","React","Avatar","className","src","utils","alt","name","stringSet","OPEN_CHANNEL_SETTINGS__NO_TITLE","coverUrl","EditDetails","props","onCancel","inputRef","useRef","formRef","hiddenInputRef","useState","currentImg","setCurrentImg","newFile","setNewFile","title","Modal","titleText","MODAL__CHANNEL_INFORMATION__TITLE","submitText","BUTTON__SAVE","onSubmit","current","value","reportValidity","type","ButtonType","PRIMARY","ref","e","preventDefault","InputLabel","MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE","OpenChannelAvatar","accept","style","display","onChange","URL","createObjectURL","target","files","TextButton","onClick","click","notUnderline","Label","LabelTypography","BUTTON_1","color","LabelColors","MODAL__CHANNEL_INFORMATION__UPLOAD","MODAL__CHANNEL_INFORMATION__CHANNEL_NAME","Input","required","placeHolder","MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER","ChannelProfile","onChannelInfoChange","showModal","setShowModal","SUBTITLE_2","ONBACKGROUND_1","disabled","ONBACKGROUND_2","CHANNEL_SETTING__PROFILE__EDIT","EditDetailsModal","ParticipantsModal","hideModal","participants","setParticipants","participantListQuery","setParticipantListQuery","useEffect","createParticipantListQuery","next","participantList","error","hideFooter","noop","OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE","onScroll","fetchMore","clientHeight","scrollTop","scrollHeight","hasNext","fetchedParticipants","map","p","UserListItem","user","key","userId","SHOWN_MEMBER_MAX","member","currentUser","avatarRef","UserProfileContext","disableUserProfile","renderUserProfile","ContextMenu","menuTrigger","toggleDropdown","profileUrl","menuItems","closeDropdown","MenuItems","openLeft","parentRef","parentContainRef","paddingTop","paddingBottom","currentUserId","close","UserProfile","disableMessaging","onSuccess","nickname","NO_NAME","CHANNEL_SETTING__MEMBERS__YOU","ParticipantsAccordion","showMoreModal","setShowMoreModal","Accordion","id","renderTitle","Icon","IconTypes","MEMBERS","fillColor","IconColors","SUBTITLE_1","OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE","renderContent","slice","length","ONBACKGROUND_3","OPEN_CHANNEL_SETTINGS__EMPTY_LIST","Button","ButtonTypes","SECONDARY","size","ButtonSizes","SMALL","OPEN_CHANNEL_SETTINGS__SEE_ALL","DeleteChannel","isOnline","onDeleteChannel","showDeleteChannelModal","setShowDeleteChannelModal","role","tabIndex","onKeyDown","DELETE","join","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE","ParticipantsList","onCloseClick","H_2","OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE","CLOSE","InvalidChannel","CHANNEL_SETTING__HEADER__TITLE","PlaceHolder","PlaceHolderTypes","WRONG","emptyLogger","info","warning","OpenChannelSettings","onBeforeUpdateChannel","onChannelModified","renderChannelProfile","_d","logger","sdk","setChannel","channelUrl","getConnectionState","OpenChannel","getChannel","openChannel","UserProfileProvider","isOperator","currentTitle","params","data","updateChannel","COPY","copyToClipboard","url","CAPTION_2","OPEN_CHANNEL_SETTINGS__OPERATOR_URL","AccordionGroup","delete","response","ChannelSettingsWithSendbird","withSendbirdContext","store","config","stores","userStore","selectors","getSdk"],"sources":["C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\ChannelAvatar\\OpenChannelAvatar.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\EditDetailsModal.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ChannelProfile.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsModal.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsAccordion.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\DeleteChannel.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsList.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\InvalidChannel.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\index.tsx"],"sourcesContent":["import React, { useMemo, useContext } from 'react';\n\nimport Avatar from '../Avatar/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  theme: string;\n  height?: number;\n  width?: number;\n}\n\nfunction ChannelAvatar({\n  channel,\n  theme,\n  height = 56,\n  width = 56,\n}: Props): JSX.Element{\n  const { stringSet } = useContext(LocalizationContext);\n  const memoizedAvatar = useMemo(() => {\n    return (\n      <Avatar\n        className=\"sendbird-chat-header__avatar--open-channel\"\n        src={utils.getOpenChannelAvatar(channel)}\n        width={`${width}px`}\n        height={`${height}px`}\n        alt={channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE}\n      />\n    );\n  }, [channel.coverUrl, theme]);\n  return (\n    <>{ memoizedAvatar }</>\n  );\n}\n\nexport default ChannelAvatar;\n","import React, {\n  useState,\n  useRef,\n  useContext,\n  ReactElement,\n} from 'react';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Modal from '../../../ui/Modal';\nimport Input, { InputLabel } from '../../../ui/Input';\nimport Avatar from '../../../ui/Avatar/index';\nimport { Type as ButtonType } from '../../../ui/Button/type';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport TextButton from '../../../ui/TextButton';\nimport OpenChannelAvatar from '../../../ui/ChannelAvatar/OpenChannelAvatar';\n\ninterface Props {\n  onSubmit(newFile: File, newTitle: string): void;\n  onCancel(): void;\n  channel: SendBird.OpenChannel;\n  theme: string;\n}\n\nconst EditDetails = (props: Props): ReactElement => {\n  const {\n    onSubmit,\n    onCancel,\n    channel,\n    theme,\n  } = props;\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const hiddenInputRef = useRef(null);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const title = channel.name;\n  return (\n    <Modal\n      titleText={stringSet.MODAL__CHANNEL_INFORMATION__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (title !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(newFile, inputRef.current.value);\n        onCancel();\n      }}\n      type={ButtonType.PRIMARY}\n    >\n      <form\n        className=\"channel-profile-form\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <div className=\"channel-profile-form__img-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE}\n          </InputLabel>\n          <div className=\"channel-profile-form__avatar\">\n            {\n              currentImg\n                ? (\n                  <Avatar\n                    height=\"80px\"\n                    width=\"80px\"\n                    src={currentImg}\n                  />\n                ) : (\n                  <OpenChannelAvatar\n                    height={80}\n                    width={80}\n                    channel={channel}\n                    theme={theme}\n                  />\n                )\n              }\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"channel-profile-form__avatar-button\"\n            onClick={() => hiddenInputRef.current.click()}\n            notUnderline\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD}\n            </Label>\n          </TextButton>\n        </div>\n        <div className=\"channel-profile-form__name-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME}\n          </InputLabel>\n          <Input\n            required={title !== ''}\n            name=\"channel-profile-form__name\"\n            ref={inputRef}\n            value={title}\n            placeHolder={stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER}\n          />\n        </div>\n      </form>\n    </Modal>\n  );\n};\n\nexport default EditDetails;\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n} from 'react';\n\nimport './channel-profile.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport TextButton from '../../../ui/TextButton';\nimport OpenChannelAvatar from '../../../ui/ChannelAvatar/OpenChannelAvatar';\nimport EditDetailsModal from './EditDetailsModal';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  disabled: boolean;\n  theme: string;\n  onChannelInfoChange(currentImg: File, currentTitle: string): void;\n}\n\nexport default function ChannelProfile(props: Props): ReactElement {\n  const {\n    disabled,\n    channel,\n    theme,\n    onChannelInfoChange,\n  } = props;\n  const title = channel.name;\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div className=\"sendbird-openchannel-profile\">\n      <div className=\"sendbird-openchannel-profile--inner\">\n        <div className=\"sendbird-openchannel-profile__avatar\">\n          <OpenChannelAvatar\n            channel={channel}\n            theme={theme}\n            height={80}\n            width={80}\n          />\n        </div>\n        <Label\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n          className=\"sendbird-openchannel-profile__title\"\n        >\n          {title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE}\n        </Label>\n        <TextButton\n          disabled={disabled}\n          className=\"sendbird-openchannel-profile__edit\"\n          onClick={() => {\n            if (disabled) { return; }\n            setShowModal(true);\n          }}\n          notUnderline\n        >\n          <Label\n            type={LabelTypography.BUTTON_1}\n            color={disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY}\n          >\n            {stringSet.CHANNEL_SETTING__PROFILE__EDIT}\n          </Label>\n        </TextButton>\n        {\n          showModal && (\n            <EditDetailsModal\n              onCancel={() => setShowModal(false)}\n              onSubmit={onChannelInfoChange}\n              channel={channel}\n              theme={theme}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","import React, {\n  ReactElement,\n  useEffect,\n  useState,\n  useContext,\n} from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport UserListItem from '../../../ui/UserListItem';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { noop } from '../../../utils/utils';\n\ninterface Props {\n  currentUser: string;\n  hideModal(): void;\n  channel: SendBird.OpenChannel;\n}\n\nexport default function ParticipantsModal({\n  hideModal,\n  channel,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, []);\n  return (\n    <div>\n      <Modal\n        hideFooter\n        onCancel={() => hideModal()}\n        onSubmit={noop}\n        titleText={stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE}\n      >\n        <div\n          className=\"sendbird-more-members__popup-scroll\"\n          onScroll={(e) => {\n            const { hasNext } = participantListQuery;\n            const target = e.target as HTMLTextAreaElement;\n            const fetchMore = (\n              target.clientHeight + target.scrollTop === target.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              participantListQuery.next((fetchedParticipants, error) => {\n                if (error) {\n                  return;\n                }\n                setParticipants([\n                  ...participants,\n                  ...fetchedParticipants,\n                ])\n              });\n            }\n          }}\n        >\n          { participants.map((p) => (\n            <UserListItem\n              user={p}\n              key={p.userId}\n            />\n          ))}\n        </div>\n      </Modal>\n    </div>\n  )\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../ui/Button';\nimport Accordion from '../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport Avatar from '../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../ui/ContextMenu';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface UserListItemProps {\n  member: SendBird.User;\n  currentUser?: string;\n}\n\nexport const UserListItem = ({\n  member,\n  currentUser = '',\n}: UserListItemProps): ReactElement => {\n  const avatarRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <Avatar\n              onClick={() => {\n                if (!disableUserProfile) {\n                  toggleDropdown();\n                }\n              }}\n              ref={avatarRef}\n              src={member.profileUrl}\n              width={24}\n              height={24}\n            />\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: 0, paddingBottom: 0 }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: member,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={member}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label type={LabelTypography.SUBTITLE_2} color={LabelColors.ONBACKGROUND_1}>\n        {member.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === member.userId) && (\n            stringSet.CHANNEL_SETTING__MEMBERS__YOU\n          )\n        }\n      </Label>\n    </div>\n  );\n};\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  currentUser: string;\n}\n\nexport default function ParticipantsAccordion({ channel, currentUser }: Props): ReactElement {\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, SHOWN_MEMBER_MAX).map((p) => (\n                <UserListItem\n                  member={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {\n              (participants && participants.length === 0)\n                ? (\n                    <Label\n                      className=\"sendbird-channel-settings__empty-list\"\n                      type={LabelTypography.SUBTITLE_2}\n                      color={LabelColors.ONBACKGROUND_3}\n                    >\n                      {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                    </Label>\n                ): null\n            }\n          </div>\n          {\n            participants.length >= SHOWN_MEMBER_MAX && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      currentUser={currentUser}\n                      hideModal={() => {\n                        setShowMoreModal(false);\n                      }}\n                      channel={channel}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useState,\n  useContext,\n} from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  isOnline: boolean;\n  onDeleteChannel(): void;\n}\n\nexport default function DeleteChannel({\n  isOnline,\n  onDeleteChannel,\n}: Props): ReactElement {\n  const [showDeleteChannelModal, setShowDeleteChannelModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <>\n      <div\n        className={\n          `sendbird-openchannel-settings__panel-item\n          sendbird-openchannel-settings__delete-channel\n            ${!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''}`\n        }\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={() => {\n          if (!isOnline) { return; }\n          setShowDeleteChannelModal(true);\n        }}\n        onClick={() => {\n          if (!isOnline) { return; }\n          setShowDeleteChannelModal(true);\n        }}\n      >\n        <Icon\n          type={IconTypes.DELETE}\n          className={[\n            'sendbird-openchannel-settings__panel-icon-left',\n            'sendbird-openchannel-settings__panel-icon__delete',\n          ].join(' ')}\n          height=\"24px\"\n          width=\"24px\"\n        />\n        <Label\n          type={LabelTypography.SUBTITLE_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL}\n        </Label>\n      </div>\n      {\n        showDeleteChannelModal && (\n          <Modal\n            onCancel={() => {\n              setShowDeleteChannelModal(false);\n            }}\n            onSubmit={() => {\n              onDeleteChannel();\n            }}\n            submitText={stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT}\n            titleText={stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE}\n          />\n        )\n      }\n    </>\n  )\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\n\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nimport { UserListItem } from './ParticipantsAccordion';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  onCloseClick(): void;\n  currentUser: string;\n}\n\nexport default function ParticipantsList({\n  channel,\n  onCloseClick,\n  currentUser,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return (\n    <div className=\"sendbird-openchannel-settings__participant\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div\n        className=\"sendbird-openchannel-settings__participants-list\"\n        onScroll={(e) => {\n          const { hasNext } = participantListQuery;\n          const target = e.target as HTMLTextAreaElement;\n          const fetchMore = (\n            target.clientHeight + target.scrollTop === target.scrollHeight\n          );\n\n          if (hasNext && fetchMore) {\n            participantListQuery.next((fetchedParticipants, error) => {\n              if (error) {\n                return;\n              }\n              setParticipants([\n                ...participants,\n                ...fetchedParticipants,\n              ])\n            });\n          }\n        }}\n      >\n        <div>\n          {\n            participants.map((p: SendBird.User) => (\n              <UserListItem\n                member={p}\n                currentUser={currentUser}\n                key={p.userId}\n              />\n            ))\n          }\n          {\n            (participants && participants.length === 0)\n              ? (\n                  <Label\n                    className=\"sendbird-channel-settings__empty-list\"\n                    type={LabelTypography.SUBTITLE_2}\n                    color={LabelColors.ONBACKGROUND_3}\n                  >\n                    {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                  </Label>\n              ): null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { ReactElement, useContext } from 'react'\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nimport PlaceHolder from '../../../ui/PlaceHolder';\nimport PlaceHolderTypes from '../../../ui/PlaceHolder/type';\n\ninterface Props {\n  onCloseClick?(): void;\n}\n\nexport default function InvalidChannel({\n  onCloseClick,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-openchannel-settings\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div className=\"sendbird-openchannel-settings__placeholder\">\n        <PlaceHolder type={PlaceHolderTypes.WRONG} />\n      </div>\n    </div>\n  )\n}\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport { OpenChannelSettingsProps } from '../../index';\n\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport selectors from '../../lib/selectors';\n\nimport { copyToClipboard } from '../../utils'\n\nimport './index.scss';\nimport Label, { LabelTypography, LabelColors } from '../../ui/Label';\nimport Icon, { IconTypes } from '../../ui/Icon';\nimport ChannelProfile from './components/ChannelProfile';\nimport ParticipantsAccordion from './components/ParticipantsAccordion';\nimport DeleteChannel from './components/DeleteChannel';\nimport ParticipantsList from './components/ParticipantsList';\nimport InvalidChannel from './components/InvalidChannel';\nimport { AccordionGroup } from '../../ui/Accordion';\nimport { noop } from '../../utils/utils';\n\nconst emptyLogger = () => ({\n  info: noop,\n  error: noop,\n  warning: noop,\n});\n\ninterface Props extends OpenChannelSettingsProps {\n  logger: SendbirdUIKit.Logger;\n  sdk: SendBird.SendBirdInstance;\n  theme: string;\n  user: SendBird.User;\n  isOnline: boolean;\n}\n\nfunction OpenChannelSettings(props: Props) {\n  const {\n    channelUrl,\n    onCloseClick = noop,\n    onBeforeUpdateChannel,\n    onChannelModified = noop,\n    renderChannelProfile,\n    renderUserProfile,\n    onDeleteChannel,\n    disableUserProfile = false,\n    logger = emptyLogger(),\n    sdk,\n    theme,\n    user,\n    isOnline,\n  } = props;\n\n  const currentUser = user.userId;\n  const [channel, setChannel] = useState<SendBird.OpenChannel | null>(null);\n  const { stringSet } = useContext(LocalizationContext);\n  useEffect(() => {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk])\n  if (!channel) {\n    return (\n      <InvalidChannel\n        onCloseClick={() => {\n          logger.info('OpenChannelSettings: Click close');\n          if (onCloseClick) {\n            onCloseClick();\n          }\n        }}\n      />\n    );\n  }\n  return (\n    <UserProfileProvider\n      className=\"sendbird-openchannel-settings\"\n      disableUserProfile={disableUserProfile}\n      renderUserProfile={renderUserProfile}\n    >\n      {\n        channel.isOperator(user)\n          ? (\n            <>\n              <div className=\"sendbird-openchannel-settings__header\">\n                <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n                </Label>\n                <Icon\n                  className=\"sendbird-openchannel-settings__close-icon\"\n                  type={IconTypes.CLOSE}\n                  height=\"24px\"\n                  width=\"24px\"\n                  onClick={() => {\n                    onCloseClick();\n                  }}\n                />\n              </div>\n              <div className=\"sendbird-openchannel-settings__profile\">\n              {\n                renderChannelProfile\n                  ? renderChannelProfile({ channel, user })\n                  : (\n                    <ChannelProfile\n                      disabled={!isOnline}\n                      channel={channel}\n                      theme={theme}\n                      onChannelInfoChange={(currentImg: File, currentTitle: string) => {\n                        logger.info('ChannelSettings: Channel information being updated');\n                        if (onBeforeUpdateChannel) {\n                          const params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n                          logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n                          channel.updateChannel(params, (openChannel) => {\n                            onChannelModified(openChannel);\n                            // setChannel(openChannel) => alone not working\n                            setChannel(null);\n                            setChannel(openChannel);\n                          });\n                        } else {\n                          channel.updateChannel(\n                            currentTitle,\n                            currentImg,\n                            channel.data,\n                            (openChannel) => {\n                              logger.info('ChannelSettings: Channel information updated', openChannel);\n                              onChannelModified(openChannel);\n                              // setChannel(openChannel) => alone not working\n                              setChannel(null);\n                              setChannel(openChannel);\n                            },\n                          );\n                        }\n                      }}\n                    />\n                  )\n                }\n              </div>\n              <div className=\"sendbird-openchannel-settings__url\">\n                <Icon\n                  className=\"sendbird-openchannel-settings__copy-icon\"\n                  type={IconTypes.COPY}\n                  height=\"22px\"\n                  width=\"22px\"\n                  onClick={() => {\n                    copyToClipboard(channel.url);\n                  }}\n                />\n                <Label\n                  className=\"sendbird-openchannel-settings__url-label\"\n                  type={LabelTypography.CAPTION_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL}\n                </Label>\n                <Label\n                  className=\"sendbird-openchannel-settings__url-value\"\n                  type={LabelTypography.SUBTITLE_2}\n                >\n                  {channel.url}\n                </Label>\n              </div>\n              <AccordionGroup>\n                <ParticipantsAccordion\n                  channel={channel}\n                  currentUser={currentUser}\n                />\n              </AccordionGroup>\n              <DeleteChannel\n                isOnline={isOnline}\n                onDeleteChannel={() => {\n                  channel.delete((response, error) => {\n                    if (error) {\n                      logger.warning('OpenChannelSettings: Delete channel failed', error);\n                      return;\n                    }\n                    logger.info('OpenChannelSettings: Delete channel success', response);\n                    if (onDeleteChannel) {\n                      onDeleteChannel(channel);\n                    }\n                  });\n                }}\n              />\n            </>\n          ) : (\n            <ParticipantsList\n              currentUser={currentUser}\n              channel={channel}\n              onCloseClick={() => {\n                onCloseClick();\n              }}\n            />\n          )\n      }\n    </UserProfileProvider>\n  )\n}\n\nconst ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, (store) => {\n  const logger = (store && store.config && store.config.logger);\n  const theme = (store && store.config && store.config.theme) || 'light';\n  const isOnline = (store && store.config && store.config.isOnline);\n  const user = (store && store.stores && store.stores.userStore\n    && store.stores.userStore.user);\n  return {\n    sdk: selectors.getSdk(store),\n    logger,\n    theme,\n    isOnline,\n    user,\n  };\n});\n\nexport default ChannelSettingsWithSendbird;\n"]},"metadata":{},"sourceType":"module"}