{"ast":null,"code":"function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\n\nfunction startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\n\nfunction isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\n\nfunction isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\n\nfunction isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}\n\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nfunction buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // TODO: Remove String()\n\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nvar formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nfunction buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}\n\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\n\nfunction buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nvar defaultLocale = locale;\n\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\n\nfunction addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\n\nfunction subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}\n\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\n\nvar formatters$2 = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n} // See issue: https://github.com/date-fns/date-fns/issues/376\n\n\nfunction startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n} // See issue: https://github.com/date-fns/date-fns/issues/376\n\n\nfunction getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n} // See issue: https://github.com/date-fns/date-fns/issues/376\n\n\nfunction startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}\n\nvar MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;\n} // See issue: https://github.com/date-fns/date-fns/issues/376\n\n\nfunction startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n} // See issue: https://github.com/date-fns/date-fns/issues/376\n\n\nfunction getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n} // See issue: https://github.com/date-fns/date-fns/issues/376\n\n\nfunction startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}\n\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\n\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return formatters$2.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return formatters$2.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return formatters$2.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return formatters$2.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return formatters$2.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return formatters$2.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return formatters$2.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return formatters$2.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nvar formatters$1 = formatters;\n\nfunction dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nvar longFormatters$1 = longFormatters;\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nfunction getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}\n\nvar protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\n\nfunction isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\n\nfunction isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\n\nfunction throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n} // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nfunction format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters$1[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters$1[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\nexport { subMilliseconds as a, toInteger as b, defaultLocale as d, format as f, getTimezoneOffsetInMilliseconds as g, isSameDay as i, requiredArgs as r, startOfDay as s, toDate as t };","map":{"version":3,"mappings":"AAAe,SAASA,YAAT,CAAsBC,QAAtB,EAAgCC,IAAhC,EAAsC;EACnD,IAAIA,IAAI,CAACC,MAAL,GAAcF,QAAlB,EAA4B;IAC1B,MAAM,IAAIG,SAAJ,CAAcH,QAAQ,GAAG,WAAX,IAA0BA,QAAQ,GAAG,CAAX,GAAe,GAAf,GAAqB,EAA/C,IAAqD,sBAArD,GAA8EC,IAAI,CAACC,MAAnF,GAA4F,UAA1G,CAAN;EACD;AACH;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,SAASE,MAAT,CAAgBC,QAAhB,EAA0B;EACvCN,YAAY,CAAC,CAAD,EAAIO,SAAJ,CAAZ;EACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,QAA/B,CAAb,CAFuC,CAEe;;EAEtD,IAAIA,QAAQ,YAAYO,IAApB,IAA4B,OAAOP,QAAP,KAAoB,QAApB,IAAgCE,MAAM,KAAK,eAA3E,EAA4F;IAC9F;IACI,OAAO,IAAIK,IAAJ,CAASP,QAAQ,CAACQ,OAAT,EAAT,CAAP;EACD,CAHD,MAGO,IAAI,OAAOR,QAAP,KAAoB,QAApB,IAAgCE,MAAM,KAAK,iBAA/C,EAAkE;IACvE,OAAO,IAAIK,IAAJ,CAASP,QAAT,CAAP;EACD,CAFM,MAEA;IACL,IAAI,CAAC,OAAOA,QAAP,KAAoB,QAApB,IAAgCE,MAAM,KAAK,iBAA5C,KAAkE,OAAOO,OAAP,KAAmB,WAAzF,EAAsG;MAC1G;MACMA,OAAO,CAACC,IAAR,CAAa,kJAAb,EAFoG,CAE6D;;MAEjKD,OAAO,CAACC,IAAR,CAAa,IAAIC,KAAJ,GAAYC,KAAzB;IACD;;IAED,OAAO,IAAIL,IAAJ,CAASM,GAAT,CAAP;EACD;AACH;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,SAASC,UAAT,CAAoBC,SAApB,EAA+B;EAC5CrB,YAAY,CAAC,CAAD,EAAIO,SAAJ,CAAZ;EACA,IAAIe,IAAI,GAAGjB,MAAM,CAACgB,SAAD,CAAjB;EACAC,IAAI,CAACC,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;EACA,OAAOD,IAAP;AACF;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,SAASE,SAAT,CAAmBC,aAAnB,EAAkCC,cAAlC,EAAkD;EAC/D1B,YAAY,CAAC,CAAD,EAAIO,SAAJ,CAAZ;EACA,IAAIoB,kBAAkB,GAAGP,UAAU,CAACK,aAAD,CAAnC;EACA,IAAIG,mBAAmB,GAAGR,UAAU,CAACM,cAAD,CAApC;EACA,OAAOC,kBAAkB,CAACb,OAAnB,OAAiCc,mBAAmB,CAACd,OAApB,EAAxC;AACF;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEe,SAASe,MAAT,CAAgBC,KAAhB,EAAuB;EACpC9B,YAAY,CAAC,CAAD,EAAIO,SAAJ,CAAZ;EACA,OAAOuB,KAAK,YAAYjB,IAAjB,IAAyB,OAAOiB,KAAP,KAAiB,QAAjB,IAA6BrB,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BkB,KAA/B,MAA0C,eAAvG;AACF;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","names":["requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","startOfDay","dirtyDate","date","setHours","isSameDay","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","dateRightStartOfDay","isDate","value","isValid","isNaN","Number","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","options","result","tokenValue","replace","addSuffix","comparison","buildFormatLongFn","undefined","width","String","defaultWidth","format","formats","dateFormats","full","long","medium","short","timeFormats","dateTimeFormats","formatLong","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_date","_baseDate","_options","buildLocalizeFn","dirtyIndex","dirtyOptions","context","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","index","argumentCallback","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","dayPeriodValues","am","pm","midnight","noon","morning","afternoon","evening","night","formattingDayPeriodValues","ordinalNumber","dirtyNumber","number","rem100","localize","era","quarter","month","day","dayPeriod","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","test","findKey","valueCallback","rest","slice","object","predicate","hasOwnProperty","array","buildMatchPatternFn","parseResult","parsePattern","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","any","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","parseInt","locale","code","weekStartsOn","firstWeekContainsDate","toInteger","Math","ceil","floor","addMilliseconds","dirtyAmount","timestamp","amount","subMilliseconds","addLeadingZeros","targetLength","sign","output","abs","formatters","y","signedYear","getUTCFullYear","year","M","getUTCMonth","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","pow","MILLISECONDS_IN_DAY","getUTCDayOfYear","setUTCMonth","setUTCHours","startOfYearTimestamp","difference","startOfUTCISOWeek","getUTCDay","diff","setUTCDate","getUTCISOWeekYear","fourthOfJanuaryOfNextYear","setUTCFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_WEEK","getUTCISOWeek","round","startOfUTCWeek","localeWeekStartsOn","defaultWeekStartsOn","RangeError","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","getUTCWeek","dayPeriodEnum","G","unit","lightFormatters","Y","signedWeekYear","weekYear","twoDigitYear","R","isoWeekYear","u","Q","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","hours","toLowerCase","b","B","K","k","X","_localize","originalDate","_originalDate","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","dirtyDelimiter","absOffset","minutes","delimiter","dateLongFormatter","timeLongFormatter","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","longFormatters","p","P","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","defaultLocale","formatterOptions","map","substring","firstCharacter","longFormatter","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens"],"sources":["C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\requiredArgs\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\toDate\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\startOfDay\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\isSameDay\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\isDate\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\isValid\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatDistance\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildFormatLongFn\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatLong\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatRelative\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildLocalizeFn\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\localize\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildMatchFn\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildMatchPatternFn\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\match\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\toInteger\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\addMilliseconds\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\subMilliseconds\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\addLeadingZeros\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\format\\lightFormatters\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCDayOfYear\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeek\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCISOWeekYear\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeekYear\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCISOWeek\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCWeek\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCWeekYear\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCWeekYear\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCWeek\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\format\\formatters\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\format\\longFormatters\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getTimezoneOffsetInMilliseconds\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\protectedTokens\\index.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\format\\index.js"],"sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from \"../toInteger/index.js\";\nimport getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import lightFormatters from \"../lightFormatters/index.js\";\nimport getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}"]},"metadata":{},"sourceType":"module"}