{"ast":null,"code":"import { a as _objectSpread2, e as _toConsumableArray, c as LocalizationContext, w as withSendbirdContext, b as _slicedToArray, u as uuidv4 } from './LocalizationContext-963dc1a0.js';\nimport React__default, { useContext, useRef, useState, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { U as UPDATE_USER_INFO } from './actionTypes-15ff2923.js';\nimport { I as IconButton, M as Modal, T as Type, a as TextButton, C as ContextMenu, b as MenuItems, c as MenuItem, i as CREATE_CHANNEL$1, j as UPDATE_USER_MESSAGE, L as LEAVE_CHANNEL, S as SEND_MESSAGE_START, h as UserProfileProvider } from './index-f66438bd.js';\nimport { f as filterChannelListParams, g as getChannelsWithUpsertedChannel, t as truncateString } from './index-a1512a62.js';\nimport { C as ChannelAvatar } from './index-7c2502c4.js';\nimport { B as Badge, i as isBroadcastChannelEnabled, a as isSuperGroupChannelEnabled, I as InviteMembers, c as createDefaultUserListQuery, b as createChannel, L as LeaveChannel } from './LeaveChannel-058050f7.js';\nimport { g as LabelStringSet, I as Icon, c as IconTypes, d as IconColors, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, f as PlaceHolderTypes } from './index-6ff1fa1b.js';\nimport { i as isToday, a as isYesterday, f as formatRelative } from './index-a9a603e2.js';\nimport { f as format } from './index-53ae4315.js';\nimport { I as InputLabel, a as Input, n as noop$1 } from './index-ec4c0e85.js';\nimport 'react-dom';\nimport './utils-fa79caf2.js';\nvar RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nvar CREATE_CHANNEL = 'CREATE_CHANNEL';\nvar SET_AUTO_SELECT_CHANNEL_ITEM = 'SET_AUTO_SELECT_CHANNEL_ITEM';\nvar LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nvar HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\nvar FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nvar FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nvar FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nvar INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nvar INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nvar INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nvar ON_USER_JOINED = 'ON_USER_JOINED';\nvar ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nvar ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nvar ON_USER_LEFT = 'ON_USER_LEFT';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nvar ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nvar CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nvar CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n\n    case INIT_CHANNELS_SUCCESS:\n      {\n        var nextChannel = action.payload && action.payload.length && action.payload.length > 0 ? action.payload[0].url : null;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          initialized: true,\n          loading: false,\n          allChannels: action.payload,\n          currentChannel: state.disableAutoSelect ? null : nextChannel\n        });\n      }\n\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        var currentChannels = state.allChannels.map(function (c) {\n          return c.url;\n        });\n        var filteredChannels = action.payload.filter(function (_ref) {\n          var url = _ref.url;\n          return !currentChannels.find(function (c) {\n            return c === url;\n          });\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [].concat(_toConsumableArray(state.allChannels), _toConsumableArray(filteredChannels))\n        });\n      }\n\n    case CREATE_CHANNEL:\n      {\n        var channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel.url\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channel.url,\n          allChannels: [channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== channel.url;\n          })))\n        });\n      }\n\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _channel = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel)\n            });\n          }\n        }\n\n        var _nextChannel = _channel.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel.url ? 1 : 0].url : state.currentChannel;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel,\n          allChannels: state.allChannels.filter(function (_ref2) {\n            var url = _ref2.url;\n            return url !== _channel.url;\n          })\n        });\n      }\n\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var channelUrl = action.payload;\n\n        var _nextChannel2 = channelUrl === state.currentChannel ? state.allChannels[0].url : state.currentChannel;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel2,\n          allChannels: state.allChannels.filter(function (_ref3) {\n            var url = _ref3.url;\n            return url !== channelUrl;\n          })\n        });\n      }\n\n    case ON_USER_LEFT:\n      {\n        var _action$payload = action.payload,\n            _channel2 = _action$payload.channel,\n            isMe = _action$payload.isMe;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel2, state.currentUserId)) {\n            var _filteredChannels2 = getChannelsWithUpsertedChannel(state.allChannels, _channel2);\n\n            var _nextChannel5 = isMe && _channel2.url === state.currentChannel ? _filteredChannels2[0].url : state.currentChannel;\n\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: state.disableAutoSelect ? null : _nextChannel5,\n              allChannels: _filteredChannels2\n            });\n          }\n\n          var _nextChannel4 = _channel2.url === state.currentChannel ? state.allChannels[0].url : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel4,\n            allChannels: state.allChannels.filter(function (_ref4) {\n              var url = _ref4.url;\n              return url !== _channel2.url;\n            })\n          });\n        }\n\n        var _filteredChannels = state.allChannels.filter(function (c) {\n          return !(c.url === _channel2.url && isMe);\n        });\n\n        var _nextChannel3 = isMe && _channel2.url === state.currentChannel ? _filteredChannels[0].url : state.currentChannel;\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel3,\n          allChannels: _filteredChannels\n        });\n      }\n\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        var _state$allChannels = state.allChannels,\n            allChannels = _state$allChannels === void 0 ? [] : _state$allChannels;\n        var _channel3 = action.payload;\n        var unreadMessageCount = _channel3.unreadMessageCount;\n        if (!_channel3.lastMessage) return state;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel3, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, _channel3)\n            });\n          }\n\n          var _nextChannel6 = _channel3.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel3.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel6,\n            allChannels: state.allChannels.filter(function (_ref5) {\n              var url = _ref5.url;\n              return url !== _channel3.url;\n            })\n          });\n        } // if its only an unread message count change, dont push to top\n\n\n        if (unreadMessageCount === 0) {\n          var currentChannel = allChannels.find(function (_ref6) {\n            var url = _ref6.url;\n            return url === _channel3.url;\n          });\n          var currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(function (ch) {\n                return ch.url === _channel3.url ? _channel3 : ch;\n              })\n            });\n          }\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel3].concat(_toConsumableArray(state.allChannels.filter(function (_ref7) {\n            var url = _ref7.url;\n            return url !== action.payload.url;\n          })))\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n\n    case SHOW_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: true\n      });\n\n    case HIDE_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: false\n      });\n\n    case ON_LAST_MESSAGE_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allChannels: state.allChannels.map(function (channel) {\n          return channel.url === action.payload.url ? action.payload : channel;\n        })\n      });\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var _channel4 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel4, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel4)\n            });\n          }\n\n          var _nextChannel7 = _channel4.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel4.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel7,\n            allChannels: state.allChannels.filter(function (_ref8) {\n              var url = _ref8.url;\n              return url !== _channel4.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel4.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var _channel5 = action.payload;\n\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel5, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel5)\n            });\n          }\n\n          var _nextChannel8 = _channel5.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel5.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel8,\n            allChannels: state.allChannels.filter(function (_ref9) {\n              var url = _ref9.url;\n              return url !== _channel5.url;\n            })\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel5.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n\n            return ch;\n          })\n        });\n      }\n\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n            return channel.url !== action.payload.url;\n          })))\n        });\n      }\n\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n\n    case SET_AUTO_SELECT_CHANNEL_ITEM:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        disableAutoSelect: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\n\nvar getLastMessageCreatedAt = function getLastMessageCreatedAt(channel, locale) {\n  var _channel$lastMessage;\n\n  var createdAt = channel === null || channel === void 0 ? void 0 : (_channel$lastMessage = channel.lastMessage) === null || _channel$lastMessage === void 0 ? void 0 : _channel$lastMessage.createdAt;\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n\nvar getTotalMembers = function getTotalMembers(channel) {\n  return channel && channel.memberCount ? channel.memberCount : 0;\n};\n\nvar getPrettyLastMessage = function getPrettyLastMessage() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var MAXLEN = 30;\n  var messageType = message.messageType,\n      name = message.name;\n\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n\n  return message.message;\n};\n\nvar getLastMessage = function getLastMessage(channel) {\n  return channel && channel.lastMessage ? getPrettyLastMessage(channel.lastMessage) : '';\n};\n\nvar getChannelUnreadMessageCount = function getChannelUnreadMessageCount(channel) {\n  return channel && channel.unreadMessageCount ? channel.unreadMessageCount : 0;\n};\n\nfunction ChannelPreview(_ref) {\n  var channel = _ref.channel,\n      currentUser = _ref.currentUser,\n      isActive = _ref.isActive,\n      ChannelAction = _ref.ChannelAction,\n      theme = _ref.theme,\n      onClick = _ref.onClick,\n      tabIndex = _ref.tabIndex;\n  var userId = currentUser.userId;\n  var isBroadcast = channel.isBroadcast,\n      isFrozen = channel.isFrozen;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet,\n      dateLocale = _useContext.dateLocale;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-preview', isActive ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    onClick: onClick,\n    onKeyPress: onClick,\n    tabIndex: tabIndex\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, getChannelTitle(channel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), isFrozen && /*#__PURE__*/React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt(channel, dateLocale))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, getLastMessage(channel)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, getChannelUnreadMessageCount(channel) // return number\n  ? /*#__PURE__*/React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, ChannelAction));\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number\n};\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: function onClick() {},\n  tabIndex: 0\n};\n\nfunction ChannelHeader(_ref) {\n  var user = _ref.user,\n      renderHeader = _ref.renderHeader,\n      iconButton = _ref.iconButton,\n      onEdit = _ref.onEdit,\n      allowProfileEdit = _ref.allowProfileEdit;\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-header', allowProfileEdit ? 'sendbird-channel-header--allow-edit' : ''].join(' ')\n  }, renderHeader ? renderHeader() : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title\",\n    role: \"button\",\n    onClick: onEdit,\n    onKeyDown: onEdit,\n    tabIndex: \"0\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"32px\",\n    height: \"32px\",\n    src: user.profileUrl,\n    alt: user.nickname\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__user-id\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__right-icon\"\n  }, iconButton));\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([PropTypes.element, PropTypes.instanceOf(IconButton)]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool\n};\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false\n};\n\nfunction EditUserProfile(_a) {\n  var user = _a.user,\n      _b = _a.theme,\n      theme = _b === void 0 ? 'light' : _b,\n      onCancel = _a.onCancel,\n      _onSubmit = _a.onSubmit,\n      _c = _a.changeTheme,\n      changeTheme = _c === void 0 ? noop$1 : _c,\n      _d = _a.onThemeChange,\n      onThemeChange = _d === void 0 ? null : _d;\n  var hiddenInputRef = useRef(null);\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _e = useState(null),\n      currentImg = _e[0],\n      setCurrentImg = _e[1];\n\n  var _f = useState(null),\n      newFile = _f[0],\n      setNewFile = _f[1];\n\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.EDIT_PROFILE__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    type: Type.PRIMARY,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (user.nickname !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n\n        return;\n      }\n\n      _onSubmit(inputRef.current.value, newFile);\n\n      onCancel();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"sendbird-edit-user-profile\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__img\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__img__avatar\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"80px\",\n    height: \"80px\",\n    src: currentImg || user.profileUrl\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-edit-user-profile__img__avatar-button\",\n    notUnderline: true,\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD))), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__name\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    required: user.nickname !== '',\n    name: \"sendbird-edit-user-profile__name__input\",\n    ref: inputRef,\n    value: user.nickname,\n    placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__userid\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    disabled: true,\n    name: \"sendbird-edit-user-profile__userid__input\",\n    value: user.userId\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__theme\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__theme__theme-icon\"\n  }, theme === 'dark' ? /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('light');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('light');\n      }\n    },\n    type: IconTypes.TOGGLE_ON,\n    width: 44,\n    height: 24\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('dark');\n\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('dark');\n      }\n    },\n    type: IconTypes.TOGGLE_OFF,\n    width: 44,\n    height: 24\n  })))));\n}\n\nvar mapStoreToProps = function mapStoreToProps(store) {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme\n  };\n};\n\nvar ConnectedEditUserProfile = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nfunction AddChannel(_ref) {\n  var sdk = _ref.sdk,\n      disabled = _ref.disabled,\n      channelListDispatcher = _ref.channelListDispatcher,\n      onBeforeCreateChannel = _ref.onBeforeCreateChannel,\n      userId = _ref.userId,\n      userFilledApplicationUserListQuery = _ref.userFilledApplicationUserListQuery,\n      userListQuery = _ref.userListQuery;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      step = _useState4[0],\n      setStep = _useState4[1];\n\n  var _useState5 = useState('group'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      type = _useState6[0],\n      setType = _useState6[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(IconButton, {\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function onClick() {\n      setShowModal(true);\n    },\n    disabled: disabled\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CREATE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), showModal && step === 0 && /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE,\n    hideFooter: true,\n    onCancel: function onCancel() {\n      setShowModal(false);\n    },\n    onSubmit: function onSubmit() {}\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle-wrap\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('group');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('group');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__chat-icon\",\n    type: IconTypes.CHAT,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP)), isSupergroupAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('supergroup');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('supergroup');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__supergroup-icon\",\n    type: IconTypes.SUPERGROUP,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP)), isBroadcastAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('broadcast');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('broadcast');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__broadcast-icon\",\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST)))), showModal && step === 1 && /*#__PURE__*/React__default.createElement(InviteMembers, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    titleText: stringSet.MODAL__CREATE_CHANNEL__TITLE,\n    submitText: stringSet.BUTTON__CREATE,\n    closeModal: function closeModal() {\n      setStep(0);\n      setShowModal(false);\n    },\n    idsToFilter: [userId],\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    },\n    onSubmit: function onSubmit(selectedUsers) {\n      return createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId, type).then(function (channel) {\n        // maybe - do this in event listener\n        channelListDispatcher({\n          type: CREATE_CHANNEL,\n          payload: channel\n        });\n      });\n    }\n  }));\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func\n};\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null\n};\n\nfunction ChannelPreviewAction(_ref) {\n  var disabled = _ref.disabled,\n      onLeaveChannel = _ref.onLeaveChannel;\n  var parentRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useContext = useContext(LocalizationContext),\n      stringSet = _useContext.stringSet;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function onKeyDown(e) {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    }\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentRef,\n        closeDropdown: closeDropdown\n      }, /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          setShowModal(true);\n          closeDropdown();\n        }\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCloseModal: function onCloseModal() {\n      return setShowModal(false);\n    },\n    onLeaveChannel: onLeaveChannel\n  }));\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false\n};\n\nfunction ChannelsPlaceholder(_ref) {\n  var type = _ref.type;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: type\n  }));\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired\n};\nvar DELIVERY_RECIPT$1 = 'delivery_receipt';\n\nvar createEventHandler = function createEventHandler(_ref) {\n  var sdk = _ref.sdk,\n      sdkChannelHandlerId = _ref.sdkChannelHandlerId,\n      channelListDispatcher = _ref.channelListDispatcher,\n      logger = _ref.logger;\n  var ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = function (channel) {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_CHANGED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelDeleted = function (channelUrl) {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: ON_CHANNEL_DELETED,\n      payload: channelUrl\n    });\n  };\n\n  ChannelHandler.onUserJoined = function (channel) {\n    logger.info('ChannelList: onUserJoined', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_USER_JOINED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onUserBanned = function (channel, user) {\n    var currentUser = sdk.currentUser;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: true\n        }\n      });\n    } else {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: false\n        }\n      });\n    }\n  };\n\n  ChannelHandler.onUserLeft = function (channel, leftUser) {\n    var currentUser = sdk.currentUser;\n    var isMe = currentUser.userId === leftUser.userId;\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: ON_USER_LEFT,\n      payload: {\n        channel: channel,\n        isMe: isMe\n      }\n    });\n  };\n\n  ChannelHandler.onReadStatus = function (channel) {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: ON_READ_RECEIPT_UPDATED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = function (channel) {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = function (channel, message) {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: channel\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = function (channel) {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_ARCHIVED,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = function (channel) {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_FROZEN,\n      payload: channel\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = function (channel) {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_UNFROZEN,\n      payload: channel\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nvar createChannelListQuery = function createChannelListQuery(_ref2) {\n  var sdk = _ref2.sdk,\n      _ref2$userFilledChann = _ref2.userFilledChannelListQuery,\n      userFilledChannelListQuery = _ref2$userFilledChann === void 0 ? {} : _ref2$userFilledChann;\n  var channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(function (key) {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\n\n\nfunction setupChannelList(_ref3) {\n  var sdk = _ref3.sdk,\n      sdkChannelHandlerId = _ref3.sdkChannelHandlerId,\n      channelListDispatcher = _ref3.channelListDispatcher,\n      setChannelSource = _ref3.setChannelSource,\n      onChannelSelect = _ref3.onChannelSelect,\n      userFilledChannelListQuery = _ref3.userFilledChannelListQuery,\n      logger = _ref3.logger,\n      sortChannelList = _ref3.sortChannelList,\n      disableAutoSelect = _ref3.disableAutoSelect;\n\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      sdkChannelHandlerId: sdkChannelHandlerId,\n      logger: logger\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  var channelListQuery = createChannelListQuery({\n    sdk: sdk,\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery: channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n\n  if (channelListQuery.hasNext) {\n    channelListQuery.next(function (response, error) {\n      var _sdk$appInfo, _sdk$appInfo$premiumF;\n\n      var swapParams = sdk.getErrorFirstCallback();\n      var channelList = response;\n      var err = error;\n\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n\n      logger.info('ChannelList - fetched channels', channelList);\n\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n        return;\n      } // select first channel\n\n\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      var sorted = channelList;\n\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n\n      if (!disableAutoSelect) {\n        onChannelSelect(sorted[0]);\n      }\n\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: sorted\n      });\n      var canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(function (feature) {\n        return feature === DELIVERY_RECIPT$1;\n      });\n\n      if (canSetMarkAsDelivered) {\n        var _channelList;\n\n        logger.info('ChannelList: Marking all channels as read'); // eslint-disable-next-line no-unused-expressions\n\n        (_channelList = channelList) === null || _channelList === void 0 ? void 0 : _channelList.forEach(function (channel, idx) {\n          // Plan-based rate limits - minimum limit is 5 requests per second\n          setTimeout(function () {\n            // eslint-disable-next-line no-unused-expressions\n            channel === null || channel === void 0 ? void 0 : channel.markAsDelivered();\n          }, 500 * idx);\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\n\nvar pubSubHandler = function pubSubHandler(pubSub, channelListDispatcher) {\n  var subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(CREATE_CHANNEL$1, pubSub.subscribe(CREATE_CHANNEL$1, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subScriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var _updatedChannel$lastM;\n\n    var channel = msg.channel,\n        message = msg.message;\n    var updatedChannel = channel;\n\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subScriber.set(LEAVE_CHANNEL, pubSub.subscribe(LEAVE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url\n    });\n  }));\n  subScriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subScriber;\n};\n\nvar noop = function noop() {};\n\nvar DELIVERY_RECIPT = 'delivery_receipt';\n\nfunction ChannelList(props) {\n  var _props$stores = props.stores,\n      _props$stores$sdkStor = _props$stores.sdkStore,\n      sdkStore = _props$stores$sdkStor === void 0 ? {} : _props$stores$sdkStor,\n      _props$stores$userSto = _props$stores.userStore,\n      userStore = _props$stores$userSto === void 0 ? {} : _props$stores$userSto,\n      _props$config = props.config,\n      userId = _props$config.userId,\n      isOnline = _props$config.isOnline,\n      userListQuery = _props$config.userListQuery,\n      logger = _props$config.logger,\n      pubSub = _props$config.pubSub,\n      theme = _props$config.theme,\n      userDispatcher = props.dispatchers.userDispatcher,\n      _props$queries = props.queries,\n      queries = _props$queries === void 0 ? {} : _props$queries,\n      renderChannelPreview = props.renderChannelPreview,\n      renderHeader = props.renderHeader,\n      renderUserProfile = props.renderUserProfile,\n      disableUserProfile = props.disableUserProfile,\n      allowProfileEdit = props.allowProfileEdit,\n      sortChannelList = props.sortChannelList,\n      onProfileEditSuccess = props.onProfileEditSuccess,\n      onThemeChange = props.onThemeChange,\n      onBeforeCreateChannel = props.onBeforeCreateChannel,\n      onChannelSelect = props.onChannelSelect,\n      disableAutoSelect = props.disableAutoSelect;\n  var _props$config2 = props.config,\n      config = _props$config2 === void 0 ? {} : _props$config2; // enable if it is true atleast once(both are flase by default)\n\n  var enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var _sdkStore$sdk = sdkStore.sdk,\n      sdk = _sdkStore$sdk === void 0 ? {} : _sdkStore$sdk;\n  var userFilledChannelListQuery = queries.channelListQuery;\n  var userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n  var sdkError = sdkStore.error;\n  var sdkIntialized = sdkStore.initialized;\n\n  var _useReducer = useReducer(reducer, channelListInitialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      channelListStore = _useReducer2[0],\n      channelListDispatcher = _useReducer2[1];\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      channelSource = _useState4[0],\n      setChannelSource = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showProfileEdit = _useState6[0],\n      setShowProfileEdit = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sdkChannelHandlerId = _useState8[0],\n      setSdkChannelHandlerId = _useState8[1];\n\n  var loading = channelListStore.loading,\n      currentChannel = channelListStore.currentChannel;\n  useEffect(function () {\n    setUser(userStore.user);\n  }, [userStore.user]);\n  useEffect(function () {\n    var subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(function () {\n    setSdkChannelHandlerId(uuidv4);\n\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk: sdk,\n        sdkChannelHandlerId: sdkChannelHandlerId,\n        channelListDispatcher: channelListDispatcher,\n        setChannelSource: setChannelSource,\n        onChannelSelect: onChannelSelect,\n        userFilledChannelListQuery: userFilledChannelListQuery,\n        logger: logger,\n        sortChannelList: sortChannelList,\n        disableAutoSelect: disableAutoSelect\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers'); // remove previous channelHandlers\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      } // remove channelSource\n\n\n      setChannelSource({}); // cleanup\n\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST\n      });\n    }\n\n    return function () {\n      logger.info('ChannelList: Removing channelHandlers');\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  var allChannels = channelListStore.allChannels;\n  var sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    var warning = \"ChannelList: You have removed/added extra channels on sortChannelList\\n      this could cause unexpected problems\"; // eslint-disable-next-line no-console\n\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n\n  useEffect(function () {\n    channelListDispatcher({\n      type: SET_AUTO_SELECT_CHANNEL_ITEM,\n      payload: disableAutoSelect\n    });\n  }, [disableAutoSelect]);\n  useEffect(function () {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) {\n      return;\n    }\n\n    sdk.GroupChannel.getChannel(currentChannel, function (groupChannel) {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-channel-list\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, /*#__PURE__*/React__default.createElement(ChannelHeader, {\n    renderHeader: renderHeader,\n    user: user,\n    onEdit: function onEdit() {\n      if (enableEditProfile) {\n        setShowProfileEdit(true);\n      }\n    },\n    allowProfileEdit: enableEditProfile,\n    iconButton: /*#__PURE__*/React__default.createElement(AddChannel, {\n      disabled: !isOnline,\n      userListQuery: userListQuery,\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      userId: userId,\n      userFilledApplicationUserListQuery: userFilledApplicationUserListQuery,\n      onBeforeCreateChannel: onBeforeCreateChannel\n    })\n  })), showProfileEdit && /*#__PURE__*/React__default.createElement(ConnectedEditUserProfile, {\n    onThemeChange: onThemeChange,\n    user: user,\n    onCancel: function onCancel() {\n      setShowProfileEdit(false);\n    },\n    onSubmit: function onSubmit(newName, newFile) {\n      sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, function (updatedUser) {\n        userDispatcher({\n          type: UPDATE_USER_INFO,\n          payload: updatedUser\n        });\n\n        if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n          onProfileEditSuccess(updatedUser);\n        }\n      });\n    }\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__body\",\n    onScroll: function onScroll(e) {\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n\n      if (fetchMore && channelSource.hasNext) {\n        logger.info('ChannelList: Fetching more channels');\n        channelListDispatcher({\n          type: FETCH_CHANNELS_START\n        });\n        channelSource.next(function (response, error) {\n          var _sdk$appInfo, _sdk$appInfo$premiumF;\n\n          var swapParams = sdk.getErrorFirstCallback();\n          var channelList = response;\n          var err = error;\n\n          if (swapParams) {\n            channelList = error;\n            err = response;\n          }\n\n          if (err) {\n            logger.info('ChannelList: Fetching channels failed', err);\n            channelListDispatcher({\n              type: FETCH_CHANNELS_FAILURE,\n              payload: channelList\n            });\n            return;\n          }\n\n          logger.info('ChannelList: Fetching channels successful', channelList);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: channelList\n          });\n          var canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(function (feature) {\n            return feature === DELIVERY_RECIPT;\n          });\n\n          if (canSetMarkAsDelivered) {\n            var _channelList;\n\n            logger.info('ChannelList: Marking all channels as read'); // eslint-disable-next-line no-unused-expressions\n\n            (_channelList = channelList) === null || _channelList === void 0 ? void 0 : _channelList.forEach(function (channel, idx) {\n              // Plan-based rate limits - minimum limit is 5 requests per second\n              setTimeout(function () {\n                // eslint-disable-next-line no-unused-expressions\n                channel === null || channel === void 0 ? void 0 : channel.markAsDelivered();\n              }, 500 * idx);\n            });\n          }\n        });\n      }\n    }\n  }, sdkError && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.WRONG\n  }), /*#__PURE__*/React__default.createElement(\"div\", null, sortedChannels && sortedChannels.map(function (channel, idx) {\n    var _onLeaveChannel = function onLeaveChannel(c, cb) {\n      logger.info('ChannelList: Leaving channel', c);\n      c.leave().then(function (res) {\n        logger.info('ChannelList: Leaving channel success', res);\n\n        if (cb && typeof cb === 'function') {\n          cb(res, null);\n        }\n\n        channelListDispatcher({\n          type: LEAVE_CHANNEL_SUCCESS,\n          payload: channel.url\n        });\n      }).catch(function (err) {\n        logger.error('ChannelList: Leaving channel failed', err);\n\n        if (cb && typeof cb === 'function') {\n          cb(null, err);\n        }\n      });\n    };\n\n    var onClick = function onClick() {\n      if (!isOnline) {\n        return;\n      }\n\n      logger.info('ChannelList: Clicked on channel:', channel);\n      channelListDispatcher({\n        type: SET_CURRENT_CHANNEL,\n        payload: channel.url\n      });\n    };\n\n    return renderChannelPreview ?\n    /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      key: channel.url,\n      onClick: onClick\n    }, renderChannelPreview({\n      channel: channel,\n      onLeaveChannel: _onLeaveChannel\n    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {\n      key: channel.url,\n      tabIndex: idx,\n      onClick: onClick,\n      channel: channel,\n      currentUser: user,\n      theme: theme,\n      isActive: channel.url === currentChannel // todo - potential performance hit refactor\n      ,\n      ChannelAction: /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {\n        disabled: !isOnline,\n        onLeaveChannel: function onLeaveChannel() {\n          return _onLeaveChannel(channel);\n        }\n      })\n    });\n  })), (!sdkIntialized || loading) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.LOADING\n  }), //  placeholder\n  (!allChannels || allChannels.length === 0) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.NO_CHANNELS\n  })));\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  onChannelSelect: PropTypes.func,\n  disableAutoSelect: PropTypes.bool\n};\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n  disableAutoSelect: false\n};\nvar ChannelList$1 = withSendbirdContext(ChannelList);\nexport { ChannelList$1 as default };","map":{"version":3,"mappings":"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","names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","SET_AUTO_SELECT_CHANNEL_ITEM","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","SHOW_CHANNEL_SETTINGS","HIDE_CHANNEL_SETTINGS","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","initialized","loading","allChannels","currentChannel","showSettings","channelListQuery","currentUserId","disableAutoSelect","reducer","state","action","type","actions","initialState","nextChannel","payload","length","url","currentChannels","map","c","filteredChannels","filter","find","channel","filterChannelListParams","getChannelsWithUpsertedChannel","ch","channelUrl","isMe","unreadMessageCount","lastMessage","currentUnreadCount","isFrozen","getChannelTitle","stringSet","LabelStringSet","name","members","NO_TITLE","NO_MEMBERS","userId","nickname","NO_NAME","join","getLastMessageCreatedAt","locale","createdAt","_channel$lastMessage","optionalParam","isToday","format","isYesterday","formatRelative","Date","getTotalMembers","memberCount","getPrettyLastMessage","message","MAXLEN","messageType","truncateString","getLastMessage","getChannelUnreadMessageCount","ChannelPreview","currentUser","isActive","ChannelAction","theme","onClick","tabIndex","isBroadcast","useContext","LocalizationContext","dateLocale","React","className","role","onKeyPress","ChannelAvatar","Icon","IconTypes","BROADCAST","fillColor","IconColors","SECONDARY","height","width","Label","LabelTypography","SUBTITLE_2","color","LabelColors","ONBACKGROUND_1","utils","CAPTION_2","ONBACKGROUND_2","title","FREEZE","PRIMARY","CAPTION_3","BODY_2","ONBACKGROUND_3","Badge","count","propTypes","PropTypes","shape","arrayOf","coverUrl","string","bool","element","isRequired","func","number","defaultProps","ChannelHeader","user","renderHeader","iconButton","onEdit","allowProfileEdit","onKeyDown","Avatar","src","profileUrl","alt","oneOfType","instanceOf","IconButton","EditUserProfile","_a","_b","onCancel","onSubmit","_c","changeTheme","noop","_d","onThemeChange","hiddenInputRef","useRef","inputRef","formRef","useState","currentImg","setCurrentImg","newFile","setNewFile","Modal","titleText","EDIT_PROFILE__TITLE","submitText","BUTTON__SAVE","ButtonType","current","value","reportValidity","ref","e","preventDefault","InputLabel","EDIT_PROFILE__IMAGE_LABEL","accept","style","display","onChange","URL","createObjectURL","target","files","TextButton","notUnderline","click","BUTTON_1","EDIT_PROFILE__IMAGE_UPLOAD","EDIT_PROFILE__NICKNAME_LABEL","Input","required","placeHolder","EDIT_PROFILE__NICKNAME_PLACEHOLDER","EDIT_PROFILE__USERID_LABEL","disabled","EDIT_PROFILE__THEME_LABEL","TOGGLE_ON","TOGGLE_OFF","mapStoreToProps","store","config","setCurrenttheme","ConnectedEditUserProfile","withSendbirdContext","AddChannel","sdk","channelListDispatcher","onBeforeCreateChannel","userFilledApplicationUserListQuery","userListQuery","showModal","setShowModal","step","setStep","setType","createApplicationUserListQuery","isBroadcastAvailable","isBroadcastChannelEnabled","isSupergroupAvailable","isSuperGroupChannelEnabled","CREATE","MODAL__CHOOSE_CHANNEL_TYPE__TITLE","hideFooter","CHAT","SUBTITLE_1","MODAL__CHOOSE_CHANNEL_TYPE__GROUP","SUPERGROUP","MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP","MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST","InviteMembers","swapParams","getErrorFirstCallback","MODAL__CREATE_CHANNEL__TITLE","BUTTON__CREATE","closeModal","idsToFilter","userQueryCreator","createDefaultUserListQuery","selectedUsers","createChannel","then","ChannelPreviewAction","onLeaveChannel","parentRef","stopPropagation","ContextMenu","menuTrigger","toggleDropdown","MORE","menuItems","closeDropdown","MenuItems","parentContainRef","MenuItem","CHANNEL_SETTING__LEAVE_CHANNEL__TITLE","LeaveChannelModal","onCloseModal","ChannelsPlaceholder","Placeholder","DELIVERY_RECIPT","createEventHandler","sdkChannelHandlerId","logger","ChannelHandler","onChannelChanged","info","channelActions","onChannelDeleted","onUserJoined","onUserBanned","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","addChannelHandler","createChannelListQuery","userFilledChannelListQuery","GroupChannel","createMyGroupChannelListQuery","includeEmpty","order","limit","Object","keys","forEach","key","setupChannelList","setChannelSource","onChannelSelect","sortChannelList","console","warning","hasNext","next","response","error","channelList","err","sorted","canSetMarkAsDelivered","appInfo","_sdk$appInfo","premiumFeatureList","_sdk$appInfo$premiumF","feature","idx","setTimeout","markAsDelivered","pubSubHandleRemover","subscriber","s","remove","pubSubHandler","pubSub","subScriber","Map","set","topics","subscribe","msg","updatedChannel","messageId","ChannelList","props","stores","sdkStore","userStore","isOnline","userDispatcher","dispatchers","queries","renderChannelPreview","renderUserProfile","disableUserProfile","onProfileEditSuccess","enableEditProfile","userDefinedDisableUserProfile","userDefinedRenderProfile","applicationUserListQuery","sdkError","sdkIntialized","useReducer","channelListReducers","channelListInitialState","channelListStore","setUser","channelSource","showProfileEdit","setShowProfileEdit","setSdkChannelHandlerId","useEffect","uuidv4","removeChannelHandler","channelListActions","sortedChannels","warn","before","after","getChannel","groupChannel","UserProfileProvider","newName","updateCurrentUserInfoWithProfileImage","updatedUser","userActions","onScroll","fetchMore","clientHeight","scrollTop","scrollHeight","PlaceHolder","PlaceholderTypes","WRONG","cb","leave","res","catch","React__default","LOADING","NO_CHANNELS","publish","channelNameContainsFilter","channelUrlsFilter","customTypesFilter","customTypeStartsWithFilter","hiddenChannelFilter","memberStateFilter","metadataOrderKeyFilter","nicknameContainsFilter","publicChannelFilter","superChannelFilter","unreadChannelFilter","userIdsExactFilter","userIdsIncludeFilter","userIdsIncludeFilterQueryType","userIdsFilter","metaDataKeyFilter","metaDataValuesFilter"],"sources":["C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\actionTypes.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\initialState.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\reducers.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\ChannelPreview\\utils.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\ChannelPreview\\index.jsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\ChannelHeader\\index.jsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\EditUserProfile\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\AddChannel.jsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\ChannelPreviewAction.jsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\Placeholder.jsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\utils.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\index.jsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const SET_AUTO_SELECT_CHANNEL_ITEM = 'SET_AUTO_SELECT_CHANNEL_ITEM';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nexport const HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const nextChannel = (action.payload && action.payload.length && action.payload.length > 0)\n        ? action.payload[0].url\n        : null;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: action.payload,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel.url,\n        };\n      }\n      return {\n        ...state,\n        currentChannel: channel.url,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel.url)],\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n      }\n      const nextChannel = (channel.url === state.currentChannel)\n        ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      const nextChannel = (channelUrl === state.currentChannel)\n        ? state.allChannels[0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel.url === state.currentChannel))\n            ? filteredChannels[0].url\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[0].url\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel.url && isMe));\n      const nextChannel = (isMe && (channel.url === state.currentChannel))\n        ? filteredChannels[0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.SHOW_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: true,\n      };\n    case actions.HIDE_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: false,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED:\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel.url === action.payload.url ? action.payload : channel)),\n      };\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    case actions.SET_AUTO_SELECT_CHANNEL_ITEM:\n      return {\n        ...state,\n        disableAutoSelect: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import isToday from 'date-fns/isToday';\n\nimport format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isYesterday from 'date-fns/isYesterday';\n\nimport { truncateString } from '../../utils';\nimport { LabelStringSet } from '../Label';\n\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel || (!channel.name && !channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n\nexport const getLastMessageCreatedAt = (channel, locale) => {\n  const createdAt = channel?.lastMessage?.createdAt;\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n\nexport const getTotalMembers = (channel) => (\n  channel && channel.memberCount\n    ? channel.memberCount\n    : 0\n);\n\nconst getPrettyLastMessage = (message = {}) => {\n  const MAXLEN = 30;\n  const { messageType, name } = message;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\n\nexport const getLastMessage = (channel) => (\n  channel && channel.lastMessage\n    ? getPrettyLastMessage(channel.lastMessage)\n    : ''\n);\n\nexport const getChannelUnreadMessageCount = (channel) => (\n  (channel && channel.unreadMessageCount)\n    ? channel.unreadMessageCount\n    : 0\n);\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nimport ChannelAvatar from '../ChannelAvatar/index';\nimport Badge from '../Badge';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\nexport default function ChannelPreview({\n  channel,\n  currentUser,\n  isActive,\n  ChannelAction,\n  theme,\n  onClick,\n  tabIndex,\n}) {\n  const {\n    userId,\n  } = currentUser;\n  const { isBroadcast, isFrozen } = channel;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-preview',\n        isActive ? 'sendbird-channel-preview--active' : '',\n      ].join(' ')}\n      role=\"link\"\n      onClick={onClick}\n      onKeyPress={onClick}\n      tabIndex={tabIndex}\n    >\n      <div\n        className=\"sendbird-channel-preview__avatar\"\n      >\n        <ChannelAvatar\n          channel={channel}\n          userId={userId}\n          theme={theme}\n        />\n      </div>\n      <div className=\"sendbird-channel-preview__content\">\n        <div className=\"sendbird-channel-preview__content__upper\">\n          <div className=\"sendbird-channel-preview__content__upper__header\">\n            {\n              isBroadcast\n              && (\n                <div className=\"sendbird-channel-preview__content__upper__header__broadcast-icon\">\n                  <Icon\n                    type={IconTypes.BROADCAST}\n                    fillColor={IconColors.SECONDARY}\n                    height=\"16px\"\n                    width=\"16px\"\n                  />\n                </div>\n              )\n            }\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__channel-name\"\n              type={LabelTypography.SUBTITLE_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {utils.getChannelTitle(channel, userId, stringSet)}\n            </Label>\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__total-members\"\n              type={LabelTypography.CAPTION_2}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {utils.getTotalMembers(channel)}\n            </Label>\n            {\n              isFrozen\n              && (\n                <div title=\"Frozen\" className=\"sendbird-channel-preview__content__upper__header__frozen-icon\">\n                  <Icon\n                    type={IconTypes.FREEZE}\n                    fillColor={IconColors.PRIMARY}\n                    height={12}\n                    width={12}\n                  />\n                </div>\n              )\n            }\n          </div>\n          <Label\n            className=\"sendbird-channel-preview__content__upper__last-message-at\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {utils.getLastMessageCreatedAt(channel, dateLocale)}\n          </Label>\n        </div>\n        <div className=\"sendbird-channel-preview__content__lower\">\n          <Label\n            className=\"sendbird-channel-preview__content__lower__last-message\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_3}\n          >\n            {utils.getLastMessage(channel)}\n          </Label>\n          <div className=\"sendbird-channel-preview__content__lower__unread-message-count\">\n            {\n              utils.getChannelUnreadMessageCount(channel) // return number\n                ? <Badge count={utils.getChannelUnreadMessageCount(channel)} />\n                : null\n            }\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"sendbird-channel-preview__action\"\n      >\n        {ChannelAction}\n      </div>\n    </div>\n  );\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool,\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string,\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n};\n\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: () => { },\n  tabIndex: 0,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport IconButton from '../IconButton';\n\nimport './index.scss';\nimport Avatar from '../Avatar/index';\n\nexport default function ChannelHeader({\n  user,\n  renderHeader,\n  iconButton,\n  onEdit,\n  allowProfileEdit,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-header',\n        allowProfileEdit ? 'sendbird-channel-header--allow-edit' : '',\n      ].join(' ')}\n    >\n      {\n        renderHeader\n          ? renderHeader()\n          : (\n            <div\n              className=\"sendbird-channel-header__title\"\n              role=\"button\"\n              onClick={onEdit}\n              onKeyDown={onEdit}\n              tabIndex=\"0\"\n            >\n              <div className=\"sendbird-channel-header__title__left\">\n                <Avatar\n                  width=\"32px\"\n                  height=\"32px\"\n                  src={user.profileUrl}\n                  alt={user.nickname}\n                />\n              </div>\n              <div className=\"sendbird-channel-header__title__right\">\n                <Label\n                  className=\"sendbird-channel-header__title__right__name\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_1}\n                >\n                  {user.nickname || stringSet.NO_NAME}\n                </Label>\n                <Label\n                  className=\"sendbird-channel-header__title__right__user-id\"\n                  type={LabelTypography.BODY_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {user.userId}\n                </Label>\n              </div>\n            </div>\n          )\n      }\n      <div className=\"sendbird-channel-header__right-icon\">\n        {iconButton}\n      </div>\n    </div>\n  );\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string,\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.instanceOf(IconButton),\n  ]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool,\n};\n\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false,\n};\n","import React, {\n  ReactElement,\n  useRef,\n  useState,\n  useContext,\n} from 'react';\nimport './index.scss';\n\nimport Modal from '../Modal';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Input, { InputLabel } from '../Input';\nimport Avatar from '../Avatar';\nimport Icon, { IconTypes } from '../Icon';\nimport { Type as ButtonType } from '../Button/type';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport TextButton from '../TextButton';\nimport { SendbirdTypes } from '../../types';\nimport { noop } from '../../utils/utils';\n\ninterface Props {\n  user: SendbirdTypes['User'];\n  theme?: string;\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  changeTheme?(theme: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nexport function EditUserProfile({\n  user,\n  theme = 'light',\n  onCancel,\n  onSubmit,\n  changeTheme = noop,\n  onThemeChange = null,\n}: Props): ReactElement {\n  const hiddenInputRef = useRef(null);\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n\n  return (\n    <Modal\n      titleText={stringSet.EDIT_PROFILE__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      type={ButtonType.PRIMARY}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (user.nickname !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(inputRef.current.value, newFile);\n        onCancel();\n      }}\n    >\n      <form\n        className=\"sendbird-edit-user-profile\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <section className=\"sendbird-edit-user-profile__img\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__IMAGE_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__img__avatar\">\n            <Avatar\n              width=\"80px\"\n              height=\"80px\"\n              src={currentImg || user.profileUrl}\n            />\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"sendbird-edit-user-profile__img__avatar-button\"\n            notUnderline\n            onClick={() => hiddenInputRef.current.click()}\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.EDIT_PROFILE__IMAGE_UPLOAD}\n            </Label>\n          </TextButton>\n        </section>\n        <section className=\"sendbird-edit-user-profile__name\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__NICKNAME_LABEL}\n          </InputLabel>\n          <Input\n            required={user.nickname !== ''}\n            name=\"sendbird-edit-user-profile__name__input\"\n            ref={inputRef}\n            value={user.nickname}\n            placeHolder={stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__userid\">\n          <InputLabel>\n            {/*  userID */}\n            {stringSet.EDIT_PROFILE__USERID_LABEL}\n          </InputLabel>\n          <Input\n            disabled\n            name=\"sendbird-edit-user-profile__userid__input\"\n            value={user.userId}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__theme\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__THEME_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__theme__theme-icon\">\n            {\n              theme === 'dark'\n                ? (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('light');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('light');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_ON}\n                    width={44}\n                    height={24}\n                  />\n                )\n                : (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('dark');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('dark');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_OFF}\n                    width={44}\n                    height={24}\n                  />\n                )\n            }\n          </div>\n        </section>\n      </form>\n    </Modal>\n  );\n}\n\nconst mapStoreToProps = (store) => {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme,\n  };\n};\n\ninterface ConnectedEditUserProfileProps {\n  user: SendbirdTypes['User'];\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nconst ConnectedEditUserProfile: (\n  props: ConnectedEditUserProfileProps\n) => React.Component = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nexport default ConnectedEditUserProfile;\n","import './add-channel.scss';\n\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport IconButton from '../../../ui/IconButton';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport InviteMembers from '../../InviteMembers';\n\nimport {\n  createChannel,\n  createDefaultUserListQuery,\n  isBroadcastChannelEnabled,\n  isSuperGroupChannelEnabled,\n} from './utils';\nimport { CREATE_CHANNEL } from '../dux/actionTypes';\nimport Modal from '../../../ui/Modal';\n\nexport default function AddChannel({\n  sdk,\n  disabled,\n  channelListDispatcher,\n  onBeforeCreateChannel,\n  userId,\n  userFilledApplicationUserListQuery,\n  userListQuery,\n}) {\n  const [showModal, setShowModal] = useState(false);\n  const [step, setStep] = useState(0);\n  const [type, setType] = useState('group');\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  const isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  const isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n\n  return (\n    <>\n      <IconButton\n        height=\"32px\"\n        width=\"32px\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n        disabled={disabled}\n      >\n        <Icon\n          type={IconTypes.CREATE}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </IconButton>\n      {\n        showModal && step === 0 && (\n          <Modal\n            titleText={stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE}\n            hideFooter\n            onCancel={() => { setShowModal(false); }}\n            onSubmit={() => { }}\n          >\n            <div className=\"sendbird-add-channel__rectangle-wrap\">\n              <div\n                className=\"sendbird-add-channel__rectangle\"\n                onClick={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n              >\n                <Icon\n                  className=\"sendbird-add-channel__rectangle__chat-icon\"\n                  type={IconTypes.CHAT}\n                  fillColor={IconColors.PRIMARY}\n                  width=\"28px\"\n                  height=\"28px\"\n                />\n                <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP}\n                </Label>\n              </div>\n              {\n                isSupergroupAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__supergroup-icon\"\n                      type={IconTypes.SUPERGROUP}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                isBroadcastAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__broadcast-icon\"\n                      type={IconTypes.BROADCAST}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST}\n                    </Label>\n                  </div>\n                )\n              }\n            </div>\n          </Modal>\n        )\n      }\n      {\n        showModal && step === 1 && (\n          <InviteMembers\n            swapParams={\n              sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback()\n            }\n            titleText={stringSet.MODAL__CREATE_CHANNEL__TITLE}\n            submitText={stringSet.BUTTON__CREATE}\n            closeModal={() => {\n              setStep(0);\n              setShowModal(false);\n            }}\n            idsToFilter={[userId]}\n            userQueryCreator={() => ((userListQuery && typeof userListQuery === 'function')\n              ? userListQuery()\n              : createDefaultUserListQuery({ sdk, userFilledApplicationUserListQuery })\n            )}\n            onSubmit={(selectedUsers) => createChannel(\n              sdk,\n              selectedUsers,\n              onBeforeCreateChannel,\n              userId,\n              type,\n            ).then((channel) => {\n              // maybe - do this in event listener\n              channelListDispatcher({\n                type: CREATE_CHANNEL,\n                payload: channel,\n              });\n            })}\n          />\n        )\n      }\n    </>\n  );\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func,\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func,\n};\n\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null,\n};\n","import React, {\n  useState,\n  useRef,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from '../../ChannelSettings/components/LeaveChannel';\n\nexport default function ChannelPreviewAction({ disabled, onLeaveChannel }) {\n  const parentRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => { e.stopPropagation(); }}\n      tabIndex={0}\n      onClick={(e) => { e.stopPropagation(); }}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown) => (\n          <IconButton\n            ref={parentRef}\n            onClick={toggleDropdown}\n            height=\"32px\"\n            width=\"32px\"\n          >\n            <Icon\n              type={IconTypes.MORE}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(closeDropdown) => (\n          <MenuItems\n            parentRef={parentRef}\n            parentContainRef={parentRef}\n            closeDropdown={closeDropdown}\n          >\n            <MenuItem\n              onClick={() => {\n                if (disabled) { return; }\n                setShowModal(true);\n                closeDropdown();\n              }}\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {\n        showModal && (\n          <LeaveChannelModal\n            onCloseModal={() => setShowModal(false)}\n            onLeaveChannel={onLeaveChannel}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n};\n\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Placeholder from '../../../ui/PlaceHolder';\n\nexport default function ChannelsPlaceholder({\n  type,\n}) {\n  return (\n    <div className=\"sendbird-channel-list\">\n      <Placeholder type={type} />\n    </div>\n  );\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = (channel) => {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_CHANGED,\n      payload: channel,\n    });\n  };\n  ChannelHandler.onChannelDeleted = (channelUrl) => {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_DELETED,\n      payload: channelUrl,\n    });\n  };\n  ChannelHandler.onUserJoined = (channel) => {\n    logger.info('ChannelList: onUserJoined', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_JOINED,\n        payload: channel,\n      });\n    }\n  };\n  ChannelHandler.onUserBanned = (channel, user) => {\n    const { currentUser } = sdk;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: true,\n        },\n      });\n    } else {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: false,\n        },\n      });\n    }\n  };\n  ChannelHandler.onUserLeft = (channel, leftUser) => {\n    const { currentUser } = sdk;\n    const isMe = (currentUser.userId === leftUser.userId);\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: channelActions.ON_USER_LEFT,\n      payload: {\n        channel,\n        isMe,\n      },\n    });\n  };\n\n  ChannelHandler.onReadStatus = (channel) => {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: channelActions.ON_READ_RECEIPT_UPDATED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = (channel, message) => {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = (channel) => {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_ARCHIVED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = (channel) => {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_FROZEN,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = (channel) => {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_UNFROZEN,\n      payload: channel,\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n}) {\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next((response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let channelList = response;\n      let err = error;\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n      logger.info('ChannelList - fetched channels', channelList);\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n        return;\n      }\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sorted = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sorted[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: sorted,\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n      if (canSetMarkAsDelivered) {\n        logger.info('ChannelList: Marking all channels as read');\n        // eslint-disable-next-line no-unused-expressions\n        channelList?.forEach((channel, idx) => {\n          // Plan-based rate limits - minimum limit is 5 requests per second\n          setTimeout(() => {\n            // eslint-disable-next-line no-unused-expressions\n            channel?.markAsDelivered();\n          }, 500 * idx);\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subScriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subScriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url,\n    });\n  }));\n\n  subScriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subScriber;\n};\n\nexport default setupChannelList;\n","import React, { useEffect, useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport * as userActions from '../../lib/dux/user/actionTypes';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport * as channelListActions from './dux/actionTypes';\nimport channelListInitialState from './dux/initialState';\nimport channelListReducers from './dux/reducers';\n\nimport ChannelPreview from '../../ui/ChannelPreview';\nimport ChannelHeader from '../../ui/ChannelHeader';\nimport EditUserProfile from '../../ui/EditUserProfile';\nimport PlaceholderTypes from '../../ui/PlaceHolder/type';\n\nimport AddChannel from './components/AddChannel';\nimport ChannelPreviewAction from './components/ChannelPreviewAction';\nimport PlaceHolder from './components/Placeholder';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from './utils';\nimport { uuidv4 } from '../../utils/uuid';\n\nimport './index.scss';\n\nconst noop = () => { };\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nfunction ChannelList(props) {\n  const {\n    stores: { sdkStore = {}, userStore = {} },\n    config: {\n      userId,\n      isOnline,\n      userListQuery,\n      logger,\n      pubSub,\n      theme,\n    },\n    dispatchers: {\n      userDispatcher,\n    },\n    queries = {},\n    renderChannelPreview,\n    renderHeader,\n    renderUserProfile,\n    disableUserProfile,\n    allowProfileEdit,\n    sortChannelList,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    onChannelSelect,\n    disableAutoSelect,\n  } = props;\n  const { config = {} } = props;\n  // enable if it is true atleast once(both are flase by default)\n  const enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  const { sdk = {} } = sdkStore;\n  const userFilledChannelListQuery = queries.channelListQuery;\n  const userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n\n  const sdkError = sdkStore.error;\n  const sdkIntialized = sdkStore.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  );\n  const [user, setUser] = useState({});\n  const [channelSource, setChannelSource] = useState({});\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n  const [sdkChannelHandlerId, setSdkChannelHandlerId] = useState(null);\n\n  const { loading, currentChannel } = channelListStore;\n\n  useEffect(() => {\n    setUser(userStore.user);\n  }, [userStore.user]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource({});\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  useEffect(() => {\n    channelListDispatcher({\n      type: channelListActions.SET_AUTO_SELECT_CHANNEL_ITEM,\n      payload: disableAutoSelect,\n    });\n  }, [disableAutoSelect]);\n\n  useEffect(() => {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) { return; }\n    sdk.GroupChannel.getChannel(currentChannel, (groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n\n  return (\n    <UserProfileProvider\n      className=\"sendbird-channel-list\"\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      <div className=\"sendbird-channel-list__header\">\n        <ChannelHeader\n          renderHeader={renderHeader}\n          user={user}\n          onEdit={() => {\n            if (enableEditProfile) {\n              setShowProfileEdit(true);\n            }\n          }}\n          allowProfileEdit={enableEditProfile}\n          iconButton={(\n            <AddChannel\n              disabled={!isOnline}\n              userListQuery={userListQuery}\n              sdk={sdk}\n              channelListDispatcher={channelListDispatcher}\n              userId={userId}\n              userFilledApplicationUserListQuery={userFilledApplicationUserListQuery}\n              onBeforeCreateChannel={onBeforeCreateChannel}\n            />\n          )}\n        />\n      </div>\n      {\n        showProfileEdit && (\n          <EditUserProfile\n            onThemeChange={onThemeChange}\n            user={user}\n            onCancel={() => { setShowProfileEdit(false); }}\n            onSubmit={(newName, newFile) => {\n              sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, (updatedUser) => {\n                userDispatcher({ type: userActions.UPDATE_USER_INFO, payload: updatedUser });\n                if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n                  onProfileEditSuccess(updatedUser);\n                }\n              });\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-channel-list__body\"\n        onScroll={(e) => {\n          const fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n          if (fetchMore && channelSource.hasNext) {\n            logger.info('ChannelList: Fetching more channels');\n            channelListDispatcher({\n              type: channelListActions.FETCH_CHANNELS_START,\n            });\n            channelSource.next((response, error) => {\n              const swapParams = sdk.getErrorFirstCallback();\n              let channelList = response;\n              let err = error;\n              if (swapParams) {\n                channelList = error;\n                err = response;\n              }\n              if (err) {\n                logger.info('ChannelList: Fetching channels failed', err);\n                channelListDispatcher({\n                  type: channelListActions.FETCH_CHANNELS_FAILURE,\n                  payload: channelList,\n                });\n                return;\n              }\n              logger.info('ChannelList: Fetching channels successful', channelList);\n              channelListDispatcher({\n                type: channelListActions.FETCH_CHANNELS_SUCCESS,\n                payload: channelList,\n              });\n\n              const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n                ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n              if (canSetMarkAsDelivered) {\n                logger.info('ChannelList: Marking all channels as read');\n                // eslint-disable-next-line no-unused-expressions\n                channelList?.forEach((channel, idx) => {\n                  // Plan-based rate limits - minimum limit is 5 requests per second\n                  setTimeout(() => {\n                    // eslint-disable-next-line no-unused-expressions\n                    channel?.markAsDelivered();\n                  }, 500 * idx);\n                });\n              }\n            });\n          }\n        }}\n      >\n        {\n          (sdkError) && (\n            <PlaceHolder type={PlaceholderTypes.WRONG} />\n          )\n        }\n        {/*\n          To do: Implement windowing\n          Implement windowing if you are dealing with large number of messages/channels\n          https://github.com/bvaughn/react-window -> recommendation\n          We hesitate to bring one more dependency to our library,\n          we are planning to implement it inside the library\n        */}\n        <div>\n          {\n            sortedChannels && sortedChannels.map((channel, idx) => {\n              const onLeaveChannel = (c, cb) => {\n                logger.info('ChannelList: Leaving channel', c);\n                c.leave()\n                  .then((res) => {\n                    logger.info('ChannelList: Leaving channel success', res);\n                    if (cb && typeof cb === 'function') {\n                      cb(res, null);\n                    }\n                    channelListDispatcher({\n                      type: channelListActions.LEAVE_CHANNEL_SUCCESS,\n                      payload: channel.url,\n                    });\n                  })\n                  .catch((err) => {\n                    logger.error('ChannelList: Leaving channel failed', err);\n                    if (cb && typeof cb === 'function') {\n                      cb(null, err);\n                    }\n                  });\n              };\n\n              const onClick = () => {\n                if (!isOnline) { return; }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                  type: channelListActions.SET_CURRENT_CHANNEL,\n                  payload: channel.url,\n                });\n              };\n\n              return (\n                (renderChannelPreview)\n                  ? (\n                    // eslint-disable-next-line\n                    <div key={channel.url} onClick={onClick}>\n                      {renderChannelPreview({ channel, onLeaveChannel })}\n                    </div>\n                  )\n                  : (\n                    <ChannelPreview\n                      key={channel.url}\n                      tabIndex={idx}\n                      onClick={onClick}\n                      channel={channel}\n                      currentUser={user}\n                      theme={theme}\n                      isActive={channel.url === currentChannel}\n                      // todo - potential performance hit refactor\n                      ChannelAction={(\n                        <ChannelPreviewAction\n                          disabled={!isOnline}\n                          onLeaveChannel={() => onLeaveChannel(channel)}\n                        />\n                      )}\n                    />\n                  )\n              );\n            })\n          }\n        </div>\n        {\n          (!sdkIntialized || loading) && (\n            <PlaceHolder type={PlaceholderTypes.LOADING} />\n          )\n        }\n        {\n          //  placeholder\n          (!allChannels || allChannels.length === 0) && (\n            <PlaceHolder type={PlaceholderTypes.NO_CHANNELS} />\n          )\n        }\n      </div>\n    </UserProfileProvider>\n  );\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({}),\n    }),\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func,\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func,\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func,\n    }),\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string,\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  onChannelSelect: PropTypes.func,\n  disableAutoSelect: PropTypes.bool,\n};\n\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n  disableAutoSelect: false,\n};\n\nexport default withSendbirdContext(ChannelList);\n"]},"metadata":{},"sourceType":"module"}