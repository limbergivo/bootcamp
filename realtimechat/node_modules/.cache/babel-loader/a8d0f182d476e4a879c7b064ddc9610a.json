{"ast":null,"code":"import React__default, { useEffect, useCallback, useContext, useState, useReducer, useRef } from 'react';\nimport { _ as __assign, d as __spreadArray, c as LocalizationContext, w as withSendbirdContext } from './LocalizationContext-963dc1a0.js';\nimport { f as format } from './index-53ae4315.js';\nimport { i as isToday, a as isYesterday, f as formatRelative } from './index-a9a603e2.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, c as IconTypes, I as Icon, d as IconColors, P as PlaceHolder, i as PlaceHolderTypes } from './index-6ff1fa1b.js';\nimport 'prop-types';\nvar GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nvar GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nvar START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nvar START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nvar SET_QUERY_INVALID = 'SET_QUERY_INVALID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar CHANNEL_INVALID = 'CHANNEL_INVALID';\nvar RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SET_CURRENT_CHANNEL:\n      {\n        var currentChannel = action.payload;\n        return __assign(__assign({}, state), {\n          currentChannel: currentChannel,\n          initialized: true\n        });\n      }\n\n    case CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          currentChannel: null,\n          initialized: false\n        });\n      }\n\n    case GET_SEARCHED_MESSAGES:\n      {\n        var _a = action.payload,\n            messages = _a.messages,\n            createdQuery = _a.createdQuery;\n\n        if (createdQuery && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl && createdQuery.key === state.currentMessageSearchQuery.key) {\n          return __assign(__assign({}, state), {\n            loading: false,\n            isInvalid: false,\n            allMessages: __spreadArray([], messages, true),\n            hasMoreResult: state.currentMessageSearchQuery.hasNext\n          });\n        }\n\n        return __assign({}, state);\n      }\n\n    case SET_QUERY_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n\n    case START_MESSAGE_SEARCH:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: false,\n          loading: false\n        });\n      }\n\n    case START_GETTING_SEARCHED_MESSAGES:\n      {\n        var currentMessageSearchQuery = action.payload;\n        return __assign(__assign({}, state), {\n          loading: true,\n          currentMessageSearchQuery: currentMessageSearchQuery\n        });\n      }\n\n    case GET_NEXT_SEARCHED_MESSAGES:\n      {\n        var messages = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true),\n          hasMoreResult: state.currentMessageSearchQuery.hasNext\n        });\n      }\n\n    case RESET_SEARCH_STRING:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false\n};\n\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n      sdkInit = _a.sdkInit;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, function (groupChannel, error) {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        } else {\n          messageSearchDispathcer({\n            type: CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nfunction useGetSearchedMessages(_a, _b) {\n  var currentChannel = _a.currentChannel,\n      channelUrl = _a.channelUrl,\n      requestString = _a.requestString,\n      messageSearchQuery = _a.messageSearchQuery,\n      onResultLoaded = _a.onResultLoaded,\n      retryCount = _a.retryCount;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    messageSearchDispathcer({\n      type: START_MESSAGE_SEARCH,\n      payload: null\n    });\n\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        var inputSearchMessageQueryObject = __assign(__assign({}, messageSearchQuery), {\n          order: 'ts',\n          channelUrl: channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt\n        });\n\n        var createdQuery_1 = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery_1.next(function (messages, error) {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: GET_SEARCHED_MESSAGES,\n              payload: {\n                messages: messages,\n                createdQuery: createdQuery_1\n              }\n            });\n\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: SET_QUERY_INVALID,\n              payload: null\n            });\n\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery_1\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nfunction useScrollCallback(_a, _b) {\n  var currentMessageSearchQuery = _a.currentMessageSearchQuery,\n      hasMoreResult = _a.hasMoreResult,\n      onResultLoaded = _a.onResultLoaded;\n  var logger = _b.logger,\n      messageSearchDispathcer = _b.messageSearchDispathcer;\n  return useCallback(function (cb) {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next(function (messages, error) {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages\n          });\n          cb(messages, null);\n\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nvar getCreatedAt$1 = function (createdAt, locale) {\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n\nfunction MessageSearchItem(_a) {\n  var className = _a.className,\n      message = _a.message,\n      selected = _a.selected,\n      _onClick = _a.onClick;\n  var createdAt = message.createdAt;\n  var messageText = message.message;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n      nickname = sender.nickname;\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-item', selected ? 'sendbird-message-search-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-text\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, messageText), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt$1(createdAt, dateLocale))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right-footer\"\n  }));\n}\n\nfunction getCreatedAt(createdAt, locale) {\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n\n  if (!createdAt) {\n    return '';\n  }\n\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n\n  return format(createdAt, 'MMM dd', optionalParam);\n}\n\nfunction getIconOfFileType(message) {\n  var url = message.url;\n  var fileMessageUrl = url;\n  var fileExtension = fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/)[1];\n\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\n\nfunction truncate(fullText, textLimit) {\n  if (fullText.length <= textLimit) return fullText;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = textLimit - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\n\nfunction MessageSearchFileItem(props) {\n  var className = props.className,\n      message = props.message,\n      selected = props.selected,\n      _onClick = props.onClick;\n  var createdAt = message.createdAt,\n      url = message.url,\n      name = message.name;\n  var fileMessageUrl = url;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n      nickname = sender.nickname;\n\n  var _a = useContext(LocalizationContext),\n      stringSet = _a.stringSet,\n      dateLocale = _a.dateLocale;\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-file-item', selected ? 'sendbird-message-search-file-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-file-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content__type-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: getIconOfFileType(message),\n    fillColor: IconColors.PRIMARY,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__content__url\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(name || fileMessageUrl, 28)))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt(createdAt, dateLocale)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right-footer\"\n  }));\n}\n\nvar DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(_a, _b) {\n  var searchString = _a.searchString;\n  var messageSearchDispathcer = _b.messageSearchDispathcer;\n\n  var _c = useState(''),\n      requestString = _c[0],\n      setRequestString = _c[1];\n\n  var _d = useState(null),\n      debouncingTimer = _d[0],\n      setDebouncingTimer = _d[1];\n\n  useEffect(function () {\n    clearTimeout(debouncingTimer);\n\n    if (searchString) {\n      setDebouncingTimer(setTimeout(function () {\n        setRequestString(searchString);\n      }, DEBOUNCING_TIME));\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: RESET_SEARCH_STRING,\n        payload: ''\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-message-search';\n\nfunction MessageSearch(props) {\n  var // sendbird internal props\n  stores = props.stores,\n      config = props.config,\n      // message search props\n  channelUrl = props.channelUrl,\n      searchString = props.searchString,\n      messageSearchQuery = props.messageSearchQuery,\n      renderSearchItem = props.renderSearchItem,\n      onResultLoaded = props.onResultLoaded,\n      onResultClick = props.onResultClick; // hook variables\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  var _a = useState(0),\n      retryCount = _a[0],\n      setRetryCount = _a[1]; // this is a trigger flag for activating useGetSearchMessages\n\n\n  var _b = useState(0),\n      selectedMessageId = _b[0],\n      setSelectedMessageId = _b[1];\n\n  var _c = useReducer(reducer, initialState),\n      messageSearchStore = _c[0],\n      messageSearchDispathcer = _c[1];\n\n  var allMessages = messageSearchStore.allMessages,\n      loading = messageSearchStore.loading,\n      isInvalid = messageSearchStore.isInvalid,\n      currentChannel = messageSearchStore.currentChannel,\n      currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery,\n      hasMoreResult = messageSearchStore.hasMoreResult;\n\n  var getChannelName = function getChannelName() {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map(function (member) {\n        return member.nickname || stringSet.NO_NAME;\n      }).join(', ');\n    }\n\n    return stringSet.NO_TITLE;\n  }; // const\n\n\n  var sdkStore = stores.sdkStore;\n  var logger = config.logger;\n  var sdk = sdkStore.sdk;\n  var sdkInit = sdkStore.initialized;\n  var scrollRef = useRef(null);\n\n  var handleOnScroll = function handleOnScroll(e) {\n    var scrollElement = e.target;\n    var scrollTop = scrollElement.scrollTop,\n        scrollHeight = scrollElement.scrollHeight,\n        clientHeight = scrollElement.clientHeight;\n\n    if (!hasMoreResult) {\n      return;\n    }\n\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(function () {// after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var requestString = useSearchStringEffect({\n    searchString: searchString\n  }, {\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  useGetSearchedMessages({\n    currentChannel: currentChannel,\n    channelUrl: channelUrl,\n    requestString: requestString,\n    messageSearchQuery: messageSearchQuery,\n    onResultLoaded: onResultLoaded,\n    retryCount: retryCount\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var onScroll = useScrollCallback({\n    currentMessageSearchQuery: currentMessageSearchQuery,\n    hasMoreResult: hasMoreResult,\n    onResultLoaded: onResultLoaded\n  }, {\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n\n  var handleRetryToConnect = function handleRetryToConnect() {\n    setRetryCount(retryCount + 1);\n  };\n\n  if (isInvalid && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: handleRetryToConnect\n    }));\n  }\n\n  if (loading && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCHING\n    }));\n  }\n\n  if (!searchString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCH_IN,\n      searchInString: getChannelName()\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME,\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, allMessages.length > 0 ? allMessages.map(function (message) {\n    if (renderSearchItem) {\n      return renderSearchItem({\n        message: message,\n        onResultClick: onResultClick\n      });\n    }\n\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(MessageSearchFileItem, {\n        className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n        message: message,\n        key: message.messageId,\n        selected: selectedMessageId === message.messageId,\n        onClick: function onClick() {\n          onResultClick(message);\n          setSelectedMessageId(message.messageId);\n        }\n      });\n    }\n\n    return /*#__PURE__*/React__default.createElement(MessageSearchItem, {\n      className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n      message: message,\n      key: message.messageId,\n      selected: selectedMessageId === message.messageId,\n      onClick: function onClick() {\n        onResultClick(message);\n        setSelectedMessageId(message.messageId);\n      }\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.NO_RESULTS\n  }));\n}\n\nvar MessageSearch$1 = withSendbirdContext(MessageSearch);\nexport { MessageSearch$1 as default };","map":{"version":3,"mappings":"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","names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","actionTypes","currentChannel","payload","initialized","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","hasMoreResult","hasNext","initialState","useSetChannel","_a","_b","sdkInit","sdk","logger","messageSearchDispathcer","useEffect","OpenChannel","GroupChannel","getChannel","groupChannel","error","info","messageActionTypes","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","inputSearchMessageQueryObject","order","messageTimestampFrom","invitedAt","createdQuery_1","next","warning","useScrollCallback","useCallback","cb","createdAt","locale","optionalParam","isToday","format","isYesterday","formatRelative","Date","MessageSearchItem","className","message","selected","onClick","messageText","sender","_sender","nickname","useContext","LocalizationContext","stringSet","dateLocale","React","__spreadArray","Array","isArray","join","e","stopPropagation","Avatar","src","profileUrl","alt","width","height","Label","LabelTypography","SUBTITLE_2","color","LabelColors","ONBACKGROUND_1","NO_NAME","BODY_2","ONBACKGROUND_3","CAPTION_3","ONBACKGROUND_2","getCreatedAt","getIconOfFileType","fileMessageUrl","url","fileExtension","match","test","IconTypes","PHOTO","PLAY","FILE_AUDIO","GIF","FILE_DOCUMENT","truncate","fullText","textLimit","length","separator","sepLen","charsToShow","frontChars","Math","ceil","backChars","floor","substr","MessageSearchFileItem","props","name","Icon","fillColor","IconColors","PRIMARY","DEBOUNCING_TIME","useSearchStringEffect","searchString","useState","setRequestString","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","COMPONENT_CLASS_NAME","MessageSearch","stores","config","renderSearchItem","onResultClick","setRetryCount","selectedMessageId","setSelectedMessageId","useReducer","messageSearchReducer","messageSearchInitialState","messageSearchStore","getChannelName","members","map","member","NO_TITLE","sdkStore","scrollRef","useRef","handleOnScroll","scrollElement","target","scrollHeight","clientHeight","scrollTop","onScroll","useGetSearchMessages","handleRetryToConnect","PlaceHolder","PlaceHolderTypes","WRONG","retryToConnect","SEARCHING","SEARCH_IN","searchInString","ref","messageType","messageId","NO_RESULTS","widthSendbirdContext"],"sources":["C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\dux\\actionTypes.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\dux\\reducers.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\dux\\initialState.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useSetChannel.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useGetSearchedMessages.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useScrollCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchItem\\getCreatedAt.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchItem\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchFileItem\\utils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchFileItem\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useSearchStringEffect.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\index.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl\n        && createdQuery.key === state.currentMessageSearchQuery.key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: state.currentMessageSearchQuery.hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      }\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      }\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: state.currentMessageSearchQuery.hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import SendbirdUIKit from '../../../index';\nexport interface State {\n  allMessages: Array<SendbirdUIKit.ClientFileMessage | SendbirdUIKit.ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  currentMessageSearchQuery: SendbirdUIKit.ClientMessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispathcer }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, (groupChannel, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        } else {\n          messageSearchDispathcer({\n            type: messageActionTypes.CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../index';\nimport SendBird from 'sendbird';\n\ninterface MainProps {\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: SendbirdUIKit.MessageSearchQueryType;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispathcer }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispathcer({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        const inputSearchMessageQueryObject = {\n          ...messageSearchQuery,\n          order: 'ts' as const,\n          channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt,\n        };\n        const createdQuery = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery.next((messages, error) => {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: messageActionTypes.GET_SEARCHED_MESSAGES,\n              payload: {\n                messages,\n                createdQuery,\n              },\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: messageActionTypes.SET_QUERY_INVALID,\n              payload: null,\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery,\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../index';\n\ninterface MainProps {\n  currentMessageSearchQuery: SendBird.MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n}\ninterface ToolProps {\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (\n  callback: (\n    messages: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispathcer }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next((messages, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages,\n          });\n          cb(messages, null);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\n\n// getCreatedAt\nexport default (createdAt: number, locale: Locale): string => {\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n","import React, { useContext } from 'react';\nimport './index.scss';\nimport getCreatedAt from './getCreatedAt';\n\nimport Avatar from '../Avatar';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendbirdUIKit.ClientUserMessage;\n  selected?: boolean;\n  onClick?: (message: SendbirdUIKit.ClientMessage) => void;\n}\n\nexport default function MessageSearchItem({\n  className,\n  message,\n  selected,\n  onClick,\n}: Props): JSX.Element {\n  const { createdAt } = message;\n  const messageText = message.message;\n  const sender = message.sender || message._sender;\n  const { profileUrl, nickname } = sender;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-search-item',\n        selected ? 'sendbird-message-search-item--selected' : '',\n      ].join(' ')}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(message);\n      }}\n    >\n      <div className=\"sendbird-message-search-item__left\">\n        <Avatar\n          className=\"sendbird-message-search-item__left__sender-avatar\"\n          src={profileUrl}\n          alt=\"profile image\"\n          width=\"56px\"\n          height=\"56px\"\n        />\n      </div>\n      <div className=\"sendbird-message-search-item__right\">\n        <Label\n          className=\"sendbird-message-search-item__right__sender-name\"\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {nickname || stringSet.NO_NAME}\n        </Label>\n        <Label\n          className=\"sendbird-message-search-item__right__message-text\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {messageText}\n        </Label>\n        <Label\n          className=\"sendbird-message-search-item__right__message-created-at\"\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {getCreatedAt(createdAt, dateLocale)}\n        </Label>\n      </div>\n      <div className=\"sendbird-message-search-item__right-footer\" />\n    </div>\n  );\n}\n","import format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\nimport { IconTypes } from '../Icon';\n\nexport function getCreatedAt(createdAt: number, locale: Locale): string {\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n}\n\nexport function getIconOfFileType(message: SendbirdUIKit.ClientFileMessage): string {\n  const { url } = message;\n  const fileMessageUrl = url;\n  const fileExtension = (fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/))[1];\n\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\n\nexport function truncate(fullText: string, textLimit: number): string {\n  if (fullText.length <= textLimit) return fullText;\n  const separator = '...';\n  const sepLen = separator.length;\n  const charsToShow = textLimit - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\n","import React, { ReactElement, useContext } from 'react';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport Icon, { IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { getCreatedAt, getIconOfFileType, truncate } from './utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendbirdUIKit.ClientFileMessage;\n  selected?: boolean;\n  onClick?: (message: SendbirdUIKit.ClientFileMessage) => void;\n}\n\nexport default function MessageSearchFileItem(props: Props): ReactElement {\n  const {\n    className,\n    message,\n    selected,\n    onClick,\n  } = props;\n  const { createdAt, url, name } = message;\n  const fileMessageUrl = url;\n  const sender = message.sender || message._sender;\n  const { profileUrl, nickname } = sender;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-search-file-item',\n        selected ? 'sendbird-message-search-file-item--selected' : '',\n      ].join(' ')}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(message);\n      }}\n    >\n      <div className=\"sendbird-message-search-file-item__left\">\n        <Avatar\n          className=\"sendbird-message-search-file-item__left__sender-avatar\"\n          src={profileUrl}\n          alt=\"profile image\"\n          width=\"56px\"\n          height=\"56px\"\n        />\n      </div>\n      <div className=\"sendbird-message-search-file-item__right\">\n        <Label\n          className=\"sendbird-message-search-file-item__right__sender-name\"\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {nickname || stringSet.NO_NAME}\n        </Label>\n        <div className=\"sendbird-message-search-file-item__right__content\">\n          <div className=\"sendbird-message-search-file-item__right__content__type-icon\">\n            <Icon\n              type={getIconOfFileType(message)}\n              fillColor={IconColors.PRIMARY}\n              width=\"18px\"\n              height=\"18px\"\n            />\n          </div>\n          <Label\n            className=\"sendbird-message-search-file-item__right__content__url\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {truncate(name || fileMessageUrl, 28)}\n          </Label>\n        </div>\n      </div>\n      <Label\n        className=\"sendbird-message-search-file-item__message-created-at\"\n        type={LabelTypography.CAPTION_3}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {getCreatedAt(createdAt, dateLocale)}\n      </Label>\n      <div className=\"sendbird-message-search-file-item__right-footer\" />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispathcer }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME)\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, { useReducer, useRef, useContext, useState } from 'react';\nimport './index.scss';\n\nimport widthSendbirdContext from '../../lib/SendbirdSdkContext';\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback from './hooks/useScrollCallback';\n\nimport MessageSearchItem from '../../ui/MessageSearchItem';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport MessageSearchFileItem from '../../ui/MessageSearchFileItem';\n\nimport SendbirdUIKit from '../../index';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nconst COMPONENT_CLASS_NAME = 'sendbird-message-search';\n\ninterface Props extends SendbirdUIKit.MessageSearchProps {\n  // sendbird internal props\n  stores: {\n    sdkStore?: SendbirdUIKit.SdkStore,\n    userStore?: SendbirdUIKit.UserStore,\n  };\n  config: {\n    userId: string,\n    isOnline: boolean,\n    logger?: SendbirdUIKit.Logger,\n    theme?: string,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    pubSub: any,\n    disableUserProfile?: boolean,\n    renderUserProfile?(): JSX.Element,\n    imageCompression?: {\n      compressionRate?: number,\n      resizingWidth?: number | string,\n      resizingHeight?: number | string,\n    },\n  };\n}\n\nfunction MessageSearch(props: Props): JSX.Element {\n  const {\n    // sendbird internal props\n    stores,\n    config,\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    renderSearchItem,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  // hook variables\n  const { stringSet } = useContext(LocalizationContext);\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispathcer] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const getChannelName = () => {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map((member) => member.nickname || stringSet.NO_NAME).join(', ');\n    }\n    return stringSet.NO_TITLE;\n  };\n\n  // const\n  const { sdkStore } = stores;\n  const { logger } = config;\n  const { sdk } = sdkStore;\n  const sdkInit = sdkStore.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e) => {\n    const scrollElement = e.target;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispathcer },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispathcer });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispathcer },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispathcer },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n\n  if (isInvalid && searchString && requestString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder\n          type={PlaceHolderTypes.WRONG}\n          retryToConnect={handleRetryToConnect}\n        />\n      </div>\n    );\n  }\n\n  if (loading && searchString && requestString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder type={PlaceHolderTypes.SEARCHING} />\n      </div>\n    );\n  }\n\n  if (!searchString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder\n          type={PlaceHolderTypes.SEARCH_IN}\n          searchInString={getChannelName()}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={COMPONENT_CLASS_NAME}\n      onScroll={handleOnScroll}\n      ref={scrollRef}\n    >\n      {\n        (allMessages.length > 0)\n          ? (\n            allMessages.map((message) => {\n              if (renderSearchItem) {\n                return renderSearchItem({ message, onResultClick });\n              }\n              if (message.messageType === 'file') {\n                return (\n                  <MessageSearchFileItem\n                    className={`${COMPONENT_CLASS_NAME}__message-search-item`}\n                    message={message}\n                    key={message.messageId}\n                    selected={(selectedMessageId === message.messageId)}\n                    onClick={() => {\n                      onResultClick(message);\n                      setSelectedMessageId(message.messageId);\n                    }}\n                  />\n                );\n              }\n              return (\n                <MessageSearchItem\n                  className={`${COMPONENT_CLASS_NAME}__message-search-item`}\n                  message={message}\n                  key={message.messageId}\n                  selected={(selectedMessageId === message.messageId)}\n                  onClick={() => {\n                    onResultClick(message);\n                    setSelectedMessageId(message.messageId);\n                  }}\n                />\n              );\n            })\n          )\n          : (\n            <PlaceHolder type={PlaceHolderTypes.NO_RESULTS} />\n          )\n      }\n    </div>\n  );\n}\n\nexport default widthSendbirdContext(MessageSearch);\n"]},"metadata":{},"sourceType":"module"}