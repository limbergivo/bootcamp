{"ast":null,"code":"import React__default, { useContext, useRef, useState, useMemo, useEffect, useCallback, useReducer } from 'react';\nimport { f as format, i as isSameDay } from './index-53ae4315.js';\nimport { c as LocalizationContext, u as uuidv4, d as __spreadArray, _ as __assign, w as withSendbirdContext } from './LocalizationContext-963dc1a0.js';\nimport { M as MessageInput, L as LinkLabel, D as DateSeparator, F as FileViewer, c as compareIds } from './index-1de8106c.js';\nimport { L as Label, a as LabelTypography, A as Avatar, I as Icon, c as IconTypes, d as IconColors, b as LabelColors, e as Loader, h as ImageRenderer, P as PlaceHolder, i as PlaceHolderTypes } from './index-6ff1fa1b.js';\nimport { I as IconButton, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, c as MenuItem, a as TextButton, M as Modal, k as SEND_USER_MESSAGE, S as SEND_MESSAGE_START, l as SEND_FILE_MESSAGE, j as UPDATE_USER_MESSAGE, D as DELETE_MESSAGE, h as UserProfileProvider } from './index-f66438bd.js';\nimport 'prop-types';\nimport './index-a1512a62.js';\nimport 'react-dom';\n\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\n\nvar shouldFetchMore = function shouldFetchMore(messageLength, maxMessages) {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number' && maxMessages > messageLength) {\n    return true;\n  }\n\n  return false;\n};\n\nvar scrollIntoLast = function scrollIntoLast(intialTry) {\n  if (intialTry === void 0) {\n    intialTry = 0;\n  }\n\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n\n  try {\n    var scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll'); // eslint-disable-next-line no-multi-assign\n\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nvar isSameGroup = function isSameGroup(message, comparingMessage) {\n  var _a, _b, _c, _d;\n\n  if (!(message && comparingMessage && (message === null || message === void 0 ? void 0 : message.messageType) !== 'admin' && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && (message === null || message === void 0 ? void 0 : message.sender) && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) && (message === null || message === void 0 ? void 0 : message.createdAt) && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.createdAt) && ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) && ((_b = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b === void 0 ? void 0 : _b.userId))) {\n    return false;\n  }\n\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) === ((_d = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _d === void 0 ? void 0 : _d.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage);\n};\n\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage) {\n  return [isSameGroup(prevMessage, currMessage), isSameGroup(currMessage, nextMessage)];\n};\n\nvar kFormatter = function kFormatter(num) {\n  if (Math.abs(num) > 999999) {\n    return (Math.abs(num) / 1000000).toFixed(1) + \"M\";\n  }\n\n  if (Math.abs(num) > 999) {\n    return (Math.abs(num) / 1000).toFixed(1) + \"K\";\n  }\n\n  return \"\" + num;\n};\n\nvar isOperator = function isOperator(openChannel, userId) {\n  var operators = openChannel.operators;\n\n  if (operators.map(function (operator) {\n    return operator.userId;\n  }).indexOf(userId) < 0) {\n    return false;\n  }\n\n  return true;\n};\n\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen(openChannel, userId) {\n  var isFrozen = openChannel.isFrozen;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nvar fetchWithListQuery = function fetchWithListQuery(listQuery, logger, eachQueryNextCallback) {\n  var fetchList = function fetchList(query) {\n    var hasNext = query.hasNext;\n\n    if (hasNext) {\n      query.next(function (error, users) {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n\n  return null;\n};\n\nvar MessageInputWrapper = function MessageInputWrapper(_a, ref) {\n  var channel = _a.channel,\n      user = _a.user,\n      disabled = _a.disabled,\n      onSendMessage = _a.onSendMessage,\n      onFileUpload = _a.onFileUpload,\n      renderMessageInput = _a.renderMessageInput;\n\n  if (!channel) {\n    return;\n  }\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n\n  if (renderMessageInput) {\n    return renderMessageInput({\n      channel: channel,\n      user: user,\n      disabled: disabled\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, /*#__PURE__*/React__default.createElement(MessageInput, {\n    ref: ref,\n    disabled: disabled,\n    onSendMessage: onSendMessage,\n    onFileUpload: onFileUpload,\n    placeholder: disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED // add disabled because of muted state\n\n  }));\n};\n\nvar MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);\n\nvar FrozenNotification = function FrozenNotification() {\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-frozen-channel-notification\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-frozen-channel-notification__text\",\n    type: LabelTypography.CAPTION_2\n  }, stringSet.CHANNEL_FROZEN));\n};\n\nfunction OpenchannelConversationHeader(_a) {\n  var coverImage = _a.coverImage,\n      title = _a.title,\n      subTitle = _a.subTitle,\n      amIOperator = _a.amIOperator,\n      onActionClick = _a.onActionClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left\"\n  }, coverImage ? /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image\",\n    src: coverImage,\n    alt: \"channel cover image\",\n    width: \"32px\",\n    height: \"32px\"\n  }) : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image--icon\",\n    style: {\n      width: 32,\n      height: 32\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CHANNELS,\n    fillColor: IconColors.CONTENT,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, title || stringSet.NO_TITLE), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__sub-title\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, subTitle || stringSet.NO_TITLE)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__right\"\n  }, /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-openchannel-conversation-header__right__trigger\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onActionClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: amIOperator ? IconTypes.INFO : IconTypes.MEMBERS,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }))));\n}\n\nvar copyToClipboard = function copyToClipboard(text) {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    var textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n\n    document.body.appendChild(textarea);\n    textarea.select();\n\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  return false;\n};\n\nvar OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\nvar getSenderFromMessage = function getSenderFromMessage(message) {\n  return message.sender || message._sender;\n};\n\nvar checkIsSent = function checkIsSent(status) {\n  return status === OpenChannelMessageStatusTypes.SUCCEEDED;\n};\n\nvar checkIsPending = function checkIsPending(status) {\n  return status === OpenChannelMessageStatusTypes.PENDING;\n};\n\nvar checkIsFailed = function checkIsFailed(status) {\n  return status === OpenChannelMessageStatusTypes.FAILED;\n};\n\nvar checkIsByMe = function checkIsByMe(message, userId) {\n  return getSenderFromMessage(message).userId === userId;\n};\n\nvar isFineCopy = function isFineCopy(_a) {\n  var message = _a.message;\n  return message.messageType === 'user' && message.message.length > 0;\n};\n\nvar isFineResend = function isFineResend(_a) {\n  var message = _a.message,\n      status = _a.status,\n      userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsFailed(status) && message.isResendable && message.isResendable();\n};\n\nvar isFineEdit = function isFineEdit(_a) {\n  var message = _a.message,\n      status = _a.status,\n      userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\n\nvar isFineDelete = function isFineDelete(_a) {\n  var message = _a.message,\n      userId = _a.userId;\n  return checkIsByMe(message, userId);\n};\n\nvar showMenuTrigger = function showMenuTrigger(props) {\n  var message = props.message,\n      status = props.status,\n      userId = props.userId;\n\n  if (message.messageType === 'user') {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineEdit({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineCopy({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  } else {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  }\n};\n\nfunction OpenchannelUserMessage(_a) {\n  var className = _a.className,\n      message = _a.message,\n      userId = _a.userId,\n      resendMessage = _a.resendMessage,\n      disabled = _a.disabled,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      chainTop = _a.chainTop,\n      status = _a.status;\n\n  if (!message || message.messageType !== 'user') {\n    return null;\n  } // hooks\n\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var messageRef = useRef(null);\n  var avatarRef = useRef(null);\n  var contextMenuRef = useRef(null);\n\n  var _d = useState({}),\n      contextStyle = _d[0],\n      setContextStyle = _d[1]; // consts\n\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var splitMessage = message.message.split(/\\r/);\n      var matchedMessage = splitMessage.map(function (word) {\n        return word !== '' ? word : /*#__PURE__*/React__default.createElement(\"br\", null);\n      });\n\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2,\n          calssName: \"sendbird-openchannel-user-message-word\"\n        }, \" \" + stringSet.MESSAGE_EDITED + \" \"));\n      }\n\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]); // place context menu top depending clientHeight of message component\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-user-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-user-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__top\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__bottom\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__bottom__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText())), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-user-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nfunction OpenChannelAdminMessage(_a) {\n  var className = _a.className,\n      message = _a.message;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-admin-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-admin-message__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.message || ''));\n}\n\nvar URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nvar createUrlTester = function createUrlTester(regexp) {\n  return function (text) {\n    return regexp.test(text);\n  };\n};\n\nvar checkOGIsEnalbed = function checkOGIsEnalbed(message) {\n  var ogMetaData = message.ogMetaData;\n\n  if (!ogMetaData) {\n    return false;\n  }\n\n  var url = ogMetaData.url;\n\n  if (!url) {\n    return false;\n  }\n\n  return true;\n};\n\nfunction OpenchannelOGMessage(_a) {\n  var message = _a.message,\n      className = _a.className,\n      disabled = _a.disabled,\n      showEdit = _a.showEdit,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage,\n      chainTop = _a.chainTop,\n      status = _a.status,\n      userId = _a.userId;\n\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  var ogMetaData = message.ogMetaData;\n  var defaultImage = ogMetaData.defaultImage;\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var _d = useState({}),\n      contextStyle = _d[0],\n      setContextStyle = _d[1];\n\n  var messageComponentRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var isUrl = createUrlTester(URL_REG);\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var wordClassName = 'sendbird-openchannel-og-message--word';\n      var splitMessage = message.message.split(' ');\n      var matchedMessage = splitMessage.map(function (word) {\n        return isUrl(word) ? /*#__PURE__*/React__default.createElement(LinkLabel, {\n          key: uuidv4(),\n          className: [wordClassName, 'sendbird-openchannel-og-message--word--link'],\n          src: word,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.PRIMARY\n        }, word) : /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_1\n        }, word);\n      });\n\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2\n        }, stringSet.MESSAGE_EDITED));\n      }\n\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]);\n\n  var openLink = function openLink() {\n    if (checkOGIsEnalbed(message)) {\n      var url = ogMetaData.url;\n      window.open(url);\n    }\n  }; // place conxt menu top depending clientHeight of message component\n\n\n  useEffect(function () {\n    var _a;\n\n    if (((_a = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-og-message'], false).join(' '),\n    ref: messageComponentRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-og-message__top__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__description\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__description__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText()))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-og-message__top__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag\"\n  }, ogMetaData.url && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, ogMetaData.url), ogMetaData.title && /*#__PURE__*/React__default.createElement(LinkLabel, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__title\",\n    src: ogMetaData.url,\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.PRIMARY\n  }, ogMetaData.title), ogMetaData.description && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, ogMetaData.description), ogMetaData.url && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\",\n    role: \"button\",\n    onClick: openLink,\n    onKeyDown: openLink,\n    tabIndex: 0\n  }, defaultImage && /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\",\n    url: defaultImage.url || '',\n    alt: defaultImage.alt || '',\n    height: \"189px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  }))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))));\n}\n\nvar SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED'\n};\nvar SUPPORTED_MIMES$1 = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\n\nvar getSupportingFileType = function getSupportingFileType(type) {\n  if (SUPPORTED_MIMES$1.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n\n  if (SUPPORTED_MIMES$1.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n\n  return SUPPORTING_TYPES.UNSUPPORTED;\n};\n\nfunction OpenchannelThumbnailMessage(_a) {\n  var _b;\n\n  var className = _a.className,\n      message = _a.message,\n      disabled = _a.disabled,\n      userId = _a.userId,\n      status = _a.status,\n      chainTop = _a.chainTop,\n      _onClick = _a.onClick,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage;\n  var type = message.type,\n      url = message.url,\n      localUrl = message.localUrl,\n      thumbnails = message.thumbnails;\n  var thumbnailUrl = thumbnails && thumbnails.length > 0 && thumbnails[0].url || null;\n\n  var _c = useContext(LocalizationContext),\n      stringSet = _c.stringSet,\n      dateLocale = _c.dateLocale;\n\n  var _d = useContext(UserProfileContext),\n      disableUserProfile = _d.disableUserProfile,\n      renderUserProfile = _d.renderUserProfile;\n\n  var _e = useState(360),\n      messageWidth = _e[0],\n      setMessageWidth = _e[1];\n\n  var messageRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var memorizedThumbnailPlaceHolder = useMemo(function () {\n    return function (type) {\n      return function (_a) {\n        var style = _a.style;\n        return (\n          /*#__PURE__*/\n          // eslint-disable-line\n          React__default.createElement(\"div\", {\n            style: style\n          }, /*#__PURE__*/React__default.createElement(Icon, {\n            type: type,\n            fillColor: IconColors.ON_BACKGROUND_2,\n            width: \"56px\",\n            height: \"56px\"\n          }))\n        );\n      };\n    };\n  }, []);\n  var isByMe = checkIsByMe(message, userId);\n  var isMessageSent = checkIsSent(status);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  useEffect(function () {\n    var _a;\n\n    var thumbnailWidth = ((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-thumbnail-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-thumbnail-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap\",\n    role: \"button\",\n    onClick: function onClick() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    onKeyDown: function onKeyDown() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\"\n  }), (_b = {}, _b[SUPPORTING_TYPES.VIDEO] = url || localUrl ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n  }, thumbnailUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\",\n    url: thumbnailUrl,\n    width: messageWidth,\n    height: \"270px\",\n    alt: \"image\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY)\n  }) : /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: url || localUrl,\n    type: type\n  })), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.IMAGE] = url || localUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image\",\n    url: thumbnailUrl || url || localUrl,\n    alt: \"image\",\n    width: messageWidth,\n    height: \"270px\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO)\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.UNSUPPORTED] = /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b)[getSupportingFileType(type)])), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-thumbnail-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nvar checkFileType = function checkFileType(fileUrl) {\n  var audioFile = /(\\.mp3)$/i;\n  var gifFile = /(\\.gif)$/i;\n\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF;\n  }\n\n  return IconTypes.FILE_DOCUMENT;\n};\n\nvar truncate = function truncate(fullStr, strLen) {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = strLen - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n\nfunction OpenchannelFileMessage(_a) {\n  var className = _a.className,\n      message = _a.message,\n      userId = _a.userId,\n      disabled = _a.disabled,\n      chainTop = _a.chainTop,\n      status = _a.status,\n      showRemove = _a.showRemove,\n      resendMessage = _a.resendMessage;\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n\n  var _b = useContext(LocalizationContext),\n      stringSet = _b.stringSet,\n      dateLocale = _b.dateLocale;\n\n  var _c = useContext(UserProfileContext),\n      disableUserProfile = _c.disableUserProfile,\n      renderUserProfile = _c.renderUserProfile;\n\n  var openFileUrl = function openFileUrl() {\n    window.open(message.url);\n  };\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-file-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-file-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__body\"\n  }, checkFileType(message.url) && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__body__icon\",\n    type: checkFileType(message.url),\n    fillColor: IconColors.PRIMARY,\n    width: \"48px\",\n    height: \"48px\"\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-openchannel-file-message__right__body__file-name\",\n    onClick: openFileUrl\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(message.name || message.url, 40)))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-file-message__context-menu__icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\n\nfunction RemoveMessageModal(_a) {\n  var onCloseModal = _a.onCloseModal,\n      onDeleteMessage = _a.onDeleteMessage;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: \"Delete\",\n    titleText: stringSet.MODAL__DELETE_MESSAGE__TITLE\n  });\n} // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n\n\nvar SUPPORTED_MIMES = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp' // not supported in IE\n  ],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\n\nvar isImage = function isImage(type) {\n  return SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\n};\n\nvar isVideo = function isVideo(type) {\n  return SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\n};\n\nvar MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN'\n};\nvar SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending'\n};\n\nvar getMessageType = function getMessageType(message) {\n  if (message.isUserMessage && message.isUserMessage() || message.messageType === 'user') {\n    return message.ogMetaData ? MessageTypes.OG : MessageTypes.USER;\n  }\n\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n\n  if (message.messageType === 'file') {\n    return isImage(message.type) || isVideo(message.type) ? MessageTypes.THUMBNAIL : MessageTypes.FILE;\n  }\n\n  return MessageTypes.UNKNOWN;\n};\n\nfunction MessageHoc(_a) {\n  var _b;\n\n  var message = _a.message,\n      userId = _a.userId,\n      disabled = _a.disabled,\n      editDisabled = _a.editDisabled,\n      hasSeparator = _a.hasSeparator,\n      channel = _a.channel,\n      renderCustomMessage = _a.renderCustomMessage,\n      deleteMessage = _a.deleteMessage,\n      updateMessage = _a.updateMessage,\n      resendMessage = _a.resendMessage,\n      status = _a.status,\n      chainTop = _a.chainTop,\n      chainBottom = _a.chainBottom;\n  var sender = null;\n\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n\n  var dateLocale = useContext(LocalizationContext).dateLocale;\n  var RenderedMessage = useMemo(function () {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n\n    return null;\n  }, [message, renderCustomMessage]);\n\n  var _c = useState(false),\n      showEdit = _c[0],\n      setShowEdit = _c[1];\n\n  var _d = useState(false),\n      showRemove = _d[0],\n      setShowRemove = _d[1];\n\n  var _e = useState(false),\n      showFileViewer = _e[0],\n      setShowFileViewer = _e[1];\n\n  var editMessageInputRef = useRef(null);\n  var isByMe = false;\n\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = userId === sender.userId || message.requestState === SendingMessageStatus.PENDING || message.requestState === SendingMessageStatus.FAILED;\n  }\n\n  if (RenderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n    }, /*#__PURE__*/React__default.createElement(RenderedMessage, {\n      message: message\n    }));\n  }\n\n  if (message.messageType === 'user' && showEdit) {\n    return /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      name: message.messageId,\n      onSendMessage: updateMessage,\n      onCancelEdit: function onCancelEdit() {\n        setShowEdit(false);\n      },\n      value: message.message\n    });\n  }\n\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n  }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'MMMM dd, yyyy', {\n    locale: dateLocale\n  }))), (_b = {}, _b[MessageTypes.ADMIN] = function () {\n    if (message.messageType === 'admin') {\n      return /*#__PURE__*/React__default.createElement(OpenChannelAdminMessage, {\n        message: message\n      });\n    }\n  }(), _b[MessageTypes.FILE] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelFileMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.OG] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelOGMessage, {\n        message: message,\n        status: status,\n        userId: userId,\n        showEdit: setShowEdit,\n        disabled: disabled,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.THUMBNAIL] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelThumbnailMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        onClick: setShowFileViewer,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.USER] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelUserMessage, {\n        message: message,\n        userId: userId,\n        disabled: disabled,\n        showEdit: setShowEdit,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n\n    return;\n  }(), _b[MessageTypes.UNKNOWN] = function () {\n    return; // return (\n    //   <OpenChannelUnknownMessage message={message} />\n    // );\n  }(), _b)[getMessageType(message)], showRemove && /*#__PURE__*/React__default.createElement(RemoveMessageModal, {\n    onCloseModal: function onCloseModal() {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function onDeleteMessage() {\n      if (message.messageType !== 'admin') {\n        deleteMessage(message);\n      }\n    }\n  }), showFileViewer && message.messageType === 'file' && /*#__PURE__*/React__default.createElement(FileViewer, {\n    onClose: function onClose() {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function onDelete() {\n      return deleteMessage(message);\n    },\n    isByMe: isByMe\n  }));\n}\n\nfunction OpenchannelConversationScroll(_a, ref) {\n  var _b = _a.useMessageGrouping,\n      useMessageGrouping = _b === void 0 ? true : _b,\n      openchannel = _a.openchannel,\n      user = _a.user,\n      allMessages = _a.allMessages,\n      _c = _a.isOnline,\n      isOnline = _c === void 0 ? true : _c,\n      hasMore = _a.hasMore,\n      onScroll = _a.onScroll,\n      renderCustomMessage = _a.renderCustomMessage,\n      updateMessage = _a.updateMessage,\n      deleteMessage = _a.deleteMessage,\n      resendMessage = _a.resendMessage;\n  var scrollRef = ref || useRef(null);\n\n  var _d = useState(false),\n      showScrollDownButton = _d[0],\n      setShowScrollDownButton = _d[1];\n\n  var handleOnScroll = function handleOnScroll(e) {\n    var element = e.target;\n    var scrollTop = element.scrollTop,\n        scrollHeight = element.scrollHeight,\n        clientHeight = element.clientHeight;\n\n    if (scrollHeight > scrollTop + clientHeight && window.navigator.userAgent.indexOf('MSIE ') < 0 // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n\n    if (!hasMore) {\n      return;\n    }\n\n    if (scrollTop === 0) {\n      var nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      var first_1 = nodes && nodes[0];\n      onScroll(function () {\n        try {\n          first_1.scrollIntoView();\n        } catch (error) {}\n      });\n    }\n  };\n\n  var scrollToBottom = function scrollToBottom() {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n\n  var hasMessage = useMemo(function () {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll\",\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__padding\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__item-container\" + (hasMessage ? '' : '--no-messages')\n  }, hasMessage ? allMessages.map(function (message, index) {\n    var status;\n\n    if (message.messageType !== 'admin') {\n      status = message.sendingStatus;\n    }\n\n    var previousMessage = allMessages[index - 1];\n    var nextMessage = allMessages[index - 1];\n    var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n    var currentCreatedAt = message.createdAt; // https://stackoverflow.com/a/41855608\n\n    var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n\n    var _a = useMessageGrouping ? compareMessagesForGrouping(previousMessage, message, nextMessage) : [false, false],\n        chainTop = _a[0],\n        chainBottom = _a[1];\n\n    return /*#__PURE__*/React__default.createElement(MessageHoc, {\n      renderCustomMessage: renderCustomMessage,\n      channel: openchannel,\n      key: message.messageId,\n      message: message,\n      status: status,\n      userId: user.userId,\n      disabled: !isOnline,\n      editDisabled: openchannel.isFrozen,\n      hasSeparator: hasSeparator,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      deleteMessage: deleteMessage,\n      updateMessage: updateMessage,\n      resendMessage: resendMessage\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    className: \"sendbird-openchannel-conversation-scroll__container__place-holder\",\n    type: PlaceHolderTypes.NO_MESSAGES\n  })), showScrollDownButton && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\",\n    onClick: scrollToBottom,\n    onKeyDown: scrollToBottom,\n    tabIndex: 0,\n    role: \"button\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.CHEVRON_DOWN,\n    fillColor: IconColors.CONTENT\n  }))));\n}\n\nvar OpenchannelConversationScroll$1 = /*#__PURE__*/React__default.forwardRef(OpenchannelConversationScroll);\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nvar GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nvar GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nvar SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nvar SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nvar SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nvar RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nvar FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nvar FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nvar FETCH_MUTED_USER_LIST = 'FETCH_MUTED_USER_LIST';\nvar TRIM_MESSAGE_LIST = 'TRIM_MESSAGE_LIST'; // event handlers\n\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nvar ON_USER_ENTERED = 'ON_USER_ENTERED';\nvar ON_USER_EXITED = 'ON_USER_EXITED';\nvar ON_USER_MUTED = 'ON_USER_MUTED';\nvar ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nvar ON_USER_BANNED = 'ON_USER_BANNED';\nvar ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nvar ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nvar ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nvar ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nvar ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nvar ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nvar ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\nvar messageActionTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SET_CURRENT_CHANNEL: SET_CURRENT_CHANNEL,\n  SET_CHANNEL_INVALID: SET_CHANNEL_INVALID,\n  RESET_MESSAGES: RESET_MESSAGES,\n  GET_PREV_MESSAGES_START: GET_PREV_MESSAGES_START,\n  GET_PREV_MESSAGES_SUCESS: GET_PREV_MESSAGES_SUCESS,\n  GET_PREV_MESSAGES_FAIL: GET_PREV_MESSAGES_FAIL,\n  SENDING_MESSAGE_FAILED: SENDING_MESSAGE_FAILED,\n  SENDING_MESSAGE_SUCCEEDED: SENDING_MESSAGE_SUCCEEDED,\n  SENDING_MESSAGE_START: SENDING_MESSAGE_START,\n  RESENDING_MESSAGE_START: RESENDING_MESSAGE_START,\n  FETCH_PARTICIPANT_LIST: FETCH_PARTICIPANT_LIST,\n  FETCH_BANNED_USER_LIST: FETCH_BANNED_USER_LIST,\n  FETCH_MUTED_USER_LIST: FETCH_MUTED_USER_LIST,\n  TRIM_MESSAGE_LIST: TRIM_MESSAGE_LIST,\n  ON_MESSAGE_RECEIVED: ON_MESSAGE_RECEIVED,\n  ON_MESSAGE_UPDATED: ON_MESSAGE_UPDATED,\n  ON_MESSAGE_DELETED: ON_MESSAGE_DELETED,\n  ON_MESSAGE_DELETED_BY_REQ_ID: ON_MESSAGE_DELETED_BY_REQ_ID,\n  ON_OPERATOR_UPDATED: ON_OPERATOR_UPDATED,\n  ON_USER_ENTERED: ON_USER_ENTERED,\n  ON_USER_EXITED: ON_USER_EXITED,\n  ON_USER_MUTED: ON_USER_MUTED,\n  ON_USER_UNMUTED: ON_USER_UNMUTED,\n  ON_USER_BANNED: ON_USER_BANNED,\n  ON_USER_UNBANNED: ON_USER_UNBANNED,\n  ON_CHANNEL_FROZEN: ON_CHANNEL_FROZEN,\n  ON_CHANNEL_UNFROZEN: ON_CHANNEL_UNFROZEN,\n  ON_CHANNEL_CHANGED: ON_CHANNEL_CHANGED,\n  ON_META_DATA_CREATED: ON_META_DATA_CREATED,\n  ON_META_DATA_UPDATED: ON_META_DATA_UPDATED,\n  ON_META_DATA_DELETED: ON_META_DATA_DELETED,\n  ON_META_COUNTERS_CREATED: ON_META_COUNTERS_CREATED,\n  ON_META_COUNTERS_UPDATED: ON_META_COUNTERS_UPDATED,\n  ON_META_COUNTERS_DELETED: ON_META_COUNTERS_DELETED,\n  ON_MENTION_RECEIVED: ON_MENTION_RECEIVED\n});\n\nfunction reducer(state, action) {\n  var _a;\n\n  switch (action.type) {\n    case RESET_MESSAGES:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n\n    case SET_CURRENT_CHANNEL:\n      {\n        var gottenChannel = action.payload;\n        var operators = gottenChannel.operators;\n\n        if (!state.isInvalid && state.currentOpenChannel && state.currentOpenChannel.url && state.currentOpenChannel.url === gottenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: gottenChannel,\n          isInvalid: false,\n          operators: operators,\n          participants: operators,\n          bannedParticipantIds: [],\n          mutedParticipantIds: []\n        });\n      }\n\n    case SET_CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n\n    case GET_PREV_MESSAGES_START:\n      {\n        return __assign(__assign({}, state), {\n          loading: true\n        });\n      }\n\n    case GET_PREV_MESSAGES_SUCESS:\n    case GET_PREV_MESSAGES_FAIL:\n      {\n        var isFailed = action.type === GET_PREV_MESSAGES_FAIL;\n        var _b = action.payload,\n            _c = _b.currentOpenChannel,\n            currentOpenChannel = _c === void 0 ? {} : _c,\n            _d = _b.messages,\n            messages = _d === void 0 ? [] : _d,\n            hasMore = _b.hasMore,\n            lastMessageTimestamp = _b.lastMessageTimestamp;\n        var actionChannelUrl = currentOpenChannel.url;\n        var receivedMessages_1 = isFailed ? [] : messages;\n\n        var _hasMore = isFailed ? false : hasMore;\n\n        var _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n        var stateChannel = state.currentOpenChannel;\n        var stateChannelUrl = stateChannel.url;\n\n        if (actionChannelUrl !== stateChannelUrl) {\n          return state;\n        }\n\n        var filteredAllMessages = state.allMessages.filter(function (message) {\n          return !receivedMessages_1.find(function (_a) {\n            var messageId = _a.messageId;\n            return compareIds(messageId, message.messageId);\n          });\n        });\n        return __assign(__assign({}, state), {\n          loading: false,\n          initialized: true,\n          hasMore: _hasMore,\n          lastMessageTimestamp: _lastMessageTimestamp,\n          allMessages: __spreadArray(__spreadArray([], receivedMessages_1, true), filteredAllMessages, true)\n        });\n      }\n\n    case SENDING_MESSAGE_START:\n      {\n        var _e = action.payload,\n            message = _e.message,\n            channel = _e.channel;\n\n        if (channel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [__assign({}, message)], false)\n        });\n      }\n\n    case SENDING_MESSAGE_SUCCEEDED:\n      {\n        var sentMessage_1 = action.payload;\n        var newMessages = state.allMessages.map(function (m) {\n          return compareIds(m.reqId, sentMessage_1.reqId) ? sentMessage_1 : m;\n        });\n        return __assign(__assign({}, state), {\n          allMessages: newMessages\n        });\n      }\n\n    case SENDING_MESSAGE_FAILED:\n      {\n        var sentMessage_2 = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, sentMessage_2.reqId) ? sentMessage_2 : m;\n          })\n        });\n      }\n\n    case TRIM_MESSAGE_LIST:\n      {\n        var allMessages = state.allMessages;\n        var experimentalMessageLimit = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.experimentalMessageLimit;\n\n        if (experimentalMessageLimit && experimentalMessageLimit > 0 && (allMessages === null || allMessages === void 0 ? void 0 : allMessages.length) > experimentalMessageLimit) {\n          var sliceAt = allMessages.length - experimentalMessageLimit;\n          return __assign(__assign({}, state), {\n            allMessages: allMessages.slice(sliceAt)\n          });\n        }\n\n        return state;\n      }\n\n    case RESENDING_MESSAGE_START:\n      {\n        var eventedChannel = action.payload.channel;\n        var resentMessage_1 = action.payload.message;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, resentMessage_1.reqId) ? resentMessage_1 : m;\n          })\n        });\n      }\n\n    case FETCH_PARTICIPANT_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedParticipantList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), fetchedParticipantList, true)\n        });\n      }\n\n    case FETCH_BANNED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedBannedUserList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedBannedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedBannedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n\n    case FETCH_MUTED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedMutedUserList = action.payload.users;\n\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedMutedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedMutedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n    // events\n\n    case ON_MESSAGE_RECEIVED:\n      {\n        var eventedChannel = action.payload.channel;\n        var receivedMessage = action.payload.message;\n        var currentOpenChannel = state.currentOpenChannel;\n\n        if (!compareIds(eventedChannel.url, currentOpenChannel.url) || !(state.allMessages.map(function (message) {\n          return message.messageId;\n        }).indexOf(receivedMessage.messageId) < 0)) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [receivedMessage], false)\n        });\n      }\n\n    case ON_MESSAGE_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedMessage_1 = action.payload.message;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (message) {\n            return message.isIdentical(updatedMessage_1) ? updatedMessage_1 : message;\n          })\n        });\n      }\n\n    case ON_MESSAGE_DELETED:\n      {\n        var eventedChannel = action.payload.channel;\n        var deletedMessageId_1 = action.payload.messageId;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (message) {\n            return !compareIds(message.messageId, deletedMessageId_1);\n          })\n        });\n      }\n\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (m) {\n            return !compareIds(m.reqId, action.payload);\n          })\n        });\n      }\n\n    case ON_OPERATOR_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedOperators = action.payload.operators;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: __assign(__assign({}, state.currentOpenChannel), {\n            operators: updatedOperators\n          }),\n          operators: updatedOperators\n        });\n      }\n\n    case ON_USER_ENTERED:\n      {\n        var eventedChannel = action.payload.channel;\n        var enteredUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), [enteredUser], false)\n        });\n      }\n\n    case ON_USER_EXITED:\n      {\n        var eventedChannel = action.payload.channel;\n        var exitedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          participants: state.participants.filter(function (participant) {\n            return !compareIds(participant.userId, exitedUser_1.userId);\n          })\n        });\n      }\n\n    case ON_USER_MUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var mutedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.mutedParticipantIds, true), [mutedUser.userId], false)\n        });\n      }\n\n    case ON_USER_UNMUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unmutedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(unmutedUser_1.userId) < 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: state.mutedParticipantIds.filter(function (userId) {\n            return userId !== unmutedUser_1.userId;\n          })\n        });\n      }\n\n    case ON_USER_BANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var bannedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), [bannedUser.userId], false)\n        });\n      }\n\n    case ON_USER_UNBANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unbannedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(unbannedUser_1.userId) < 0) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: state.bannedParticipantIds.filter(function (userId) {\n            return userId !== unbannedUser_1.userId;\n          })\n        });\n      }\n\n    case ON_CHANNEL_FROZEN:\n      {\n        var frozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== frozenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          frozen: true\n        });\n      }\n\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var unfrozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== unfrozenChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          frozen: false\n        });\n      }\n\n    case ON_CHANNEL_CHANGED:\n      {\n        var changedChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n\n        if (!currentChannel || currentChannel.url && currentChannel.url !== changedChannel.url) {\n          return state;\n        }\n\n        return __assign(__assign({}, state), {\n          currentOpenChannel: changedChannel\n        });\n      }\n\n    case ON_META_DATA_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_DATA_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_DATA_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaDataKeys = action.payload.metaDataKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_META_COUNTERS_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    case ON_MENTION_RECEIVED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const mentionedMessage = action.payload.message;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}\n\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: []\n};\n\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n      sdkInit = _a.sdkInit,\n      fetchingParticipants = _a.fetchingParticipants;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: openChannel\n          });\n          openChannel.enter(function (_, error) {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', {\n                channelUrl: channelUrl,\n                error: error\n              });\n              messagesDispatcher({\n                type: SET_CHANNEL_INVALID,\n                payload: null\n              });\n            }\n\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              var participantListQuery = openChannel.createParticipantListQuery();\n              var bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              var mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              fetchWithListQuery(participantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_PARTICIPANT_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(bannedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_BANNED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(mutedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_MUTED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', {\n            channelUrl: channelUrl,\n            error: error\n          });\n          messagesDispatcher({\n            type: SET_CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      }); // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nfunction useHandleChannelEvents(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      checkScrollBottom = _a.checkScrollBottom;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    var messageReceiverId = uuidv4();\n\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      var ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = function (channel, message) {\n        var scrollToEnd = checkScrollBottom();\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n\n        if (scrollToEnd) {\n          try {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = function (channel, messageId) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', {\n          channelUrl: channelUrl,\n          messageId: messageId\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: {\n            channel: channel,\n            messageId: messageId\n          }\n        });\n      };\n\n      ChannelHandler.onOperatorUpdated = function (channel, operators) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', {\n          channelUrl: channelUrl,\n          operators: operators\n        });\n        messagesDispatcher({\n          type: ON_OPERATOR_UPDATED,\n          payload: {\n            channel: channel,\n            operators: operators\n          }\n        });\n      };\n\n      ChannelHandler.onUserEntered = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_ENTERED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserExited = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_EXITED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserMuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_MUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserUnmuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNMUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserBanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_BANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onUserUnbanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNBANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n\n      ChannelHandler.onChannelFrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_FROZEN,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onChannelUnfrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_UNFROZEN,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onChannelChanged = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_CHANGED,\n          payload: channel\n        });\n      };\n\n      ChannelHandler.onMetaDataCreated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_CREATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n\n      ChannelHandler.onMetaDataUpdated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_UPDATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n\n      ChannelHandler.onMetaDataDeleted = function (channel, metaDataKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', {\n          channelUrl: channelUrl,\n          metaDataKeys: metaDataKeys\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_DELETED,\n          payload: {\n            channel: channel,\n            metaDataKeys: metaDataKeys\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersCreated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_CREATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersUpdated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_UPDATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n\n      ChannelHandler.onMetaCountersDeleted = function (channel, metaCounterKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', {\n          channelUrl: channelUrl,\n          metaCounterKeys: metaCounterKeys\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_DELETED,\n          payload: {\n            channel: channel,\n            metaCounterKeys: metaCounterKeys\n          }\n        });\n      };\n\n      ChannelHandler.onMentionReceived = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MENTION_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return function () {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [currentOpenChannel]);\n}\n\nfunction useInitialMessagesFetch(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      userFilledMessageListParams = _a.userFilledMessageListParams;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES,\n      payload: null\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.isInclusive = true;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_START,\n        payload: null\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore,\n              lastMessageTimestamp: lastMessageTimestamp\n            }\n          });\n          setTimeout(function () {\n            scrollIntoLast();\n          });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nfunction useScrollCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      lastMessageTimestamp = _a.lastMessageTimestamp,\n      fetchMore = _a.fetchMore;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher,\n      hasMore = _b.hasMore,\n      userFilledMessageListParams = _b.userFilledMessageListParams;\n  return useCallback(function (callback) {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          var hasMore_1 = messages && messages.length > 0;\n          var lastMessageTimestamp_1 = hasMore_1 ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore_1,\n              lastMessageTimestamp: lastMessageTimestamp_1\n            }\n          });\n          setTimeout(function () {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\n\nfunction useCheckScrollBottom(_a, _b) {\n  var conversationScrollRef = _a.conversationScrollRef;\n  var logger = _b.logger;\n  return useCallback(function () {\n    var isBottom = true;\n\n    if (conversationScrollRef) {\n      try {\n        var conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch (error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n\n    return isBottom;\n  }, [conversationScrollRef]);\n}\n\nfunction useSendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      onBeforeSendUserMessage = _a.onBeforeSendUserMessage,\n      checkScrollBottom = _a.checkScrollBottom,\n      messageInputRef = _a.messageInputRef;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function () {\n    if (sdk && sdk.UserMessageParams) {\n      var text = messageInputRef.current.value;\n\n      var createParamsDefault = function createParamsDefault(txt) {\n        var message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        var params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      };\n\n      var createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n      var isBottom_1 = checkScrollBottom();\n      var pendingMessage = currentOpenChannel.sendUserMessage(params, function (message, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_SUCCEEDED,\n            payload: message\n          });\n\n          if (isBottom_1) {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes\n          });\n        }\n      });\n      messagesDispatcher({\n        type: SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nfunction useFileUploadCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      checkScrollBottom = _a.checkScrollBottom,\n      _c = _a.imageCompression,\n      imageCompression = _c === void 0 ? {} : _c,\n      onBeforeSendFileMessage = _a.onBeforeSendFileMessage;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (file) {\n    if (sdk && sdk.FileMessageParams) {\n      var compressionRate_1 = imageCompression.compressionRate,\n          resizingWidth_1 = imageCompression.resizingWidth,\n          resizingHeight_1 = imageCompression.resizingHeight;\n      var createCustomParams_1 = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n      var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n      var compressibleRatio = compressionRate_1 > 0 && compressionRate_1 < 1; // pxToNumber returns null if values are invalid\n\n      var compressibleDiamensions_1 = pxToNumber(resizingWidth_1) || pxToNumber(resizingHeight_1);\n      var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions_1);\n\n      var createParamsDefault_1 = function createParamsDefault_1(file_) {\n        var params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) {\n        // Using image compression\n        try {\n          var image_1 = document.createElement('img');\n          image_1.src = URL.createObjectURL(file);\n\n          image_1.onload = function () {\n            URL.revokeObjectURL(image_1.src);\n            var canvas = document.createElement('canvas');\n            var imageWidth = image_1.naturalWidth || image_1.width;\n            var imageHeight = image_1.naturalHeight || image_1.height;\n            var targetWidth = pxToNumber(resizingWidth_1) || imageWidth;\n            var targetHeight = pxToNumber(resizingHeight_1) || imageHeight; // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n\n            if (file.type === 'image/png' && !compressibleDiamensions_1) {\n              targetWidth *= compressionRate_1;\n              targetHeight *= compressionRate_1;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            var context = canvas.getContext('2d');\n            context.drawImage(image_1, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(function (newImageBlob) {\n              var compressedFile = new File([newImageBlob], file.name, {\n                type: file.type\n              });\n\n              if (createCustomParams_1) {\n                logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n\n              var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault_1(compressedFile);\n              logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n              var isBottom = checkScrollBottom();\n              var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n                if (!error) {\n                  logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_SUCCEEDED,\n                    payload: message\n                  });\n\n                  if (isBottom) {\n                    setTimeout(function () {\n                      scrollIntoLast();\n                    });\n                  }\n                } else {\n                  logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n                    message: message,\n                    error: error\n                  });\n                  message.localUrl = URL.createObjectURL(file);\n                  message.file = file;\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_FAILED,\n                    payload: message\n                  });\n                }\n              });\n              messagesDispatcher({\n                type: SENDING_MESSAGE_START,\n                payload: {\n                  message: __assign(__assign({}, pendingMessage), {\n                    url: URL.createObjectURL(file),\n                    // pending thumbnail message seems to be failed\n                    requestState: 'pending'\n                  }),\n                  channel: currentOpenChannel\n                }\n              });\n            }, file.type, compressionRate_1);\n          };\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else {\n        // Not using image compression\n        if (createCustomParams_1) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n\n        var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault_1(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n        var isBottom_1 = checkScrollBottom();\n        var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n\n            if (isBottom_1) {\n              setTimeout(function () {\n                scrollIntoLast();\n              });\n            }\n          } else {\n            logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n              message: message,\n              error: error\n            });\n            message.localUrl = URL.createObjectURL(file);\n            message.file = file;\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: message\n            });\n          }\n        });\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: __assign(__assign({}, pendingMessage), {\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending'\n            }),\n            channel: currentOpenChannel\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nfunction useUpdateMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n      onBeforeSendUserMessage = _a.onBeforeSendUserMessage;\n  var sdk = _b.sdk,\n      logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (messageId, text, callback) {\n    var createParamsDefault = function createParamsDefault(txt) {\n      var params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, function (message, error) {\n      if (callback) {\n        callback();\n      }\n\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', {\n          message: message,\n          params: params\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message: message\n          }\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nfunction useDeleteMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (message, callback) {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    var sendingStatus = message.sendingStatus;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId\n      });\n\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType === 'file' || message.messageType === 'user')) {\n        return;\n      }\n\n      var messageToDelete = message;\n      currentOpenChannel.deleteMessage(messageToDelete, function (error) {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n\n        if (callback) {\n          callback();\n        }\n\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nfunction useResendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n      messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (failedMessage) {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n        file = failedMessage.file;\n\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage\n        }\n      }); // userMessage\n\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n        return;\n      } // fileMessage\n\n\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nvar THROTTLE_TIMER = 5000; // to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, experimentalMessageLimit changes\n// we check if messagesLength > experimentalMessageLimit before dispatching action\n\nfunction useTrimMessageList(_a, _b) {\n  var messagesLength = _a.messagesLength,\n      experimentalMessageLimit = _a.experimentalMessageLimit;\n  var messagesDispatcher = _b.messagesDispatcher,\n      logger = _b.logger;\n\n  var _c = useState(false),\n      inProgress = _c[0],\n      setInProgress = _c[1];\n\n  useEffect(function () {\n    if (inProgress) {\n      return;\n    }\n\n    if (typeof messagesLength === 'number' && messagesLength > experimentalMessageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: TRIM_MESSAGE_LIST,\n        payload: {\n          experimentalMessageLimit: experimentalMessageLimit\n        }\n      });\n    }\n\n    setInProgress(true);\n    setTimeout(function () {\n      setInProgress(false);\n    }, THROTTLE_TIMER);\n  }, [messagesLength, experimentalMessageLimit]);\n}\n\nvar COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\n\nvar OpenchannelConversation = function OpenchannelConversation(props) {\n  var // internal props\n  stores = props.stores,\n      config = props.config,\n      // normal props\n  useMessageGrouping = props.useMessageGrouping,\n      channelUrl = props.channelUrl,\n      _a = props.queries,\n      queries = _a === void 0 ? {} : _a,\n      disableUserProfile = props.disableUserProfile,\n      _b = props.fetchingParticipants,\n      fetchingParticipants = _b === void 0 ? false : _b,\n      // We didn't decide to support fetching participant list\n  renderCustomMessage = props.renderCustomMessage,\n      renderUserProfile = props.renderUserProfile,\n      renderChannelTitle = props.renderChannelTitle,\n      renderMessageInput = props.renderMessageInput,\n      onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n      experimentalMessageLimit = props.experimentalMessageLimit,\n      onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n      onChatHeaderActionClick = props.onChatHeaderActionClick;\n  var sdkStore = stores.sdkStore,\n      userStore = stores.userStore;\n  var userId = config.userId,\n      isOnline = config.isOnline,\n      logger = config.logger,\n      pubSub = config.pubSub,\n      imageCompression = config.imageCompression;\n  var sdk = sdkStore.sdk;\n  var user = userStore.user; // hook variables\n\n  var _c = useReducer(reducer, initialState),\n      messagesStore = _c[0],\n      messagesDispatcher = _c[1];\n\n  var allMessages = messagesStore.allMessages,\n      loading = messagesStore.loading,\n      initialized = messagesStore.initialized,\n      currentOpenChannel = messagesStore.currentOpenChannel,\n      isInvalid = messagesStore.isInvalid,\n      hasMore = messagesStore.hasMore,\n      lastMessageTimestamp = messagesStore.lastMessageTimestamp,\n      operators = messagesStore.operators,\n      bannedParticipantIds = messagesStore.bannedParticipantIds,\n      mutedParticipantIds = messagesStore.mutedParticipantIds; // ref\n\n  var messageInputRef = useRef(null); // useSendMessageCallback\n\n  var conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  var stringSet = useContext(LocalizationContext).stringSet; // const\n\n  var sdkInit = sdkStore.initialized;\n  var userFilledMessageListParams = queries ? queries.messageListParams : null;\n  var disabled = !initialized || !isOnline || isDisabledBecauseFrozen(currentOpenChannel, userId); // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile; // useMemo\n\n  var amIBanned = useMemo(function () {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  var amIMuted = useMemo(function () {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  var amIOperator = useMemo(function () {\n    return operators.map(function (operator) {\n      return operator.userId;\n    }).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]); // use hooks\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    fetchingParticipants: fetchingParticipants\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useEffect(function () {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n  var checkScrollBottom = useCheckScrollBottom({\n    conversationScrollRef: conversationScrollRef\n  }, {\n    logger: logger\n  });\n  useHandleChannelEvents({\n    currentOpenChannel: currentOpenChannel,\n    checkScrollBottom: checkScrollBottom\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useInitialMessagesFetch({\n    currentOpenChannel: currentOpenChannel,\n    userFilledMessageListParams: userFilledMessageListParams\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  }); // donot fetch more for streaming\n\n  var fetchMore = shouldFetchMore(allMessages === null || allMessages === void 0 ? void 0 : allMessages.length, experimentalMessageLimit);\n  var onScroll = useScrollCallback({\n    currentOpenChannel: currentOpenChannel,\n    lastMessageTimestamp: lastMessageTimestamp,\n    fetchMore: fetchMore\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    hasMore: hasMore,\n    userFilledMessageListParams: userFilledMessageListParams\n  });\n  var handleSendMessage = useSendMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage,\n    checkScrollBottom: checkScrollBottom,\n    messageInputRef: messageInputRef\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var handleFileUpload = useFileUploadCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendFileMessage: onBeforeSendFileMessage,\n    checkScrollBottom: checkScrollBottom,\n    imageCompression: imageCompression\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var deleteMessage = useDeleteMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var resendMessage = useResendMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useTrimMessageList({\n    messagesLength: allMessages === null || allMessages === void 0 ? void 0 : allMessages.length,\n    experimentalMessageLimit: experimentalMessageLimit\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    logger: logger\n  }); // handle API calls from withSendbird\n\n  useEffect(function () {\n    var subscriber = new Map();\n\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n\n    subscriber.set(SEND_USER_MESSAGE, pubSub.subscribe(SEND_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n      scrollIntoLast();\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: message\n        });\n      }\n    }));\n    subscriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(SEND_FILE_MESSAGE, pubSub.subscribe(SEND_FILE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message;\n      scrollIntoLast();\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          message = msg.message,\n          fromSelector = msg.fromSelector;\n\n      if (fromSelector && channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      }\n    }));\n    subscriber.set(DELETE_MESSAGE, pubSub.subscribe(DELETE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n          messageId = msg.messageId;\n\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: messageId\n        });\n      }\n    }));\n    return function () {\n      if (subscriber) {\n        subscriber.forEach(function (s) {\n          try {\n            s.remove();\n          } catch (_a) {//\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n\n  if (!currentOpenChannel || !currentOpenChannel.url || amIBanned) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.LOADING\n    }));\n  }\n\n  if (isInvalid) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: COMPONENT_CLASS_NAME,\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, renderChannelTitle ? renderChannelTitle({\n    channel: currentOpenChannel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(OpenchannelConversationHeader, {\n    title: currentOpenChannel.name,\n    subTitle: kFormatter(currentOpenChannel.participantCount) + \" \" + stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS,\n    coverImage: currentOpenChannel.coverUrl,\n    onActionClick: onChatHeaderActionClick,\n    amIOperator: amIOperator\n  }), currentOpenChannel.isFrozen && /*#__PURE__*/React__default.createElement(FrozenNotification, null), /*#__PURE__*/React__default.createElement(OpenchannelConversationScroll$1, {\n    ref: conversationScrollRef,\n    renderCustomMessage: renderCustomMessage,\n    openchannel: currentOpenChannel,\n    user: user,\n    useMessageGrouping: useMessageGrouping,\n    isOnline: isOnline,\n    allMessages: allMessages,\n    onScroll: onScroll,\n    hasMore: hasMore,\n    updateMessage: updateMessage,\n    deleteMessage: deleteMessage,\n    resendMessage: resendMessage\n  }), renderMessageInput ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, renderMessageInput({\n    channel: currentOpenChannel,\n    user: user,\n    disabled: disabled\n  })) : /*#__PURE__*/React__default.createElement(MessageInputWrapper$1, {\n    channel: currentOpenChannel,\n    user: user,\n    ref: messageInputRef,\n    disabled: disabled || amIMuted,\n    onSendMessage: handleSendMessage,\n    onFileUpload: handleFileUpload,\n    renderMessageInput: renderMessageInput\n  }));\n};\n\nvar index = withSendbirdContext(OpenchannelConversation);\nexport { OpenchannelConversation, index as default };","map":{"version":3,"mappings":"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","names":["getMessageCreatedAt","message","createdAt","shouldFetchMore","messageLength","maxMessages","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","isSameGroup","comparingMessage","messageType","sender","userId","sendingStatus","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","kFormatter","num","Math","abs","toFixed","isOperator","openChannel","operators","map","indexOf","isDisabledBecauseFrozen","isFrozen","fetchWithListQuery","listQuery","logger","eachQueryNextCallback","fetchList","query","hasNext","next","users","warning","info","pxToNumber","px","parsed","Number","parseFloat","isNaN","MessageInputWrapper","_a","ref","channel","user","disabled","onSendMessage","onFileUpload","renderMessageInput","useContext","LocalizationContext","React","className","MessageInput","placeholder","stringSet","MESSAGE_INPUT__PLACE_HOLDER__DISABLED","forwardRef","FrozenNotification","Label","type","LabelTypography","CAPTION_2","CHANNEL_FROZEN","OpenchannelConversationHeader","coverImage","title","subTitle","amIOperator","onActionClick","Avatar","src","alt","width","height","style","Icon","IconTypes","CHANNELS","fillColor","IconColors","CONTENT","H_2","color","LabelColors","ONBACKGROUND_1","NO_TITLE","BODY_2","ONBACKGROUND_2","IconButton","onClick","INFO","MEMBERS","PRIMARY","copyToClipboard","text","window","clipboardData","setData","queryCommandSupported","textarea","createElement","textContent","position","body","appendChild","select","execCommand","ex","removeChild","OpenChannelMessageStatusTypes","NONE","PENDING","FAILED","CANCELED","SUCCEEDED","getSenderFromMessage","_sender","checkIsSent","status","checkIsPending","checkIsFailed","checkIsByMe","isFineCopy","length","isFineResend","isResendable","isFineEdit","isFineDelete","showMenuTrigger","props","OpenchannelUserMessage","resendMessage","showEdit","showRemove","chainTop","dateLocale","UserProfileContext","disableUserProfile","renderUserProfile","messageRef","useRef","avatarRef","contextMenuRef","useState","contextStyle","setContextStyle","isByMe","isPending","isFailed","MemoizedMessageText","useMemo","splitMessage","split","matchedMessage","word","updatedAt","push","key","uuidv4","BODY_1","calssName","MESSAGE_EDITED","useEffect","current","clientHeight","top","innerWidth","__spreadArray","Array","isArray","join","ContextMenu","menuTrigger","toggleDropdown","profileUrl","menuItems","closeDropdown","MenuItems","parentRef","parentContainRef","paddingTop","paddingBottom","close","UserProfile","onSuccess","disableMessaging","SECONDARY_3","friendName","nickname","CAPTION_3","ONBACKGROUND_3","format","locale","Loader","SPINNER","ERROR","MORE","CONTENT_INVERSE","openLeft","MenuItem","CONTEXT_MENU_DROPDOWN__COPY","CONTEXT_MENU_DROPDOWN__EDIT","CONTEXT_MENU_DROPDOWN__RESEND","CONTEXT_MENU_DROPDOWN__DELETE","OpenChannelAdminMessage","URL_REG","createUrlTester","regexp","test","checkOGIsEnalbed","ogMetaData","url","OpenchannelOGMessage","messageComponentRef","isUrl","wordClassName","LinkLabel","openLink","open","SUBTITLE_2","description","role","onKeyDown","tabIndex","defaultImage","ImageRenderer","defaultComponent","THUMBNAIL_NONE","SUPPORTING_TYPES","IMAGE","VIDEO","UNSUPPORTED","SUPPORTED_MIMES","getSupportingFileType","OpenchannelThumbnailMessage","localUrl","thumbnails","thumbnailUrl","messageWidth","setMessageWidth","memorizedThumbnailPlaceHolder","React__default","ON_BACKGROUND_2","isMessageSent","thumbnailWidth","clientWidth","_b","placeHolder","PLAY","PHOTO","checkFileType","fileUrl","audioFile","gifFile","FILE_AUDIO","GIF","FILE_DOCUMENT","truncate","fullStr","strLen","undefined","separator","sepLen","charsToShow","frontChars","ceil","backChars","floor","substr","OpenchannelFileMessage","openFileUrl","TextButton","name","RemoveMessageModal","onCloseModal","onDeleteMessage","Modal","onCancel","onSubmit","submitText","titleText","MODAL__DELETE_MESSAGE__TITLE","isImage","isVideo","MessageTypes","ADMIN","USER","FILE","THUMBNAIL","OG","UNKNOWN","SendingMessageStatus","getMessageType","isUserMessage","isAdminMessage","MessageHoc","editDisabled","hasSeparator","renderCustomMessage","deleteMessage","updateMessage","chainBottom","RenderedMessage","setShowEdit","setShowRemove","showFileViewer","setShowFileViewer","editMessageInputRef","requestState","isEdit","messageId","onCancelEdit","value","DateSeparator","OpenChannelFileMessage","OpenChannelOGMessage","OpenChannelThumbnailMessage","OpenChannelUserMessage","FileViewer","onClose","onDelete","OpenchannelConversationScroll","useMessageGrouping","openchannel","allMessages","_c","isOnline","hasMore","onScroll","scrollRef","showScrollDownButton","setShowScrollDownButton","handleOnScroll","e","element","target","navigator","userAgent","nodes","querySelectorAll","first_1","scrollIntoView","scrollToBottom","scrollTo","hasMessage","index","previousMessage","previousMessageCreatedAt","currentCreatedAt","isSameDay","PlaceHolder","PlaceHolderTypes","NO_MESSAGES","CHEVRON_DOWN","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","RESET_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAIL","SENDING_MESSAGE_FAILED","SENDING_MESSAGE_SUCCEEDED","SENDING_MESSAGE_START","RESENDING_MESSAGE_START","FETCH_PARTICIPANT_LIST","FETCH_BANNED_USER_LIST","FETCH_MUTED_USER_LIST","TRIM_MESSAGE_LIST","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","ON_OPERATOR_UPDATED","ON_USER_ENTERED","ON_USER_EXITED","ON_USER_MUTED","ON_USER_UNMUTED","ON_USER_BANNED","ON_USER_UNBANNED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_CHANNEL_CHANGED","ON_META_DATA_CREATED","ON_META_DATA_UPDATED","ON_META_DATA_DELETED","ON_META_COUNTERS_CREATED","ON_META_COUNTERS_UPDATED","ON_META_COUNTERS_DELETED","ON_MENTION_RECEIVED","reducer","state","action","actionTypes","gottenChannel","payload","isInvalid","currentOpenChannel","participants","bannedParticipantIds","mutedParticipantIds","loading","_d","messages","lastMessageTimestamp","actionChannelUrl","receivedMessages_1","_hasMore","_lastMessageTimestamp","stateChannel","stateChannelUrl","filteredAllMessages","filter","find","initialized","sentMessage_1","newMessages","m","compareIds","reqId","sentMessage_2","experimentalMessageLimit","sliceAt","slice","eventedChannel","resentMessage_1","fetchedParticipantList","fetchedBannedUserList","every","fetchedMutedUserList","receivedMessage","updatedMessage_1","currentChannel","isIdentical","deletedMessageId_1","updatedOperators","enteredUser","exitedUser_1","participant","mutedUser","unmutedUser_1","bannedUser","unbannedUser_1","frozenChannel","frozen","unfrozenChannel","changedChannel","initialState","useSetChannel","channelUrl","sdkInit","fetchingParticipants","sdk","messagesDispatcher","OpenChannel","getChannel","messageActionTypes","enter","_","participantListQuery","createParticipantListQuery","bannedParticipantListQuery","createBannedUserListQuery","mutedParticipantListQuery","createMutedUserListQuery","utils","useHandleChannelEvents","checkScrollBottom","messageReceiverId","ChannelHandler","onMessageReceived","scrollToEnd","onMessageUpdated","onMessageDeleted","onOperatorUpdated","onUserEntered","onUserExited","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onChannelFrozen","onChannelUnfrozen","onChannelChanged","onMetaDataCreated","metaData","onMetaDataUpdated","onMetaDataDeleted","metaDataKeys","onMetaCountersCreated","metaCounter","onMetaCountersUpdated","onMetaCountersDeleted","metaCounterKeys","onMentionReceived","addChannelHandler","removeChannelHandler","useInitialMessagesFetch","userFilledMessageListParams","MessageListParams","getMessagesByTimestamp","messageListParams_1","prevResultSize","isInclusive","includeReplies","includeReactions","Object","keys","forEach","messageListParams","Date","getTime","useScrollCallback","fetchMore","useCallback","callback","hasMore_1","lastMessageTimestamp_1","useCheckScrollBottom","conversationScrollRef","isBottom","conversationScroll","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","UserMessageParams","createParamsDefault","txt","trim","toString","params","createCustomParams","isBottom_1","pendingMessage","sendUserMessage","useFileUploadCallback","imageCompression","onBeforeSendFileMessage","file","FileMessageParams","resizingWidth_1","resizingHeight_1","createCustomParams_1","compressibleFileType","compressibleRatio","compressionRate_1","compressibleDiamensions_1","canCompressImage","createParamsDefault_1","file_","image_1","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWidth","naturalWidth","imageHeight","naturalHeight","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","sendFileMessage","useUpdateMessageCallback","updateUserMessage","useDeleteMessageCallback","messageToDelete","useResendMessageCallback","failedMessage","resendUserMessage","resendFileMessage","console","THROTTLE_TIMER","useTrimMessageList","messagesLength","inProgress","setInProgress","COMPONENT_CLASS_NAME","OpenchannelConversation","stores","config","queries","renderChannelTitle","onChatHeaderActionClick","userStore","pubSub","sdkStore","useReducer","messagesReducer","messagesInitialState","messagesStore","userDefinedDisableUserProfile","userDefinedRenderProfile","amIBanned","amIMuted","handleSendMessage","handleFileUpload","subscriber","Map","subscribe","set","topics","msg","fromSelector","s","remove","NO_CHANNELS","LOADING","WRONG","UserProfileProvider","participantCount","OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS","coverUrl","FrozenChannelNotification","withSendbirdContext"],"sources":["C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\utils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\MessageInpuetWrapper.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\FrozenNotification.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelConversationHeader\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelUserMessage\\utils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\utils\\openChannelUtils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelUserMessage\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenChannelAdminMessage\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelOGMessage\\utils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelOGMessage\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelThumbnailMessage\\utils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelThumbnailMessage\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelFileMessage\\utils.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelFileMessage\\index.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\RemoveMessageModal.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\ui\\FileViewer\\types.js","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\types.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\MessageHOC.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\OpenchannelConversationScroll.tsx","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\actionTypes.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\reducers.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\initialState.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useSetChannel.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useHandleChannelEvents.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useInitialMessagesFetch.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useScrollCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useCheckScrollBottom.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useSendMessageCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useFileUploadCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useUpdateMessageCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useDeleteMessageCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useResendMessageCallback.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useTrimMessageList.ts","C:\\Users\\Ivo\\OneDrive\\Bureaublad\\bootcamp\\realtimechat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\index.tsx"],"sourcesContent":["import format from 'date-fns/format';\nimport Sendbird from 'sendbird';\nimport SendbirdUIKit from '../../index';\n\nexport const getMessageCreatedAt = (message: SendbirdUIKit.EveryMessage): string => format(message.createdAt, 'p');\n\nexport const shouldFetchMore = (messageLength: number, maxMessages: number): boolean => {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number'\n    && maxMessages > messageLength\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isSameGroup = (\n  message: SendbirdUIKit.EveryMessage,\n  comparingMessage: SendbirdUIKit.EveryMessage,\n): boolean => {\n  if (!(\n    message\n    && comparingMessage\n    && message?.messageType !== 'admin'\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false\n  }\n\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: SendbirdUIKit.EveryMessage,\n  currMessage: SendbirdUIKit.EveryMessage,\n  nextMessage: SendbirdUIKit.EveryMessage,\n): [boolean, boolean] => (\n  [\n    isSameGroup(prevMessage, currMessage),\n    isSameGroup(currMessage, nextMessage),\n  ]\n);\n\nexport const kFormatter = (num: number): string => {\n  if (Math.abs(num) > 999999) {\n    return `${(Math.abs(num) / 1000000).toFixed(1)}M`;\n  }\n\n  if (Math.abs(num) > 999) {\n    return `${(Math.abs(num) / 1000).toFixed(1)}K`;\n  }\n\n  return `${num}`;\n};\n\nexport const isOperator = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { operators } = openChannel;\n  if (operators.map(operator => operator.userId).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const isDisabledBecauseFrozen = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { isFrozen } = openChannel;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nexport const isDisabledBecauseMuted = (mutedParticipantIds: Array<string>, userId: string): boolean => {\n  return mutedParticipantIds.indexOf(userId) < 0;\n};\n\nexport const fetchWithListQuery = (\n  listQuery: SendbirdUIKit.UserListQuery,\n  logger: SendbirdUIKit.Logger,\n  eachQueryNextCallback: (users: Array<Sendbird.User>) => void,\n): void => {\n  const fetchList = (query) => {\n    const { hasNext } = query;\n    if (hasNext) {\n      query.next((error, users) => {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nexport const pxToNumber = (px: string | number): number | void => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","import React, { useContext } from 'react';\nimport Sendbird from 'sendbird';\nimport { RenderOpenChannelMessageInputProps } from '../../../index';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport MessageInput from '../../../ui/MessageInput';\n\ninterface Props {\n  channel: Sendbird.OpenChannel;\n  user: Sendbird.User;\n  disabled: boolean;\n  onSendMessage(): void;\n  onFileUpload(file_: File): void;\n  renderMessageInput?(renderProps: RenderOpenChannelMessageInputProps): JSX.Element;\n}\n\nconst MessageInputWrapper = ({\n  channel,\n  user,\n  disabled,\n  onSendMessage,\n  onFileUpload,\n  renderMessageInput,\n}: Props, ref: React.RefObject<HTMLInputElement>): JSX.Element => {\n  if (!channel) {\n    return;\n  }\n\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (renderMessageInput) {\n    return renderMessageInput({ channel, user, disabled });\n  }\n\n  return (\n    <div className=\"sendbird-openchannel-footer\">\n      <MessageInput\n        ref={ref}\n        disabled={disabled}\n        onSendMessage={onSendMessage}\n        onFileUpload={onFileUpload}\n        placeholder={(\n          disabled\n          && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED\n          // add disabled because of muted state\n        )}\n      />\n    </div>\n  );\n};\n\nexport default React.forwardRef(MessageInputWrapper);\n","import React, { useContext } from 'react';\n\nimport './frozen-notification.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography } from '../../../ui/Label';\n\nconst FrozenNotification = (): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-frozen-channel-notification\">\n      <Label\n        className=\"sendbird-frozen-channel-notification__text\"\n        type={LabelTypography.CAPTION_2}\n      >\n        {stringSet.CHANNEL_FROZEN}\n      </Label>\n    </div>\n  );\n}\n\nexport default FrozenNotification;\n","import React, { useContext } from 'react';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport IconButton from '../IconButton';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  coverImage?: string;\n  title?: string;\n  subTitle?: string;\n  amIOperator?: boolean;\n  onActionClick?(): void;\n}\n\nexport default function OpenchannelConversationHeader({\n  coverImage,\n  title,\n  subTitle,\n  amIOperator,\n  onActionClick,\n}: Props): JSX.Element {\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div className=\"sendbird-openchannel-conversation-header\">\n      <div className=\"sendbird-openchannel-conversation-header__left\">\n        {\n          coverImage ? (\n            <Avatar\n              className=\"sendbird-openchannel-conversation-header__left__cover-image\"\n              src={coverImage}\n              alt=\"channel cover image\"\n              width=\"32px\"\n              height=\"32px\"\n            />\n          ) : (\n            <div\n              className=\"sendbird-openchannel-conversation-header__left__cover-image--icon\"\n              style={{ width: 32, height: 32 }}\n            >\n              <Icon\n                type={IconTypes.CHANNELS}\n                fillColor={IconColors.CONTENT}\n                width=\"18px\"\n                height=\"18px\"\n              />\n            </div>\n          )\n        }\n        <Label\n          className=\"sendbird-openchannel-conversation-header__left__title\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {title || stringSet.NO_TITLE}\n        </Label>\n        <Label\n          className=\"sendbird-openchannel-conversation-header__left__sub-title\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {subTitle || stringSet.NO_TITLE}\n        </Label>\n      </div>\n      <div className=\"sendbird-openchannel-conversation-header__right\">\n        <IconButton\n          className=\"sendbird-openchannel-conversation-header__right__trigger\"\n          width=\"32px\"\n          height=\"32px\"\n          onClick={onActionClick}\n        >\n          <Icon\n            type={(\n              amIOperator\n              ? IconTypes.INFO\n              : IconTypes.MEMBERS\n            )}\n            fillColor={IconColors.PRIMARY}\n            width=\"24px\"\n            height=\"24px\"\n          />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n","export const copyToClipboard = (text: string): boolean => {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    const textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\n\nexport default { copyToClipboard };\n","import Sendbird from 'sendbird';\nimport { ClientUserMessage, ClientFileMessage } from '../index';\n\nconst OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\nexport const getSenderFromMessage = (message: ClientUserMessage | ClientFileMessage): Sendbird.User => {\n  return message.sender || message._sender;\n};\n\nexport const checkIsSent = (status: string): boolean => (status === OpenChannelMessageStatusTypes.SUCCEEDED);\nexport const checkIsPending = (status: string): boolean => (status === OpenChannelMessageStatusTypes.PENDING);\nexport const checkIsFailed = (status: string): boolean => (status === OpenChannelMessageStatusTypes.FAILED);\n\nexport const checkIsByMe = (message: ClientFileMessage | ClientUserMessage, userId: string): boolean => (getSenderFromMessage(message).userId === userId);\n\ninterface isFineCopyParams {\n  message: ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineCopy = ({ message }: isFineCopyParams): boolean => {\n  return (message.messageType === 'user' && message.message.length > 0);\n};\n\ninterface isFineResendParams {\n  message: ClientFileMessage | ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineResend = ({ message, status, userId }: isFineResendParams): boolean => {\n  return checkIsByMe(message, userId)\n    && checkIsFailed(status)\n    && message.isResendable\n    && message.isResendable();\n};\n\ninterface isFineEditParams {\n  message: ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineEdit = ({ message, status, userId }: isFineEditParams): boolean => {\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\n\ninterface isFineDeleteParams {\n  message: ClientFileMessage | ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineDelete = ({ message, userId }: isFineDeleteParams): boolean => {\n  return checkIsByMe(message, userId);\n};\n\ninterface showMenuTriggerParams {\n  message: ClientUserMessage | ClientFileMessage;\n  status: string;\n  userId: string;\n}\nexport const showMenuTrigger = (props: showMenuTriggerParams): boolean => {\n  const { message, status, userId } = props;\n  if (message.messageType === 'user') {\n    return (\n      isFineDelete({ message, status, userId })\n      || isFineEdit({ message, status, userId })\n      || isFineCopy({ message, status, userId })\n      || isFineResend({ message, status, userId })\n    );\n  } else {\n    return (\n      isFineDelete({ message, status, userId })\n      || isFineResend({ message, status, userId })\n    );\n  }\n};\n","import React, {\n  useMemo,\n  useContext,\n  useRef,\n  useState,\n  ReactElement,\n  useEffect,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { copyToClipboard } from './utils';\nimport uuidv4 from '../../utils/uuid';\nimport { ClientUserMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineCopy,\n  isFineEdit,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientUserMessage;\n  userId: string;\n  disabled?: boolean;\n  showEdit(bool: boolean): void;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientUserMessage): void;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n}\n\nexport default function OpenchannelUserMessage({\n  className,\n  message,\n  userId,\n  resendMessage,\n  disabled,\n  showEdit,\n  showRemove,\n  chainTop,\n  status,\n}: Props): ReactElement {\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  // hooks\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const messageRef = useRef(null);\n  const avatarRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const [contextStyle, setContextStyle] = useState({});\n\n  // consts\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  const MemoizedMessageText = useMemo(() => () => {\n    const splitMessage = message.message.split(/\\r/);\n    const matchedMessage = splitMessage.map((word) => (word !== '' ? word : <br />));\n    if (message.updatedAt > 0) {\n      matchedMessage.push(\n        <Label\n          key={uuidv4()}\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n          calssName=\"sendbird-openchannel-user-message-word\"\n        >\n          {` ${stringSet.MESSAGE_EDITED} `}\n        </Label>,\n      );\n    }\n    return matchedMessage;\n  }, [message, message.updatedAt]);\n\n  // place context menu top depending clientHeight of message component\n  useEffect(() => {\n    if (messageRef?.current?.clientHeight > 36) {\n      setContextStyle({ top: '8px ' });\n    } else {\n      setContextStyle({ top: '2px' });\n    }\n  }, [window.innerWidth]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-user-message',\n      ].join(' ')}\n      ref={messageRef}\n    >\n      <div className=\"sendbird-openchannel-user-message__left\">\n        {\n          !chainTop && (\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                <Avatar\n                  className=\"sendbird-openchannel-user-message__left__avatar\"\n                  src={sender.profileUrl || ''}\n                  ref={avatarRef}\n                  width=\"28px\"\n                  height=\"28px\"\n                  onClick={() => {\n                    if (!disableUserProfile) {\n                      toggleDropdown();\n                    }\n                  }}\n                />\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={avatarRef}\n                  parentContainRef={avatarRef}\n                  closeDropdown={closeDropdown}\n                  style={{ paddingTop: 0, paddingBottom: 0 }}\n                >\n                  {\n                    renderUserProfile\n                    ? (\n                      renderUserProfile({\n                        user: sender,\n                        close: closeDropdown,\n                      })\n                    )\n                    : (\n                      <UserProfile\n                        user={sender}\n                        onSuccess={closeDropdown}\n                        disableMessaging\n                      />\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n          )\n        }\n      </div>\n      <div className=\"sendbird-openchannel-user-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-user-message__right__top\">\n              <Label\n                className=\"sendbird-openchannel-user-message__right__top__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-user-message__right__top__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-user-message__right__bottom\">\n          <Label\n            className=\"sendbird-openchannel-user-message__right__bottom__message\"\n            type={LabelTypography.BODY_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {MemoizedMessageText()}\n          </Label>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-user-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-user-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-user-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      {\n        <div\n          className=\"sendbird-openchannel-user-message__context-menu\"\n          ref={contextMenuRef}\n          style={contextStyle}\n        >\n          <ContextMenu\n            menuTrigger={(toggleDropdown) => (\n              showMenuTrigger({ message: message, userId: userId, status: status}) && (\n                <IconButton\n                  className=\"sendbird-openchannel-user-message__context-menu--icon\"\n                  width=\"32px\"\n                  height=\"32px\"\n                  onClick={() => {\n                    toggleDropdown();\n                  }}\n                >\n                  <Icon\n                    type={IconTypes.MORE}\n                    fillColor={IconColors.CONTENT_INVERSE}\n                    width=\"24px\"\n                    height=\"24px\"\n                  />\n                </IconButton>\n              )\n            )}\n            menuItems={(closeDropdown) => (\n              <MenuItems\n                parentRef={contextMenuRef}\n                parentContainRef={contextMenuRef}\n                closeDropdown={closeDropdown}\n                openLeft\n              >\n                {\n                  isFineCopy({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__copy\"\n                      onClick={() => {\n                        copyToClipboard(message.message);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__COPY}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineEdit({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__edit\"\n                      onClick={() => {\n                        if (disabled) {\n                          return;\n                        }\n                        showEdit(true);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__EDIT}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineResend({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__resend\"\n                      onClick={() => {\n                        resendMessage(message);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineDelete({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__delete\"\n                      onClick={() => {\n                        if (disabled) {\n                          return;\n                        }\n                        showRemove(true);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                    </MenuItem>\n                  )\n                }\n              </MenuItems>\n            )}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { ClientAdminMessage } from '../../index';\nimport './index.scss';\n\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientAdminMessage;\n}\n\nexport default function OpenChannelAdminMessage({\n  className,\n  message,\n}: Props): ReactElement {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-admin-message',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-openchannel-admin-message__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {message.message || ''}\n      </Label>\n    </div>\n  );\n}\n","import Sendbird from 'sendbird';\n\nexport const URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\nexport const createUrlTester = (regexp: RegExp) => (text: string): boolean => regexp.test(text);\nexport const checkOGIsEnalbed = (message: Sendbird.UserMessage): boolean => {\n  const { ogMetaData } = message;\n  if (!ogMetaData) {\n    return false;\n  }\n  const { url } = ogMetaData;\n  if (!url) {\n    return false;\n  }\n  return true;\n};\n","import React, { useState, useContext, useMemo, useRef, useEffect } from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport LinkLabel from '../LinkLabel';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport uuidv4 from '../../utils/uuid';\nimport { copyToClipboard } from '../OpenchannelUserMessage/utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { checkOGIsEnalbed, createUrlTester, URL_REG } from './utils';\nimport { ClientUserMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineCopy,\n  isFineEdit,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  message: ClientUserMessage;\n  className?: string | Array<string>;\n  disabled?: boolean;\n  showEdit(bool: boolean): void;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientUserMessage): void;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n  userId: string;\n}\n\nexport default function OpenchannelOGMessage({\n  message,\n  className,\n  disabled,\n  showEdit,\n  showRemove,\n  resendMessage,\n  chainTop,\n  status,\n  userId,\n}: Props): JSX.Element {\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  const { ogMetaData } = message;\n  const { defaultImage } = ogMetaData;\n\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const [contextStyle, setContextStyle] = useState({});\n  const messageComponentRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  const isUrl = createUrlTester(URL_REG);\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  const MemoizedMessageText = useMemo(() => () => {\n    const wordClassName = 'sendbird-openchannel-og-message--word';\n    const splitMessage = message.message.split(' ');\n    const matchedMessage = splitMessage\n      .map((word) => (\n        isUrl(word)\n          ? (\n            <LinkLabel\n              key={uuidv4()}\n              className={[\n                wordClassName,\n                'sendbird-openchannel-og-message--word--link'\n              ]}\n              src={word}\n              type={LabelTypography.BODY_1}\n              color={LabelColors.PRIMARY}\n            >\n              {word}\n            </LinkLabel>\n          )\n          : (\n            <Label\n              key={uuidv4()}\n              className={wordClassName}\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {word}\n            </Label>\n          )\n      ));\n\n    if (message.updatedAt > 0) {\n      matchedMessage.push(\n        <Label\n          key={uuidv4()}\n          className={wordClassName}\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {stringSet.MESSAGE_EDITED}\n        </Label>,\n      );\n    }\n\n    return matchedMessage;\n  }, [message, message.updatedAt]);\n\n  const openLink = () => {\n    if (checkOGIsEnalbed(message)) {\n      const { url } = ogMetaData;\n      window.open(url);\n    }\n  };\n\n  // place conxt menu top depending clientHeight of message component\n  useEffect(() => {\n    if (messageComponentRef?.current?.clientHeight > 36) {\n      setContextStyle({ top: '8px ' });\n    } else {\n      setContextStyle({ top: '2px' });\n    }\n  }, [window.innerWidth]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-og-message',\n      ].join(' ')}\n      ref={messageComponentRef}\n    >\n      <div\n        className=\"sendbird-openchannel-og-message__top\"\n      >\n        <div className=\"sendbird-openchannel-og-message__top__left\">\n          {\n            !chainTop && (\n              <ContextMenu\n                menuTrigger={(toggleDropdown) => (\n                  <Avatar\n                    className=\"sendbird-openchannel-og-message__top__left__avatar\"\n                    src={sender.profileUrl || ''}\n                    ref={avatarRef}\n                    width=\"28px\"\n                    height=\"28px\"\n                    onClick={() => {\n                      if (!disableUserProfile) {\n                        toggleDropdown();\n                      }\n                    }}\n                  />\n                )}\n                menuItems={(closeDropdown) => (\n                  <MenuItems\n                    parentRef={avatarRef}\n                    parentContainRef={avatarRef}\n                    closeDropdown={closeDropdown}\n                    style={{ paddingTop: 0, paddingBottom: 0 }}\n                  >\n                    {\n                      renderUserProfile\n                        ? (\n                          renderUserProfile({\n                            user: sender,\n                            close: closeDropdown,\n                          })\n                        )\n                        : (\n                          <UserProfile\n                            user={sender}\n                            onSuccess={closeDropdown}\n                            disableMessaging\n                          />\n                        )\n                    }\n                  </MenuItems>\n                )}\n              />\n            )\n          }\n        </div>\n        <div className=\"sendbird-openchannel-og-message__top__right\">\n          {\n            !chainTop && (\n              <div className=\"sendbird-openchannel-og-message__top__right__title\">\n                <Label\n                  className=\"sendbird-openchannel-og-message__top__right__title__sender-name\"\n                  type={LabelTypography.CAPTION_2}\n                  color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n                >\n                  {\n                    sender && (\n                      sender.friendName\n                      || sender.nickname\n                      || sender.userId\n                    )\n                  }\n                </Label>\n                <Label\n                  className=\"sendbird-openchannel-og-message__top__right__title__sent-at\"\n                  type={LabelTypography.CAPTION_3}\n                  color={LabelColors.ONBACKGROUND_3}\n                >\n                  {format(message.createdAt, 'p', { locale: dateLocale })}\n                </Label>\n              </div>\n            )\n          }\n          <div className=\"sendbird-openchannel-og-message__top__right__description\">\n            <Label\n              className=\"sendbird-openchannel-og-message__top__right__description__message\"\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {MemoizedMessageText()}\n            </Label>\n          </div>\n        </div>\n        {\n          <div\n            className=\"sendbird-openchannel-og-message__top__context-menu\"\n            ref={contextMenuRef}\n            style={contextStyle}\n          >\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                showMenuTrigger({ message: message, userId: userId, status: status }) && (\n                  <IconButton\n                    className=\"sendbird-openchannel-og-message__top__context-menu--icon\"\n                    width=\"32px\"\n                    height=\"32px\"\n                    onClick={() => {\n                      toggleDropdown();\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.MORE}\n                      fillColor={IconColors.CONTENT_INVERSE}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                  </IconButton>\n                )\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={contextMenuRef}\n                  parentContainRef={contextMenuRef}\n                  closeDropdown={closeDropdown}\n                  openLeft\n                >\n                  {\n                    isFineCopy({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__copy\"\n                        onClick={() => {\n                          copyToClipboard(message.message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__COPY}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineEdit({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__edit\"\n                        onClick={() => {\n                          if (disabled) {\n                            return;\n                          }\n                          showEdit(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__EDIT}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineResend({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__resend\"\n                        onClick={() => {\n                          resendMessage(message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineDelete({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__delete\"\n                        onClick={() => {\n                          if (disabled) {\n                            return;\n                          }\n                          showRemove(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                      </MenuItem>\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n          </div>\n        }\n      </div>\n      <div className=\"sendbird-openchannel-og-message__bottom\">\n        <div className=\"sendbird-openchannel-og-message__bottom__og-tag\">\n          {\n            ogMetaData.url && (\n              <Label\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__url\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_2}\n              >\n                {ogMetaData.url}\n              </Label>\n            )\n          }\n          {\n            ogMetaData.title && (\n              <LinkLabel\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__title\"\n                src={ogMetaData.url}\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.PRIMARY}\n              >\n                {\n                  ogMetaData.title\n                }\n              </LinkLabel>\n            )\n          }\n          {\n            ogMetaData.description && (\n              <Label\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__description\"\n                type={LabelTypography.BODY_2}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {ogMetaData.description}\n              </Label>\n            )\n          }\n          {\n            ogMetaData.url && (\n              <div\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\"\n                role=\"button\"\n                onClick={openLink}\n                onKeyDown={openLink}\n                tabIndex={0}\n              >\n                {\n                  defaultImage && (\n                    <ImageRenderer\n                      className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\"\n                      url={defaultImage.url || ''}\n                      alt={defaultImage.alt || ''}\n                      height=\"189px\"\n                      defaultComponent={(\n                        <div className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\">\n                          <Icon\n                            type={IconTypes.THUMBNAIL_NONE}\n                            width=\"56px\"\n                            height=\"56px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-og-message__top__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-og-message__top__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-og-message__top__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","export const SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED',\n};\n\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const getSupportingFileType = (type: string): string => {\n  if (SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n  if (SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n  return SUPPORTING_TYPES.UNSUPPORTED;\n}\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useContext,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\nimport { SUPPORTING_TYPES, getSupportingFileType } from './utils';\nimport { ClientFileMessage } from '../../index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport {\n  checkIsByMe,\n  checkIsSent,\n  checkIsPending,\n  checkIsFailed,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientFileMessage;\n  disabled: boolean;\n  userId: string;\n  status: string;\n  chainTop: boolean;\n  chainBottom: boolean;\n  onClick(bool: boolean): void,\n  showRemove(bool: boolean): void,\n  resendMessage(message: ClientFileMessage): void;\n}\n\nexport default function OpenchannelThumbnailMessage({\n  className,\n  message,\n  disabled,\n  userId,\n  status,\n  chainTop,\n  onClick,\n  showRemove,\n  resendMessage,\n}: Props): JSX.Element {\n  const {\n    type,\n    url,\n    localUrl,\n    thumbnails,\n  } = message;\n  const thumbnailUrl = (thumbnails && thumbnails.length > 0 && thumbnails[0].url) || null;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const [messageWidth, setMessageWidth] = useState(360);\n  const messageRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  const memorizedThumbnailPlaceHolder = useMemo(() => (type) => ({ style }) => ( // eslint-disable-line\n    <div style={style}>\n      <Icon\n        type={type}\n        fillColor={IconColors.ON_BACKGROUND_2}\n        width=\"56px\"\n        height=\"56px\"\n        />\n    </div>\n  ), []);\n\n  const isByMe = checkIsByMe(message, userId);\n  const isMessageSent = checkIsSent(status);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  useEffect(() => {\n    const thumbnailWidth = messageRef?.current?.clientWidth - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-thumbnail-message',\n      ].join(' ')}\n      ref={messageRef}\n    >\n      <div className=\"sendbird-openchannel-thumbnail-message__left\">\n        {\n          !chainTop && (\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                <Avatar\n                  className=\"sendbird-openchannel-thumbnail-message__left__avatar\"\n                  src={sender.profileUrl || ''}\n                  ref={avatarRef}\n                  width=\"28px\"\n                  height=\"28px\"\n                  onClick={() => {\n                    if (!disableUserProfile) {\n                      toggleDropdown();\n                    }\n                  }}\n                />\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={avatarRef}\n                  parentContainRef={avatarRef}\n                  closeDropdown={closeDropdown}\n                  style={{ paddingTop: 0, paddingBottom: 0 }}\n                >\n                  {\n                    renderUserProfile\n                      ? (\n                        renderUserProfile({\n                          user: sender,\n                          close: closeDropdown,\n                        })\n                      )\n                      : (\n                        <UserProfile\n                          user={sender}\n                          onSuccess={closeDropdown}\n                          disableMessaging\n                        />\n                      )\n                  }\n                </MenuItems>\n              )}\n            />\n          )\n        }\n      </div>\n      <div className=\"sendbird-openchannel-thumbnail-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-thumbnail-message__right__title\">\n              <Label\n                className=\"sendbird-openchannel-thumbnail-message__right__title__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-thumbnail-message__right__title__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-thumbnail-message__right__body\">\n          <div\n            className=\"sendbird-openchannel-thumbnail-message__right__body__wrap\"\n            role=\"button\"\n            onClick={() => {\n              if (isMessageSent) {\n                onClick(true);\n              }\n            }}\n            onKeyDown={() => {\n              if (isMessageSent) {\n                onClick(true);\n              }\n            }}\n            tabIndex={0}\n          >\n            <div className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\" />\n            {\n              {\n                [SUPPORTING_TYPES.VIDEO]: (\n                  (url || localUrl)\n                    ? (\n                      <div className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video\" >\n                        {\n                          (thumbnailUrl)\n                            ? (\n                              <ImageRenderer\n                                className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n                                url={thumbnailUrl}\n                                width={messageWidth}\n                                height=\"270px\"\n                                alt=\"image\"\n                                placeHolder={memorizedThumbnailPlaceHolder(IconTypes.PLAY)}\n                              />\n                            )\n                            : (\n                              <video className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\">\n                                <source src={url || localUrl} type={type} />\n                              </video>\n                            )\n                        }\n                        <Icon\n                          className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\"\n                          type={IconTypes.PLAY}\n                          fillColor={IconColors.ON_BACKGROUND_2}\n                          width=\"56px\"\n                          height=\"56px\"\n                        />\n                      </div>\n                    )\n                    : (\n                      <Icon\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\"\n                        type={IconTypes.PHOTO}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width=\"56px\"\n                        height=\"56px\"\n                      />\n                    )\n                ),\n                [SUPPORTING_TYPES.IMAGE]: (\n                  (url || localUrl)\n                    ? (\n                      <ImageRenderer\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__image\"\n                        url={thumbnailUrl || url || localUrl}\n                        alt=\"image\"\n                        width={messageWidth}\n                        height=\"270px\"\n                        placeHolder={memorizedThumbnailPlaceHolder(IconTypes.PHOTO)}\n                      />\n                    )\n                    : (\n                      <Icon\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\"\n                        type={IconTypes.PHOTO}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width=\"56px\"\n                        height=\"56px\"\n                      />\n                    )\n                ),\n                [SUPPORTING_TYPES.UNSUPPORTED]: (\n                  <Icon\n                    className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\"\n                    type={IconTypes.PHOTO}\n                    fillColor={IconColors.ON_BACKGROUND_2}\n                    width=\"56px\"\n                    height=\"56px\"\n                  />\n                ),\n              }[getSupportingFileType(type)]\n            }\n          </div>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-thumbnail-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-thumbnail-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-thumbnail-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-openchannel-thumbnail-message__context-menu\"\n        ref={contextMenuRef}\n      >\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            showMenuTrigger({ message, userId, status }) && (\n              <IconButton\n                className=\"sendbird-openchannel-thumbnail-message__context-menu--icon\"\n                width=\"32px\"\n                height=\"32px\"\n                onClick={toggleDropdown}\n              >\n                <Icon\n                  type={IconTypes.MORE}\n                  fillColor={IconColors.CONTENT_INVERSE}\n                  width=\"24px\"\n                  height=\"24px\"\n                />\n              </IconButton>\n            )\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              parentRef={contextMenuRef}\n              parentContainRef={contextMenuRef}\n              closeDropdown={closeDropdown}\n              openLeft\n            >\n              {\n                isFineResend({ message, userId, status }) && (\n                  <MenuItem\n                    onClick={() => {\n                      resendMessage(message);\n                      closeDropdown();\n                    }}\n                  >\n                    {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                  </MenuItem>\n                )\n              }\n              {\n                isFineDelete({ message, userId, status }) && (\n                  <MenuItem\n                    onClick={() => {\n                      if (disabled) {\n                        return;\n                      }\n                      showRemove(true);\n                      closeDropdown();\n                    }}\n                  >\n                    {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                  </MenuItem>\n                )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n","import { IconTypes } from '../Icon';\n\nexport const checkFileType = (fileUrl: string): string => {\n  const audioFile = /(\\.mp3)$/i;\n  const gifFile = /(\\.gif)$/i;\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF\n  }\n  return IconTypes.FILE_DOCUMENT;\n}\n\nexport const truncate = (fullStr:string, strLen: number): string => {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  const separator = '...';\n  const sepLen = separator.length;\n  const charsToShow = strLen - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n","import React, { useContext, useRef } from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport TextButton from '../TextButton';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { checkFileType, truncate } from './utils';\nimport { ClientFileMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineDelete,\n  isFineResend,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientFileMessage;\n  userId: string;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientFileMessage): void;\n}\n\nexport default function OpenchannelFileMessage({\n  className,\n  message,\n  userId,\n  disabled,\n  chainTop,\n  status,\n  showRemove,\n  resendMessage,\n}: Props): JSX.Element {\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n\n  const openFileUrl = () => { window.open(message.url); };\n\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-file-message',\n      ].join(' ')}\n    >\n      <div className=\"sendbird-openchannel-file-message__left\">\n        {\n            !chainTop && (\n              <ContextMenu\n                menuTrigger={(toggleDropdown) => (\n                  <Avatar\n                    className=\"sendbird-openchannel-file-message__left__avatar\"\n                    src={sender.profileUrl || ''}\n                    ref={avatarRef}\n                    width=\"28px\"\n                    height=\"28px\"\n                    onClick={() => {\n                      if (!disableUserProfile) {\n                        toggleDropdown();\n                      }\n                    }}\n                  />\n                )}\n                menuItems={(closeDropdown) => (\n                  <MenuItems\n                    parentRef={avatarRef}\n                    parentContainRef={avatarRef}\n                    closeDropdown={closeDropdown}\n                    style={{ paddingTop: 0, paddingBottom: 0 }}\n                  >\n                    {\n                      renderUserProfile\n                      ? (\n                        renderUserProfile({\n                          user: sender,\n                          close: closeDropdown,\n                        })\n                      )\n                      : (\n                        <UserProfile\n                          user={sender}\n                          onSuccess={closeDropdown}\n                          disableMessaging\n                        />\n                      )\n                    }\n                  </MenuItems>\n                )}\n              />\n            )\n          }\n      </div>\n      <div className=\"sendbird-openchannel-file-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-file-message__right__title\">\n              <Label\n                className=\"sendbird-openchannel-file-message__right__title__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-file-message__right__title__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-file-message__right__body\">\n          {\n            checkFileType(message.url) && (\n              <Icon\n                className=\"sendbird-openchannel-file-message__right__body__icon\"\n                type={checkFileType(message.url)}\n                fillColor={IconColors.PRIMARY}\n                width=\"48px\"\n                height=\"48px\"\n              />\n            )\n          }\n          <TextButton\n            className=\"sendbird-openchannel-file-message__right__body__file-name\"\n            onClick={openFileUrl}\n          >\n            <Label\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {truncate(message.name || message.url, 40)}\n            </Label>\n          </TextButton>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-file-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-file-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-file-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-openchannel-file-message__context-menu\"\n        ref={contextMenuRef}\n      >\n        {\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                showMenuTrigger({ message, userId, status }) && (\n                  <IconButton\n                    className=\"sendbird-openchannel-file-message__context-menu__icon\"\n                    width=\"32px\"\n                    height=\"32px\"\n                    onClick={toggleDropdown}\n                  >\n                    <Icon\n                      type={IconTypes.MORE}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                  </IconButton>\n                )\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={contextMenuRef}\n                  parentContainRef={contextMenuRef}\n                  closeDropdown={closeDropdown}\n                  openLeft\n                >\n                  {\n                    isFineResend({ message, userId, status }) && (\n                      <MenuItem\n                        onClick={() => {\n                          if (disabled) { return; }\n                          resendMessage(message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineDelete({ message, userId, status }) && (\n                      <MenuItem\n                        onClick={() => {\n                          if (disabled) { return; }\n                          showRemove(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                      </MenuItem>\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n        }\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react'\nimport { ClientFileMessage, ClientUserMessage } from '../../..'\nimport Modal from '../../../ui/Modal';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  onCloseModal(): void;\n  onDeleteMessage(message: ClientUserMessage | ClientFileMessage, callback?: () => void): void;\n}\n\nexport default function RemoveMessageModal({\n  onCloseModal,\n  onDeleteMessage,\n}: Props): JSX.Element {\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <Modal\n      onCancel={onCloseModal}\n      onSubmit={onDeleteMessage}\n      submitText=\"Delete\"\n      titleText={stringSet.MODAL__DELETE_MESSAGE__TITLE}\n    />\n  );\n}\n","// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp', // not supported in IE\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const isImage = (type) => SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\nexport const isVideo = (type) => SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\nexport const isGif = (type) => type === 'image/gif';\nexport const unSupported = (type) => !(isImage(type) || isVideo(type));\n\nexport default SUPPORTED_MIMES;\n","import { EveryMessage } from '../../..';\nimport { isImage, isVideo } from '../../../ui/FileViewer/types';\n\nexport const MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN',\n};\n\nexport const SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending',\n};\n\nexport const getMessageType = (message: EveryMessage): string => {\n  if ((message.isUserMessage && message.isUserMessage()) || message.messageType === 'user') {\n    return (message.ogMetaData)\n      ? MessageTypes.OG\n      : MessageTypes.USER;\n  }\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n  if (message.messageType === 'file') {\n    return (isImage(message.type) || isVideo(message.type))\n      ? MessageTypes.THUMBNAIL\n      : MessageTypes.FILE;\n  }\n  return MessageTypes.UNKNOWN;\n};\n\nexport default {\n  MessageTypes,\n  SendingMessageStatus,\n  getMessageType,\n};\n","import React, {\n  useState,\n  useRef,\n  ReactElement,\n  useMemo,\n  useContext,\n} from 'react';\n\nimport format from 'date-fns/format';\nimport * as types from '../../../index';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport OpenChannelUserMessage from '../../../ui/OpenchannelUserMessage';\nimport OpenChannelAdminMessage from '../../../ui/OpenChannelAdminMessage';\nimport OpenChannelOGMessage from '../../../ui/OpenchannelOGMessage';\nimport OpenChannelThumbnailMessage from '../../../ui/OpenchannelThumbnailMessage';\nimport OpenChannelFileMessage from '../../../ui/OpenchannelFileMessage';\n// import UnknownMessage from '../../../ui/UnknownMessage';\n\nimport DateSeparator from '../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport MessageInput from '../../../ui/MessageInput';\nimport FileViewer from '../../../ui/FileViewer';\n\nimport RemoveMessageModal from './RemoveMessageModal';\nimport {\n  MessageTypes,\n  SendingMessageStatus,\n  getMessageType,\n} from './types';\nimport { OpenChannel } from 'sendbird';\n\ninterface Props {\n  message: types.EveryMessage;\n  userId: string;\n  disabled: boolean;\n  editDisabled: boolean;\n  hasSeparator: boolean;\n  channel: OpenChannel;\n  renderCustomMessage?: types.RenderCustomMessage,\n  deleteMessage(message: types.ClientUserMessage | types.ClientFileMessage, callback?: () => void): void;\n  updateMessage(messageId: number, text: string, callback?: () => void): void;\n  resendMessage(failedMessage: types.ClientUserMessage | types.ClientFileMessage): void;\n  status?: string;\n  chainTop: boolean;\n  chainBottom: boolean;\n}\n\nexport default function MessageHoc({\n  message,\n  userId,\n  disabled,\n  editDisabled,\n  hasSeparator,\n  channel,\n  renderCustomMessage,\n  deleteMessage,\n  updateMessage,\n  resendMessage,\n  status,\n  chainTop,\n  chainBottom,\n}: Props): ReactElement {\n  let sender: SendBird.User = null;\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n\n  const { dateLocale } = useContext(LocalizationContext);\n\n  const RenderedMessage = useMemo(() => {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n    return null;\n  }, [message, renderCustomMessage]);\n\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const editMessageInputRef = useRef(null);\n\n  let isByMe = false;\n\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = (userId === sender.userId)\n      || (message.requestState === SendingMessageStatus.PENDING)\n      || (message.requestState === SendingMessageStatus.FAILED);\n  }\n\n  if(RenderedMessage) {\n    return (\n      <div className=\"sendbird-msg-hoc sendbird-msg--scroll-ref\">\n        <RenderedMessage message={message} />\n      </div>\n    );\n  }\n\n  if (message.messageType === 'user' && showEdit) {\n    return (\n      <MessageInput\n        isEdit\n        disabled={editDisabled}\n        ref={editMessageInputRef}\n        name={message.messageId}\n        onSendMessage={updateMessage}\n        onCancelEdit={() => { setShowEdit(false); }}\n        value={message.message}\n      />\n    );\n  }\n\n  return (\n    <div className=\"sendbird-msg-hoc sendbird-msg--scroll-ref\">\n      {/* date-separator */}\n      {\n        hasSeparator && (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message.createdAt, 'MMMM dd, yyyy', { locale: dateLocale })}\n            </Label>\n          </DateSeparator>\n        )\n      }\n      {/* Message */}\n      {\n        {\n          [MessageTypes.ADMIN]: (() => {\n            if (message.messageType === 'admin') {\n              return (\n                <OpenChannelAdminMessage message={message} />\n              )\n            }\n          })(),\n          [MessageTypes.FILE]: (() => {\n            if (message.messageType === 'file') {\n              return (\n                <OpenChannelFileMessage\n                  message={message}\n                  disabled={disabled}\n                  userId={userId}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.OG]: (() => {\n            if (message.messageType === 'user') {\n              return (\n                <OpenChannelOGMessage\n                  message={message}\n                  status={status}\n                  userId={userId}\n                  showEdit={setShowEdit}\n                  disabled={disabled}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.THUMBNAIL]: (() => {\n            if (message.messageType === 'file') {\n              return (\n                <OpenChannelThumbnailMessage\n                  message={message}\n                  disabled={disabled}\n                  userId={userId}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  onClick={setShowFileViewer}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.USER]: (() => {\n            if (message.messageType === 'user') {\n              return (\n                <OpenChannelUserMessage\n                  message={message}\n                  userId={userId}\n                  disabled={disabled}\n                  showEdit={setShowEdit}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.UNKNOWN]: (() => {\n            return;\n            // return (\n            //   <OpenChannelUnknownMessage message={message} />\n            // );\n          })(),\n        }[getMessageType(message)]\n      }\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            onCloseModal={() => setShowRemove(false)}\n            onDeleteMessage={() => {\n              if (message.messageType !== 'admin') {\n                deleteMessage(message);\n              }\n            }}\n          />\n        )\n      }\n      {\n        (showFileViewer && message.messageType === 'file') && (\n          <FileViewer\n            onClose={() => setShowFileViewer(false)}\n            message={message}\n            onDelete={() => deleteMessage(message)}\n            isByMe={isByMe}\n          />\n        )\n      }\n      {/* {\n        !((message.isFileMessage && message.isFileMessage()) || message.messageType === 'file')\n        && !(message.isAdminMessage && message.isAdminMessage())\n        && !(((message.isUserMessage && message.isUserMessage()) || message.messageType === 'user'))\n        && !(showFileViewer)\n        && (\n          <UnknownMessage\n            message={message}\n            status={status}\n            isByMe={isByMe}\n            showRemove={setShowRemove}\n            chainTop={chainTop}\n            chainBottom={chainBottom}\n          />\n        )\n      } */}\n    </div>\n  );\n}\n","import React, { ReactElement, useRef, useState, useMemo } from 'react';\nimport isSameDay from 'date-fns/isSameDay';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n  EveryMessage,\n  RenderCustomMessage,\n} from '../../../index';\nimport MessageHoc from './MessageHOC';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nimport PlaceHolder, { PlaceHolderTypes } from '../../../ui/PlaceHolder';\nimport './openchannel-conversation-scroll.scss';\nimport { compareMessagesForGrouping } from '../utils';\n\ninterface Props {\n  openchannel: SendBird.OpenChannel;\n  user: SendBird.User;\n  allMessages: Array<EveryMessage>;\n  useMessageGrouping: boolean;\n  isOnline: boolean;\n  hasMore: boolean;\n  renderCustomMessage?: RenderCustomMessage;\n  onScroll(callback?: () => void): void;\n  updateMessage(messageId: number, text: string, callback?: () => void): void;\n  deleteMessage(message: ClientUserMessage | ClientFileMessage, callback?: () => void): void;\n  resendMessage(failedMessage: ClientUserMessage | ClientFileMessage): void;\n}\n\nfunction OpenchannelConversationScroll(\n  {\n    useMessageGrouping = true,\n    openchannel,\n    user,\n    allMessages,\n    isOnline = true,\n    hasMore,\n    onScroll,\n    renderCustomMessage,\n    updateMessage,\n    deleteMessage,\n    resendMessage,\n  }: Props,\n  ref: React.RefObject<HTMLDivElement>,\n): ReactElement {\n  const scrollRef = ref || useRef(null);\n  const [showScrollDownButton, setShowScrollDownButton] = useState(false);\n\n  const handleOnScroll = (e) => {\n    const element = e.target;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = element;\n    if (\n      (scrollHeight > scrollTop + clientHeight)\n      && (window.navigator.userAgent.indexOf('MSIE ') < 0) // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n\n    if (!hasMore) {\n      return;\n    }\n    if (scrollTop === 0) {\n      const nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      const first = nodes && nodes[0];\n      onScroll(() => {\n        try {\n          first.scrollIntoView();\n        } catch (error) { }\n      });\n    }\n  };\n\n  const scrollToBottom = () => {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n\n  const hasMessage = useMemo(() => {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n\n  return (\n    <div\n      className=\"sendbird-openchannel-conversation-scroll\"\n      onScroll={handleOnScroll}\n      ref={scrollRef}\n    >\n      <div className=\"sendbird-openchannel-conversation-scroll__container\">\n        <div className=\"sendbird-openchannel-conversation-scroll__container__padding\" />\n        <div className={`sendbird-openchannel-conversation-scroll__container__item-container${hasMessage ? '' : '--no-messages'}`}>\n          {\n            hasMessage\n              ? (\n                allMessages.map((message, index) => {\n                  let status: string;\n\n                  if (message.messageType !== 'admin') {\n                    status = message.sendingStatus;\n                  }\n\n                  const previousMessage = allMessages[index - 1];\n                  const nextMessage = allMessages[index - 1];\n\n                  const previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n                  const currentCreatedAt = message.createdAt;\n                  // https://stackoverflow.com/a/41855608\n                  const hasSeparator = !(previousMessageCreatedAt && (\n                    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n                  ));\n\n                  const [chainTop, chainBottom] = useMessageGrouping\n                    ? compareMessagesForGrouping(previousMessage, message, nextMessage)\n                    : [false, false];\n                  return (\n                    <MessageHoc\n                      renderCustomMessage={renderCustomMessage}\n                      channel={openchannel}\n                      key={message.messageId}\n                      message={message}\n                      status={status}\n                      userId={user.userId}\n                      disabled={!isOnline}\n                      editDisabled={openchannel.isFrozen}\n                      hasSeparator={hasSeparator}\n                      chainTop={chainTop}\n                      chainBottom={chainBottom}\n                      deleteMessage={deleteMessage}\n                      updateMessage={updateMessage}\n                      resendMessage={resendMessage}\n                    />\n                  )\n                })\n              )\n              : (\n                <PlaceHolder\n                  className=\"sendbird-openchannel-conversation-scroll__container__place-holder\"\n                  type={PlaceHolderTypes.NO_MESSAGES}\n                />\n              )\n          }\n        </div>\n        {\n          showScrollDownButton && (\n            <div\n              className=\"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\"\n              onClick={scrollToBottom}\n              onKeyDown={scrollToBottom}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <Icon\n                width=\"24px\"\n                height=\"24px\"\n                type={IconTypes.CHEVRON_DOWN}\n                fillColor={IconColors.CONTENT}\n              />\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default React.forwardRef(OpenchannelConversationScroll);\n","export const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nexport const SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nexport const SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nexport const SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nexport const RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nexport const FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nexport const FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nexport const FETCH_MUTED_USER_LIST= 'FETCH_MUTED_USER_LIST';\nexport const TRIM_MESSAGE_LIST= 'TRIM_MESSAGE_LIST';\n\n// event handlers\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nexport const ON_USER_ENTERED = 'ON_USER_ENTERED';\nexport const ON_USER_EXITED = 'ON_USER_EXITED';\nexport const ON_USER_MUTED = 'ON_USER_MUTED';\nexport const ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nexport const ON_USER_BANNED = 'ON_USER_BANNED';\nexport const ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nexport const ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nexport const ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nexport const ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nexport const ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nexport const ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nexport const ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\nimport compareIds from '../../../utils/compareIds.js';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n// @ts-ignore: Unreachable code error\ninterface ActionInterface {\n  type: string;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const gottenChannel = action.payload;\n      const operators = gottenChannel.operators;\n      if (\n        !state.isInvalid\n        && state.currentOpenChannel\n        && state.currentOpenChannel.url\n        && (state.currentOpenChannel.url === gottenChannel.url)\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: gottenChannel,\n        isInvalid: false,\n        operators: operators,\n        participants: operators,\n        bannedParticipantIds: [],\n        mutedParticipantIds: [],\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS:\n    case actionTypes.GET_PREV_MESSAGES_FAIL: {\n      const isFailed = (action.type === actionTypes.GET_PREV_MESSAGES_FAIL);\n      const {\n        currentOpenChannel = {},\n        messages = [],\n        hasMore,\n        lastMessageTimestamp,\n      } = action.payload;\n      const actionChannelUrl = currentOpenChannel.url;\n      const receivedMessages = isFailed ? [] : messages;\n      const _hasMore = isFailed ? false : hasMore;\n      const _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n      const stateChannel = state.currentOpenChannel;\n      const stateChannelUrl = stateChannel.url;\n\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      const filteredAllMessages = state.allMessages.filter((message) => (\n        !(receivedMessages.find(({ messageId }) => compareIds(messageId, message.messageId)))\n      ));\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: _hasMore,\n        lastMessageTimestamp: _lastMessageTimestamp,\n        allMessages: [\n          ...receivedMessages,\n          ...filteredAllMessages,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_START: {\n      const {\n        message,\n        channel,\n      } = action.payload;\n      if (channel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...message },\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_SUCCEEDED: {\n      const sentMessage = action.payload;\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_FAILED: {\n      const sentMessage = action.payload;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n        )),\n      };\n    }\n    case actionTypes.TRIM_MESSAGE_LIST: {\n      const { allMessages } = state;\n      const experimentalMessageLimit = action.payload?.experimentalMessageLimit;\n      if (experimentalMessageLimit\n        && experimentalMessageLimit > 0\n        && allMessages?.length > experimentalMessageLimit\n      ) {\n        const sliceAt = allMessages.length - experimentalMessageLimit;\n        return {\n          ...state,\n          allMessages: allMessages.slice(sliceAt),\n        }\n      }\n      return state;\n    }\n    case actionTypes.RESENDING_MESSAGE_START: {\n      const eventedChannel = action.payload.channel;\n      const resentMessage = action.payload.message;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, resentMessage.reqId) ? resentMessage : m\n        )),\n      };\n    }\n    case actionTypes.FETCH_PARTICIPANT_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedParticipantList = action.payload.users;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [... state.participants, ...fetchedParticipantList],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_BANNED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedBannedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedBannedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [\n          ... state.bannedParticipantIds,\n          ...fetchedBannedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_MUTED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedMutedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedMutedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [\n          ... state.bannedParticipantIds,\n          ...fetchedMutedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    // events\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const eventedChannel = action.payload.channel;\n      const receivedMessage = action.payload.message;\n\n      const {\n        currentOpenChannel\n      } = state;\n\n      if (\n        !compareIds(eventedChannel.url, currentOpenChannel.url)\n        || (\n          !(state.allMessages.map(\n            (message) => message.messageId).indexOf(receivedMessage.messageId) < 0\n        ))\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        allMessages: [...state.allMessages, receivedMessage],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedMessage = action.payload.message;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((message) => (\n          message.isIdentical(updatedMessage)\n            ? updatedMessage\n            : message\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const eventedChannel = action.payload.channel;\n      const deletedMessageId = action.payload.messageId;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((message) => (\n          !compareIds(message.messageId, deletedMessageId)\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedOperators = action.payload.operators;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: {\n          ...state.currentOpenChannel,\n          operators: updatedOperators,\n        },\n        operators: updatedOperators,\n      };\n    }\n    case actionTypes.ON_USER_ENTERED: {\n      const eventedChannel = action.payload.channel;\n      const enteredUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, enteredUser],\n      };\n    }\n    case actionTypes.ON_USER_EXITED: {\n      const eventedChannel = action.payload.channel;\n      const exitedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: state.participants.filter((participant) => (\n          !compareIds(participant.userId, exitedUser.userId)\n        )),\n      };\n    }\n    case actionTypes.ON_USER_MUTED: {\n      const eventedChannel = action.payload.channel;\n      const mutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [...state.mutedParticipantIds, mutedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const eventedChannel = action.payload.channel;\n      const unmutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(unmutedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: state.mutedParticipantIds.filter(userId => userId !== unmutedUser.userId),\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      const eventedChannel = action.payload.channel;\n      const bannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [...state.bannedParticipantIds, bannedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      const eventedChannel = action.payload.channel;\n      const unbannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(unbannedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: state.bannedParticipantIds.filter(userId => userId !== unbannedUser.userId),\n      };\n    }\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      const frozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== frozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      const unfrozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== unfrozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: false,\n      };\n    }\n    case actionTypes.ON_CHANNEL_CHANGED: {\n      const changedChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== changedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: changedChannel,\n      };\n    }\n    case actionTypes.ON_META_DATA_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaDataKeys = action.payload.metaDataKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_MENTION_RECEIVED: {\n      // const eventedChannel = action.payload.channel;\n      // const mentionedMessage = action.payload.message;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import Sendbird from 'sendbird';\nimport { EveryMessage } from '../../../index';\n\nexport interface State {\n  allMessages: Array<EveryMessage>;\n  loading: boolean;\n  initialized: boolean;\n  currentOpenChannel: Sendbird.OpenChannel;\n  isInvalid: boolean;\n  hasMore: boolean;\n  lastMessageTimestamp: number;\n  frozen: boolean;\n  operators: Array<Sendbird.User>;\n  participants: Array<Sendbird.User>;\n  bannedParticipantIds: Array<string | number>;\n  mutedParticipantIds: Array<string | number>;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: [],\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  channelUrl: string;\n  sdkInit: boolean;\n  fetchingParticipants: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit, fetchingParticipants }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: openChannel,\n          });\n          openChannel.enter((_, error) => {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n              messagesDispatcher({\n                type: messageActionTypes.SET_CHANNEL_INVALID,\n                payload: null,\n              });\n            }\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              const participantListQuery = openChannel.createParticipantListQuery();\n              const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              utils.fetchWithListQuery(\n                participantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                bannedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_BANNED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                mutedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_MUTED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n      // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport uuidv4 from '../../../utils/uuid';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useHandleChannelEvents(\n  { currentOpenChannel, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        const scrollToEnd = checkScrollBottom();\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_RECEIVED,\n          payload: { channel, message },\n        });\n        if (scrollToEnd) {\n          try {\n            setTimeout(() => {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n      ChannelHandler.onMessageDeleted = (channel, messageId) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', { channelUrl, messageId });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: { channel, messageId },\n        });\n      };\n      ChannelHandler.onOperatorUpdated = (channel, operators) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', { channelUrl, operators });\n        messagesDispatcher({\n          type: messageActionTypes.ON_OPERATOR_UPDATED,\n          payload: { channel, operators },\n        });\n      };\n      ChannelHandler.onUserEntered = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_ENTERED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserExited = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_EXITED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserMuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_MUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnmuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNMUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserBanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_BANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnbanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNBANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onChannelFrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_FROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelUnfrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_UNFROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelChanged = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_CHANGED,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onMetaDataCreated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_CREATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataUpdated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_UPDATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataDeleted = (channel, metaDataKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', { channelUrl, metaDataKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_DELETED,\n          payload: { channel, metaDataKeys },\n        });\n      };\n      ChannelHandler.onMetaCountersCreated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_CREATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersUpdated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_UPDATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersDeleted = (channel, metaCounterKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', { channelUrl, metaCounterKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_DELETED,\n          payload: { channel, metaCounterKeys },\n        });\n      };\n      ChannelHandler.onMentionReceived = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MENTION_RECEIVED,\n          payload: { channel, message },\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useInitialMessagesFetch(\n  { currentOpenChannel, userFilledMessageListParams }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', { currentOpenChannel, messageListParams });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            },\n          });\n          setTimeout(() => { scrollIntoLast(); });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            },\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nexport default useInitialMessagesFetch;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  lastMessageTimestamp: number;\n  fetchMore?: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  hasMore: boolean;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ntype CallbackReturn = (callback: () => void) => void;\n\nfunction useScrollCallback(\n  { currentOpenChannel, lastMessageTimestamp, fetchMore }: DynamicParams,\n  { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams }: StaticParams,\n): CallbackReturn {\n  return useCallback((callback) => {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', { currentOpenChannel, messageListParams });\n\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            }\n          });\n          setTimeout(() => {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\ninterface DynamicParams {\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n}\n\nfunction useCheckScrollBottom(\n  { conversationScrollRef }: DynamicParams,\n  { logger }: StaticParams,\n): () => boolean {\n  return useCallback(() => {\n    let isBottom = true;\n    if (conversationScrollRef) {\n      try {\n        const conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch(error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef])\n}\n\nexport default useCheckScrollBottom;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage: (text: string) => Sendbird.UserMessageParams;\n  checkScrollBottom: () => boolean;\n  messageInputRef: React.RefObject<HTMLInputElement>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSendMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (sdk && sdk.UserMessageParams) {\n      const text = messageInputRef.current.value;\n      const createParamsDefault = (txt: string | number): Sendbird.UserMessageParams => {\n        const message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        const params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      }\n      const createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n\n      const isBottom = checkScrollBottom();\n      const pendingMessage = currentOpenChannel.sendUserMessage(params, (message, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n          if (isBottom) {\n            setTimeout(() => {\n              utils.scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes,\n          });\n        }\n      });\n      messagesDispatcher({\n        type: messageActionTypes.SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel,\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nexport default useSendMessageCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendFileMessage: (file: File) => Sendbird.FileMessageParams;\n  checkScrollBottom: () => boolean;\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (file: File) => void;\n\nfunction useFileUploadCallback(\n  {\n    currentOpenChannel,\n    checkScrollBottom,\n    imageCompression = {},\n    onBeforeSendFileMessage,\n  }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((file) => {\n    if (sdk && sdk.FileMessageParams) {\n      const {\n        compressionRate,\n        resizingWidth,\n        resizingHeight,\n      } = imageCompression;\n      const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n      const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n      const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n      // pxToNumber returns null if values are invalid\n      const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n        || utils.pxToNumber(resizingHeight);\n\n      const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n      const createParamsDefault = (file_): Sendbird.FileMessageParams => {\n        const params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) { // Using image compression\n        try {\n          const image: HTMLImageElement = document.createElement('img');\n          image.src = URL.createObjectURL(file);\n          image.onload = () => {\n            URL.revokeObjectURL(image.src);\n            const canvas = document.createElement('canvas');\n            const imageWidth = image.naturalWidth || image.width;\n            const imageHeight = image.naturalHeight || image.height;\n            let targetWidth = utils.pxToNumber(resizingWidth) || imageWidth;\n            let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n            // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n            if (file.type === 'image/png' && !compressibleDiamensions) {\n              targetWidth *= compressionRate;\n              targetHeight *= compressionRate;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(\n              (newImageBlob) => {\n                const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n                if (createCustomParams) {\n                  logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n                }\n                const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);\n                logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n                const isBottom = checkScrollBottom();\n                const pendingMessage = currentOpenChannel.sendFileMessage(\n                  params,\n                  (message: SendbirdUIKit.ClientFileMessage, error) => {\n                    if (!error) {\n                      logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                        payload: message,\n                      });\n                      if (isBottom) {\n                        setTimeout(() => {\n                          utils.scrollIntoLast();\n                        });\n                      }\n                    } else {\n                      logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n                      message.localUrl = URL.createObjectURL(file);\n                      message.file = file;\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                        payload: message,\n                      });\n                    }\n                  },\n                );\n\n                messagesDispatcher({\n                  type: messageActionTypes.SENDING_MESSAGE_START,\n                  payload: {\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(file),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentOpenChannel,\n                  }\n                });\n              },\n              file.type,\n              compressionRate,\n            );\n          }\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else { // Not using image compression\n        if (createCustomParams) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n        const isBottom = checkScrollBottom();\n        const pendingMessage = currentOpenChannel.sendFileMessage(\n          params,\n          (message: SendbirdUIKit.ClientFileMessage, error) => {\n            if (!error) {\n              logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                payload: message,\n              });\n              if (isBottom) {\n                setTimeout(() => {\n                  utils.scrollIntoLast();\n                });\n              }\n            } else {\n              logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n              message.localUrl = URL.createObjectURL(file);\n              message.file = file;\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                payload: message,\n              });\n            }\n          }\n        );\n\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: {\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentOpenChannel,\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nexport default useFileUploadCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage?: (text) => Sendbird.UserMessageParams;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload :any }) => void;\n}\ntype CallbackReturn = (messageId, text, callback) => void;\n\nfunction useUpdateMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((messageId, text, callback) => {\n    const createParamsDefault = (txt) => {\n      const params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, (message, error) => {\n      if (callback) {\n        callback();\n      }\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', { message, params });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message,\n          },\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (\n  message: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage,\n  callback?: () => void,\n) => void;\n\nfunction useDeleteMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((message, callback) => {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    const { sendingStatus } = message;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType ==='file' || message.messageType === 'user')) {\n        return;\n      }\n      const messageToDelete = message as SendBird.UserMessage;\n      currentOpenChannel.deleteMessage(messageToDelete, (error) => {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId,\n            },\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (failedMessage: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage) => void;\n\nfunction useResendMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((failedMessage) => {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage,\n        },\n      });\n\n      // userMessage\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n        return;\n      }\n\n      // fileMessage\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useResendMessageCallback;\n","import { useEffect, useState } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  messagesLength: number;\n  experimentalMessageLimit: number;\n}\n\ninterface StaticParams {\n  messagesDispatcher: ({\n    type: string,\n    payload: { experimentalMessageLimit: number }\n  }) => void;\n  logger: SendbirdUIKit.Logger;\n}\n\nconst THROTTLE_TIMER = 5000;\n\n// to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, experimentalMessageLimit changes\n// we check if messagesLength > experimentalMessageLimit before dispatching action\nfunction useTrimMessageList(\n  { messagesLength, experimentalMessageLimit }: DynamicParams,\n  { messagesDispatcher, logger }: StaticParams,\n): void {\n  const [inProgress, setInProgress] = useState(false);\n  useEffect(() => {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > experimentalMessageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: messageActionTypes.TRIM_MESSAGE_LIST,\n        payload: { experimentalMessageLimit },\n      });\n    }\n    setInProgress(true);\n    setTimeout(() => { setInProgress(false); }, THROTTLE_TIMER);\n  }, [messagesLength, experimentalMessageLimit]);\n}\n\nexport default useTrimMessageList;\n","import React, {\n  useRef,\n  useEffect,\n  useReducer,\n  useContext,\n  useMemo,\n} from 'react';\nimport * as utils from './utils';\nimport './index.scss';\n\nimport MessageInputWrapper from './components/MessageInpuetWrapper';\nimport FrozenChannelNotification from './components/FrozenNotification';\nimport OpenchannelConversationHeader from '../../ui/OpenchannelConversationHeader';\nimport OpenchannelConversationScroll from './components/OpenchannelConversationScroll';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport { OpenChannelProps } from '../../index';\nimport messagesReducer from './dux/reducers';\nimport messagesInitialState from './dux/initialState';\nimport * as messageActionTypes from './dux/actionTypes';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext.jsx';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { scrollIntoLast } from './utils';\nimport * as topics from '../../lib/pubSub/topics';\n\n// hooks\nimport useSetChannel from './hooks/useSetChannel';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useCheckScrollBottom from './hooks/useCheckScrollBottom';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useFileUploadCallback from './hooks/useFileUploadCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useTrimMessageList from './hooks/useTrimMessageList';\n\nconst COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\n\ninterface Props extends OpenChannelProps {\n  stores: {\n    sdkStore?: SendbirdUIKit.SdkStore,\n    userStore?: SendbirdUIKit.UserStore,\n  };\n  config: {\n    userId: string,\n    isOnline: boolean,\n    logger?: SendbirdUIKit.Logger,\n    theme?: string,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    pubSub: any,\n    disableUserProfile?: boolean,\n    renderUserProfile?(): JSX.Element,\n    imageCompression?: {\n      compressionRate?: number,\n      resizingWidth?: number | string,\n      resizingHeight?: number | string,\n    },\n  };\n}\n\nexport const OpenchannelConversation = (props: Props): JSX.Element => {\n  const {\n    // internal props\n    stores,\n    config,\n    // normal props\n    useMessageGrouping,\n    channelUrl,\n    queries = {},\n    disableUserProfile,\n    fetchingParticipants = false, // We didn't decide to support fetching participant list\n    renderCustomMessage,\n    renderUserProfile,\n    renderChannelTitle,\n    renderMessageInput,\n    onBeforeSendUserMessage,\n    experimentalMessageLimit,\n    onBeforeSendFileMessage,\n    onChatHeaderActionClick\n  } = props;\n\n  const {\n    sdkStore,\n    userStore,\n  } = stores;\n  const {\n    userId,\n    isOnline,\n    logger,\n    pubSub,\n    imageCompression,\n  } = config;\n\n  const {\n    sdk\n  } = sdkStore;\n  const {\n    user\n  } = userStore;\n\n  // hook variables\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const {\n    allMessages,\n    loading,\n    initialized,\n    currentOpenChannel,\n    isInvalid,\n    hasMore,\n    lastMessageTimestamp,\n    operators,\n    bannedParticipantIds,\n    mutedParticipantIds,\n  } = messagesStore;\n  // ref\n  const messageInputRef = useRef(null); // useSendMessageCallback\n  const conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n  const { stringSet } = useContext(LocalizationContext);\n\n  // const\n  const sdkInit = sdkStore.initialized;\n  const userFilledMessageListParams = queries ? queries.messageListParams: null;\n  const disabled = !initialized\n    || !isOnline\n    || utils.isDisabledBecauseFrozen(currentOpenChannel, userId);\n  // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n\n  // useMemo\n  const amIBanned = useMemo(() => {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  const amIMuted = useMemo(() => {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  const amIOperator = useMemo(() => {\n    return operators.map(operator => operator.userId).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]);\n\n  // use hooks\n  useSetChannel(\n    { channelUrl, sdkInit, fetchingParticipants },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  useEffect(() => {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  const checkScrollBottom = useCheckScrollBottom(\n    { conversationScrollRef },\n    { logger },\n  );\n  useHandleChannelEvents(\n    { currentOpenChannel, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  useInitialMessagesFetch(\n    { currentOpenChannel, userFilledMessageListParams },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  // donot fetch more for streaming\n  const fetchMore = utils.shouldFetchMore(allMessages?.length, experimentalMessageLimit);\n  const onScroll = useScrollCallback(\n    { currentOpenChannel, lastMessageTimestamp, fetchMore },\n    { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams },\n  );\n  const handleSendMessage = useSendMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef },\n    { sdk, logger, messagesDispatcher },\n  );\n  const handleFileUpload = useFileUploadCallback(\n    { currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression },\n    { sdk, logger, messagesDispatcher },\n  );\n  const updateMessage = useUpdateMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage },\n    { sdk, logger, messagesDispatcher },\n  );\n  const deleteMessage = useDeleteMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n\n  useTrimMessageList(\n    { messagesLength: allMessages?.length, experimentalMessageLimit },\n    { messagesDispatcher, logger }\n  );\n\n  // handle API calls from withSendbird\n  useEffect(() => {\n    const subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: message,\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n      const { channel, message } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n      const { channel, message, fromSelector } = msg;\n      if (fromSelector && channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      }\n    }));\n    subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n      const { channel, messageId } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      }\n    }));\n\n    return () => {\n      if (subscriber) {\n        subscriber.forEach((s) => {\n          try {\n            s.remove();\n          } catch {\n            //\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n\n  if (\n    !currentOpenChannel\n    || !currentOpenChannel.url\n    || amIBanned\n  ) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} /></div>);\n  }\n  if (loading) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.LOADING} /></div>);\n  }\n  if (isInvalid) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.WRONG} /></div>);\n  }\n\n  return (\n    <UserProfileProvider\n      className={COMPONENT_CLASS_NAME}\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      {\n        renderChannelTitle\n          ? renderChannelTitle({\n            channel: currentOpenChannel,\n            user: user,\n          })\n          : (\n            <OpenchannelConversationHeader\n              title={currentOpenChannel.name}\n              subTitle={`${utils.kFormatter(currentOpenChannel.participantCount)} ${stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS}`}\n              coverImage={currentOpenChannel.coverUrl}\n              onActionClick={onChatHeaderActionClick}\n              amIOperator={amIOperator}\n            />\n          )\n      }\n      {\n        currentOpenChannel.isFrozen && (\n          <FrozenChannelNotification />\n        )\n      }\n      <OpenchannelConversationScroll\n        ref={conversationScrollRef}\n        renderCustomMessage={renderCustomMessage}\n        openchannel={currentOpenChannel}\n        user={user}\n        useMessageGrouping={useMessageGrouping}\n        isOnline={isOnline}\n        allMessages={allMessages}\n        onScroll={onScroll}\n        hasMore={hasMore}\n        updateMessage={updateMessage}\n        deleteMessage={deleteMessage}\n        resendMessage={resendMessage}\n      />\n      {\n        renderMessageInput\n          ? (\n            <div className=\"sendbird-openchannel-footer\">\n              {\n                renderMessageInput({\n                  channel: currentOpenChannel,\n                  user: user,\n                  disabled: disabled,\n                })\n              }\n            </div>\n          )\n          : (\n            <MessageInputWrapper\n              channel={currentOpenChannel}\n              user={user}\n              ref={messageInputRef}\n              disabled={disabled || amIMuted}\n              onSendMessage={handleSendMessage}\n              onFileUpload={handleFileUpload}\n              renderMessageInput={renderMessageInput}\n            />\n          )\n      }\n    </UserProfileProvider>\n  );\n};\n\nexport default withSendbirdContext(OpenchannelConversation);\n"]},"metadata":{},"sourceType":"module"}